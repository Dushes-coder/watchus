// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è renderTicTacToeBoard —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
function renderTicTacToeBoard() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á—ë—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
    if (!window.tttScore) {
        window.tttScore = { X: 0, O: 0, draws: 0 };
    }

    let html = '';

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–ø–µ—Ä–Ω–∏–∫–µ
    if (window.currentOpponent) {
        html += '<div class="game-opponent-info">';
        html += '<div class="opponent-avatar-small">' + window.currentOpponent.emoji + '</div>';
        html += '<div class="opponent-name-small">' + window.currentOpponent.name + '</div>';
        html += '<div class="opponent-type">' + (window.currentOpponent.type === 'bot' ? '–ë–æ—Ç' : '–ò–≥—Ä–æ–∫') + '</div>';
        html += '</div>';
    }

    // –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π —Ö–æ–¥–∞
    html += '<div class="game-status">';
    if (window.gameState.gameOver) {
        if (window.gameState.winner === 'draw') {
            html += '<span style="color: #ffc107; font-weight: bold;">ü§ù –ù–∏—á—å—è!</span>';
        } else {
            const winnerColor = window.gameState.winner === 'X' ? 'var(--accent-primary)' : '#dc3545';
            html += `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <span style="color: ${winnerColor}; font-weight: bold;">${window.gameState.winner}</span>!`;
        }
    } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ–π —Ö–æ–¥ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
        const currentPlayerColor = window.gameState.currentPlayer === 'X' ? 'var(--accent-primary)' : '#dc3545';
        const currentPlayerSymbol = window.gameState.currentPlayer;

        // –î–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if (window.currentOpponent?.type === 'player') {
            const isMyTurn = window.mySymbol === window.gameState.currentPlayer;
            const turnIndicator = isMyTurn ? 'üü¢ –í–∞—à —Ö–æ–¥' : 'üî¥ –•–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞';
            const turnColor = isMyTurn ? '#28a745' : '#dc3545';

            html += `<div style="display: flex; align-items: center; gap: 10px;">`;
            html += `<span style="color: ${turnColor}; font-weight: bold; font-size: 18px;">${turnIndicator}</span>`;
            html += `<span style="color: ${currentPlayerColor}; font-weight: bold;">–•–æ–¥–∏—Ç: ${currentPlayerSymbol}</span>`;
            html += `</div>`;
        } else {
            html += `–•–æ–¥: <span style="color: ${currentPlayerColor}; font-weight: bold;">${currentPlayerSymbol}</span>`;
        }
    }
    html += '</div>';

    // –°—á—ë—Ç –∏–≥—Ä—ã
    html += '<div class="score-display">';
    html += '<div class="score-item"><span style="color: var(--accent-primary); font-weight: bold;">X</span>: ' + window.tttScore.X + '</div>';
    html += '<div class="score-item"><span style="color: #dc3545; font-weight: bold;">O</span>: ' + window.tttScore.O + '</div>';
    html += '<div class="score-item">–ù–∏—á—å–∏: ' + window.tttScore.draws + '</div>';
    html += '</div>';

    // –î–æ—Å–∫–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const isNetworkGame = window.currentOpponent?.type === 'player';
    const isMyTurn = isNetworkGame ? window.mySymbol === window.gameState.currentPlayer : true;
    const boardDisabled = isNetworkGame && !isMyTurn && !window.gameState.gameOver;

    html += '<div class="ttt-container' + (boardDisabled ? ' disabled' : '') + '">';
    if (boardDisabled) {
        html += '<div class="game-overlay">üîí –û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...</div>';
    }

    html += '<div class="ttt-board" id="tttBoard">';

    for (let row = 0; row < 3; row++) {
        for (let col = 0; col < 3; col++) {
            const cellValue = window.gameState.board[row][col];
            const isEmpty = cellValue === '';
            const cellClass = isEmpty ? 'empty' : (cellValue === 'X' ? 'x-cell' : 'o-cell');

            html += '<div class="ttt-cell ' + cellClass + '" data-row="' + row + '" data-col="' + col + '"';

            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à —Ö–æ–¥ –≤ —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä–µ
            if (boardDisabled) {
                html += ' style="pointer-events: none; opacity: 0.6;"';
            }

            html += '>';

            if (!isEmpty) {
                html += '<span class="ttt-symbol">' + cellValue + '</span>';
            }

            html += '</div>';
        }
    }

    html += '</div>';
    html += '</div>';

    html += '<div class="game-controls">';
    html += '<button onclick="closeGame()">–ó–∞–∫—Ä—ã—Ç—å</button>';
    html += '</div>';

    const gamePanel = document.getElementById('activeGameContent');
    gamePanel.innerHTML = html;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—à —Ö–æ–¥
    if (!boardDisabled) {
        const cells = document.querySelectorAll('.ttt-cell');
        cells.forEach(cell => {
            cell.addEventListener('click', handleTicTacToeCellClick);
        });
    }

    updateTicTacToeStatus();
}
