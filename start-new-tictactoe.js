// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ games.js

function startNewTicTacToeGame() {
    console.log('üéÆ Starting new TicTacToe game');

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    window.gameStateInitialized = false;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    window.gameState = {
        ...window.gameState, // –°–æ—Ö—Ä–∞–Ω—è–µ–º players –∏ gameType
        board: [
            ['', '', ''],
            ['', '', ''],
            ['', '', '']
        ],
        currentPlayer: 'X', // –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å X
        gameOver: false,
        winner: null
    };

    // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–∞—è –∏–≥—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π game-state
    if (window.currentOpponent?.type === 'player' && window.socket && window.roomId) {
        window.socket.emit('game-restart', {
            roomId: window.roomId,
            gameType: 'tictactoe'
        });
    }

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–æ—Å–∫—É
    renderTicTacToeBoard();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification('üéÆ –ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!', 'info');
}
