// ===== GAME UI =====
// –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä

console.log('üé® GameUI module loaded');

export class GameUI {
    static showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.classList.add('show');
        }, 10);

        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                notification.remove();
            }, 300);
        }, 3000);
    }

    static showOpponentSelector(gameType) {
        const modal = document.createElement('div');
        modal.className = 'modal-overlay opponent-selector';
        modal.setAttribute('aria-hidden', 'false');
        modal.style.display = 'flex';

        let gameIcon = '';
        let gameName = '';
        switch (gameType) {
            case 'chess': gameIcon = '‚ôüÔ∏è'; gameName = '–®–∞—Ö–º–∞—Ç—ã'; break;
            case 'tictactoe': gameIcon = '‚≠ï'; gameName = '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏'; break;
            case 'poker': gameIcon = 'üÉè'; gameName = '–ü–æ–∫–µ—Ä'; break;
            case 'durak': gameIcon = 'üé¥'; gameName = '–î—É—Ä–∞–∫'; break;
            case 'cards': gameIcon = 'üÉè'; gameName = '–ö–∞—Ä—Ç—ã'; break;
        }

        let html = '<div class="modal-content opponent-modal">';
        html += '<div class="modal-header">';
        html += '<h3>' + gameIcon + ' –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –¥–ª—è ' + gameName + '</h3>';
        html += '<button class="secondary icon-btn" onclick="GameUI.closeOpponentSelector()">‚úï</button>';
        html += '</div>';

        html += '<div class="opponent-sections">';

        // –°–µ–∫—Ü–∏—è —Å –±–æ—Ç–∞–º–∏
        html += '<div class="opponent-section">';
        html += '<h4>ü§ñ –ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º</h4>';
        html += '<div class="bot-options">';

        const botLevels = [
            { level: 'easy', name: '–õ–µ–≥–∫–∏–π', emoji: 'üê£', description: '–î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö' },
            { level: 'medium', name: '–°—Ä–µ–¥–Ω–∏–π', emoji: 'üòê', description: '–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞' },
            { level: 'hard', name: '–°–ª–æ–∂–Ω—ã–π', emoji: 'üí™', description: '–î–ª—è –æ–ø—ã—Ç–Ω—ã—Ö' }
        ];

        botLevels.forEach(bot => {
            html += '<div class="opponent-option bot-option" onclick="GameUI.selectBotLevel(\'' + gameType + '\', \'' + bot.level + '\')">';
            html += '<div class="opponent-avatar">' + bot.emoji + '</div>';
            html += '<div class="opponent-info">';
            html += '<div class="opponent-name">' + bot.name + ' –±–æ—Ç</div>';
            html += '<div class="opponent-status">' + bot.description + '</div>';
            html += '</div>';
            html += '</div>';
        });

        html += '</div>';
        html += '</div>';

        // –°–µ–∫—Ü–∏—è —Å –∏–≥—Ä–æ–∫–∞–º–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ
        html += '<div class="opponent-section">';
        html += '<h4>üë• –ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ</h4>';
        html += '<div class="opponent-list">';

        const otherPlayers = window.roomPlayers ? window.roomPlayers.filter(p => p.id !== (window.socket?.id || 'self')) : [];

        if (otherPlayers.length > 0) {
            otherPlayers.forEach(player => {
                const isInGame = false; // TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ –∏–≥—Ä–µ
                html += '<div class="opponent-option player-option ' + (isInGame ? 'busy' : 'available') + '" onclick="GameUI.invitePlayer(\'' + player.id + '\', \'' + gameType + '\')">';
                html += '<div class="opponent-avatar">' + (player.emoji || 'üë§') + '</div>';
                html += '<div class="opponent-info">';
                html += '<div class="opponent-name">' + (player.name || '–ò–≥—Ä–æ–∫') + '</div>';
                html += '<div class="opponent-status">' + (isInGame ? '–í –∏–≥—Ä–µ' : '–ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ') + '</div>';
                html += '</div>';
                html += '<div class="opponent-status-indicator ' + (isInGame ? 'busy' : 'online') + '"></div>';
                html += '</div>';
            });
        } else {
            html += '<div class="no-players">';
            html += '<div class="no-players-icon">üë§‚ùì</div>';
            html += '<div class="no-players-text">–í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤</div>';
            html += '<div class="no-players-subtext">–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏–ª–∏ –∏–≥—Ä–∞–π—Ç–µ —Å –±–æ—Ç–æ–º!</div>';
            html += '</div>';
        }

        html += '</div>';
        html += '</div>';

        html += '</div>';
        html += '</div>';

        modal.innerHTML = html;
        document.body.appendChild(modal);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            modal.style.opacity = '1';
            modal.querySelector('.modal-content').style.transform = 'scale(1)';
        }, 10);
    }

    static closeOpponentSelector() {
        const modal = document.querySelector('.opponent-selector');
        if (modal) {
            modal.style.opacity = '0';
            modal.querySelector('.modal-content').style.transform = 'scale(0.8)';
            setTimeout(() => {
                modal.remove();
            }, 300);
        }
    }

    static selectBot(gameType) {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º —Å—Ä–µ–¥–Ω–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        this.selectBotLevel(gameType, 'medium');
    }

    static selectBotLevel(gameType, level) {
        let botEmoji = 'ü§ñ';
        let botName = '–ë–æ—Ç';

        switch (level) {
            case 'easy':
                botEmoji = 'üê£';
                botName = '–õ–µ–≥–∫–∏–π –±–æ—Ç';
                break;
            case 'medium':
                botEmoji = 'üòê';
                botName = '–°—Ä–µ–¥–Ω–∏–π –±–æ—Ç';
                break;
            case 'hard':
                botEmoji = 'üí™';
                botName = '–°–ª–æ–∂–Ω—ã–π –±–æ—Ç';
                break;
        }

        window.currentOpponent = {
            type: 'bot',
            level: level,
            name: botName,
            emoji: botEmoji
        };

        this.closeOpponentSelector();
        this.startGameWithOpponent(gameType);
    }

    static invitePlayer(playerId, gameType) {
        if (window.socket && window.roomId) {
            window.socket.emit('send-game-invitation', {
                roomId: window.roomId,
                targetPlayerId: playerId,
                gameType: gameType,
                senderName: window.userEmoji || '–ò–≥—Ä–æ–∫'
            });

            this.showNotification('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...', 'info');
            this.closeOpponentSelector();
        }
    }

    static showGameInvitation(data) {
        const modal = document.createElement('div');
        modal.className = 'modal-overlay game-invitation';
        modal.setAttribute('aria-hidden', 'false');
        modal.style.display = 'flex';

        let gameIcon = '';
        let gameName = '';
        switch (data.gameType) {
            case 'chess': gameIcon = '‚ôüÔ∏è'; gameName = '–®–∞—Ö–º–∞—Ç—ã'; break;
            case 'tictactoe': gameIcon = '‚≠ï'; gameName = '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏'; break;
            case 'poker': gameIcon = 'üÉè'; gameName = '–ü–æ–∫–µ—Ä'; break;
            case 'durak': gameIcon = 'üé¥'; gameName = '–î—É—Ä–∞–∫'; break;
            case 'cards': gameIcon = 'üÉè'; gameName = '–ö–∞—Ä—Ç—ã'; break;
        }

        let html = '<div class="modal-content invitation-modal">';
        html += '<div class="modal-header">';
        html += '<h3>' + gameIcon + ' –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∏–≥—Ä—É</h3>';
        html += '</div>';
        html += '<div class="invitation-content">';
        html += '<div class="invitation-message">';
        html += '<div class="inviter">' + (data.senderEmoji || 'üë§') + ' ' + (data.senderName || '–ò–≥—Ä–æ–∫') + '</div>';
        html += '<div class="game-invite">–ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å —Å—ã–≥—Ä–∞—Ç—å –≤ <strong>' + gameName + '</strong></div>';
        html += '</div>';
        html += '<div class="invitation-actions">';
        html += '<button class="action-btn accept-btn" onclick="GameUI.acceptInvitation(\'' + data.gameType + '\', \'' + data.senderId + '\', \'' + (data.senderName || '–ò–≥—Ä–æ–∫').replace(/'/g, '\\\'') + '\', \'' + (data.senderEmoji || 'üë§') + '\')">‚úÖ –ü—Ä–∏–Ω—è—Ç—å</button>';
        html += '<button class="back-btn decline-btn" onclick="GameUI.declineInvitation(\'' + data.senderId + '\')">‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>';
        html += '</div>';
        html += '</div>';
        html += '</div>';

        modal.innerHTML = html;
        document.body.appendChild(modal);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            modal.style.opacity = '1';
            modal.querySelector('.modal-content').style.transform = 'scale(1)';
        }, 10);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (document.querySelector('.game-invitation')) {
                this.declineInvitation(data.senderId);
            }
        }, 30000);
    }

    static acceptInvitation(gameType, senderId, senderName, senderEmoji) {
        console.log('üéØ NEW ACCEPT INVITATION FUNCTION CALLED with args:', arguments.length, 'args:', Array.from(arguments));
        console.log('üéØ ACCEPTING invitation:', { gameType, senderId, senderName, senderEmoji });
        if (window.socket && window.roomId) {
            window.socket.emit('game-invitation-response', {
                roomId: window.roomId,
                senderId: senderId,
                accepted: true,
                gameType: gameType,
                responderName: window.userEmoji || '–ò–≥—Ä–æ–∫',
                responderEmoji: window.userEmoji || 'üë§'
            });
            console.log('üì§ Sent game-invitation-response');
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ roomPlayers
        window.currentOpponent = {
            type: 'player',
            id: senderId,
            name: senderName || '–ò–≥—Ä–æ–∫',
            emoji: senderEmoji || 'üë§'
        };
        console.log('üéØ Set currentOpponent:', window.currentOpponent);

        console.log('üéØ Closing invitation modal for accepter');
        this.closeInvitationModal();
        window.expectedGameType = gameType;
        this.showNotification('–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...', 'info');

        console.log('üöÄ Starting game for invitation accepter');
        setTimeout(() => {
            this.startGameWithOpponent(gameType);
        }, 500);
    }

    static declineInvitation(senderId) {
        console.log('‚ùå DECLINING invitation from:', senderId);
        if (window.socket && window.roomId) {
            window.socket.emit('game-invitation-response', {
                roomId: window.roomId,
                senderId: senderId,
                accepted: false
            });
            console.log('üì§ Sent decline response');
        }
        console.log('üéØ Closing invitation modal for decliner');
        this.closeInvitationModal();
    }

    static closeInvitationModal() {
        console.log('üîç Looking for invitation modal to close');
        const modal = document.querySelector('.game-invitation');
        console.log('Found modal element:', modal);
        if (modal) {
            console.log('Closing invitation modal');
            modal.style.opacity = '0';
            modal.querySelector('.modal-content').style.transform = 'scale(0.8)';
            setTimeout(() => {
                if (modal.parentNode) {
                    modal.parentNode.removeChild(modal);
                    console.log('Invitation modal removed from DOM');
                }
            }, 300);
        } else {
            console.log('No invitation modal found to close');
        }
    }

    static handleInvitationResponse(data) {
        console.log('üéâ HANDLING invitation response:', data);
        if (data.accepted) {
            console.log('‚úÖ Invitation ACCEPTED');
            const opponent = window.roomPlayers.find(p => p.id === data.responderId);
            window.currentOpponent = {
                type: 'player',
                id: data.responderId,
                name: opponent?.name || '–ò–≥—Ä–æ–∫',
                emoji: opponent?.emoji || 'üë§'
            };

            console.log('üöÄ Starting game for invitation sender');
            this.startGameWithOpponent(data.gameType);

            this.showNotification('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É.', 'success');
        } else {
            console.log('‚ùå Invitation DECLINED');
            this.showNotification('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.', 'warning');
        }
    }

    static startGameWithOpponent(gameType) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–∫—Ä—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
        try { localStorage.removeItem('wt_active_game_closed'); } catch (e) { }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.closeOpponentSelector();
        this.closeInvitationModal();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–≥—Ä—ã
        const panel = document.getElementById('activeGamePanel');
        if (!panel) return;
        const icon = document.getElementById('activeGameIcon');
        const title = document.getElementById('activeGameTitle');
        if (icon && title) {
            if (gameType === 'chess') { icon.textContent = '‚ôüÔ∏è'; title.textContent = '–®–∞—Ö–º–∞—Ç—ã'; }
            else if (gameType === 'tictactoe') { icon.textContent = '‚≠ï'; title.textContent = '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏'; }
            else if (gameType === 'cards' || gameType === 'poker' || gameType === 'durak') { icon.textContent = 'üÉè'; title.textContent = '–ö–∞—Ä—Ç—ã'; }
        }
        panel.classList.remove('hidden');
        panel.scrollIntoView({ behavior: 'smooth', block: 'nearest' });

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        switch (gameType) {
            case 'chess':
                if (window.initNetworkChess) window.initNetworkChess();
                break;
            case 'tictactoe':
                if (window.initNetworkTicTacToe) window.initNetworkTicTacToe();
                break;
            case 'poker':
                this.startPoker();
                break;
            case 'durak':
                this.startDurak();
                break;
            case 'cards':
                this.initCards();
                break;
        }
    }

    static updateOpponentSelector() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
        const selector = document.querySelector('.opponent-selector');
        if (selector) {
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
            const list = selector.querySelector('.opponent-list');
            if (list) {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
            }
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –∏–≥—Ä
    static initCards() {
        console.log('initCards called');

        const container = document.getElementById('activeGameContent');
        if (!container) return;

        let html = '';

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–ø–µ—Ä–Ω–∏–∫–µ
        if (window.currentOpponent) {
            html += '<div class="game-opponent-info">';
            html += '<div class="opponent-avatar-small">' + window.currentOpponent.emoji + '</div>';
            html += '<div class="opponent-name-small">' + window.currentOpponent.name + '</div>';
            html += '<div class="opponent-type">' + (window.currentOpponent.type === 'bot' ? '–ë–æ—Ç' : '–ò–≥—Ä–æ–∫') + '</div>';
            html += '</div>';
        }

        html += '<div class="cards-status">–ò–≥—Ä–∞ –≤ –∫–∞—Ä—Ç—ã</div>';
        html += '<div class="cards-container">';
        html += '<div class="cards-player-hand" id="playerHand"></div>';
        html += '<div class="cards-opponent-hand" id="opponentHand"></div>';
        html += '<div class="cards-table" id="cardsTable"></div>';
        html += '</div>';
        html += '<div class="cards-controls">';
        html += '<button onclick="closeGame()" class="back-btn">–ó–∞–∫—Ä—ã—Ç—å</button>';
        html += '</div>';

        container.innerHTML = html;
        container.style.display = 'block';
        console.log('HTML set to container');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É –≤ –∫–∞—Ä—Ç—ã
        window.gameState = {
            gameType: 'cards',
            playerHand: [],
            opponentHand: [],
            deck: [],
            table: [],
            gameOver: false
        };

        // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É
        const suits = ['‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è', '‚ô†Ô∏è'];
        const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];

        for (let suit of suits) {
            for (let value of values) {
                window.gameState.deck.push({ suit, value });
            }
        }

        // –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
        for (let i = 0; i < 5; i++) {
            window.gameState.playerHand.push(window.gameState.deck.pop());
            window.gameState.opponentHand.push(window.gameState.deck.pop());
        }

        this.renderCardsGame();
    }

    static renderCardsGame() {
        const playerHandElement = document.getElementById('playerHand');
        const opponentHandElement = document.getElementById('opponentHand');
        const tableElement = document.getElementById('cardsTable');

        if (playerHandElement && opponentHandElement && tableElement) {
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä—É–∫—É –∏–≥—Ä–æ–∫–∞
            let playerHandHtml = '';
            window.gameState.playerHand.forEach((card, index) => {
                playerHandHtml += `<div class="card" data-index="${index}">${card.value}${card.suit}</div>`;
            });
            playerHandElement.innerHTML = playerHandHtml;

            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä—É–∫—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            let opponentHandHtml = '';
            window.gameState.opponentHand.forEach((card, index) => {
                opponentHandHtml += `<div class="card" data-index="${index}">${card.value}${card.suit}</div>`;
            });
            opponentHandElement.innerHTML = opponentHandHtml;

            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ
            let tableHtml = '';
            window.gameState.table.forEach((card, index) => {
                tableHtml += `<div class="card" data-index="${index}">${card.value}${card.suit}</div>`;
            });
            tableElement.innerHTML = tableHtml;
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä
    static startPoker() {
        console.log('startPoker called');

        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–æ–∫–µ—Ä–∞
        window.gameState = {
            gameMode: 'poker',
            deck: [],
            playerHand: [],
            opponentHand: [],
            playerScore: window.gameState?.playerScore || 0,
            opponentScore: window.gameState?.opponentScore || 0,
            currentPlayer: 'player',
            round: window.gameState?.round || 1,
            gamePhase: 'exchange',
            winner: null
        };

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º CardGame
        import('./CardGame.js').then(module => {
            const CardGame = module.CardGame;
            window.gameState.deck = CardGame.createDeck();
            CardGame.shuffleDeck(window.gameState.deck);

            // –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
            for (let i = 0; i < 5; i++) {
                window.gameState.playerHand.push(window.gameState.deck.pop());
                window.gameState.opponentHand.push(window.gameState.deck.pop());
            }

            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º
            import('./PokerGameRenderer.js').then(renderer => {
                renderer.PokerGameRenderer.renderGame();
            });
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∏–≥—Ä—ã
        const activeGamePanel = document.getElementById('activeGamePanel');
        if (activeGamePanel) {
            document.getElementById('activeGameTitle').textContent = '–ü–æ–∫–µ—Ä';
            document.getElementById('activeGameIcon').textContent = 'üÉè';
        }
    }

    static startDurak() {
        console.log('startDurak called');

        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –¥—É—Ä–∞–∫–∞
        window.gameState = {
            gameMode: 'durak',
            deck: [],
            playerHand: [],
            opponentHand: [],
            attackingCards: [],
            defendingCards: [],
            trumpSuit: null,
            gamePhase: 'attack',
            currentAttacker: 'player'
        };

        console.log('Creating deck...');
        import('./CardGame.js').then(module => {
            const CardGame = module.CardGame;
            window.gameState.deck = CardGame.createDeck();
            CardGame.shuffleDeck(window.gameState.deck);
            window.gameState.trumpSuit = CardGame.setTrumpSuit(window.gameState.deck);

            console.log('Dealing durak cards...');
            this.dealDurakCards();

            console.log('Rendering durak game...');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
            const activeGamePanel = document.getElementById('activeGamePanel');
            if (activeGamePanel) {
                activeGamePanel.classList.remove('hidden');
                document.getElementById('activeGameTitle').textContent = '–î—É—Ä–∞–∫';
                document.getElementById('activeGameIcon').textContent = 'üé¥';
            }

            import('./DurakGameRenderer.js').then(renderer => {
                renderer.DurakGameRenderer.renderGame();
            });
        });
    }

    static dealDurakCards() {
        console.log('dealDurakCards called');
        window.gameState.playerHand = [];
        window.gameState.opponentHand = [];

        console.log('Deck length before dealing:', window.gameState.deck.length);

        for (let i = 0; i < 6; i++) {
            if (window.gameState.deck.length > 0) {
                window.gameState.playerHand.push(window.gameState.deck.pop());
            }
            if (window.gameState.deck.length > 0) {
                window.gameState.opponentHand.push(window.gameState.deck.pop());
            }
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
        this.determineFirstPlayer();

        console.log('Player hand:', window.gameState.playerHand);
        console.log('Opponent hand:', window.gameState.opponentHand);
        console.log('First attacker:', window.gameState.currentAttacker);
    }

    static determineFirstPlayer() {
        const trumpSuit = window.gameState.trumpSuit;

        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–∑—ã—Ä–∏ —É –∏–≥—Ä–æ–∫–∞
        const playerTrumps = window.gameState.playerHand.filter(card => card.suit === trumpSuit);
        const opponentTrumps = window.gameState.opponentHand.filter(card => card.suit === trumpSuit);

        let playerLowestTrump = null;
        let opponentLowestTrump = null;

        if (playerTrumps.length > 0) {
            playerLowestTrump = playerTrumps.reduce((lowest, card) =>
                card.power < lowest.power ? card : lowest
            );
        }

        if (opponentTrumps.length > 0) {
            opponentLowestTrump = opponentTrumps.reduce((lowest, card) =>
                card.power < lowest.power ? card : lowest
            );
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
        if (playerLowestTrump && opponentLowestTrump) {
            if (playerLowestTrump.power < opponentLowestTrump.power) {
                window.gameState.currentAttacker = 'player';
                window.gameState.gamePhase = 'attack';
            } else {
                window.gameState.currentAttacker = 'bot';
                window.gameState.gamePhase = 'defend';
                // –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç –ø–µ—Ä–≤—ã–º
                if (window.currentOpponent?.type === 'bot') {
                    setTimeout(() => {
                        import('./DurakBot.js').then(bot => bot.makeDurakBotAttack());
                    }, 1000);
                }
            }
        } else if (playerLowestTrump) {
            window.gameState.currentAttacker = 'player';
            window.gameState.gamePhase = 'attack';
        } else if (opponentLowestTrump) {
            window.gameState.currentAttacker = 'bot';
            window.gameState.gamePhase = 'defend';
            // –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç –ø–µ—Ä–≤—ã–º
            if (window.currentOpponent?.type === 'bot') {
                setTimeout(() => {
                    import('./DurakBot.js').then(bot => bot.makeDurakBotAttack());
                }, 1000);
            }
        } else {
            // –ù–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –∫–æ–∑—ã—Ä–µ–π - –∏–≥—Ä–æ–∫ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
            window.gameState.currentAttacker = 'player';
            window.gameState.gamePhase = 'attack';
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.GameUI = GameUI;
