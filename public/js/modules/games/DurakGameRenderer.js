// ===== DURAK GAME RENDERER =====
// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥—É—Ä–∞–∫–∞

import { CardGame } from './CardGame.js';

export class DurakGameRenderer {
    static renderGame() {
        console.log('renderDurakGame called');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –∏ —Å–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        const activeGamePanel = document.getElementById('activeGamePanel');
        const gameContainer = document.getElementById('gameContainer');

        if (activeGamePanel) {
            activeGamePanel.classList.remove('hidden');
            activeGamePanel.style.display = 'block';
            document.getElementById('activeGameTitle').textContent = '–î—É—Ä–∞–∫';
            document.getElementById('activeGameIcon').textContent = 'üé¥';
        }

        const gamePanel = document.getElementById('activeGameContent');
        console.log('gamePanel for durak:', gamePanel);
        if (!gamePanel) {
            console.error('activeGameContent not found!');
            return;
        }

        if (!window.gameState) {
            console.error('gameState not initialized');
            return;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if (!window.gameState.opponentHand) window.gameState.opponentHand = [];
        if (!window.gameState.playerHand) window.gameState.playerHand = [];
        if (!window.gameState.attackingCards) window.gameState.attackingCards = [];
        if (!window.gameState.defendingCards) window.gameState.defendingCards = [];

        console.log('gameState:', window.gameState);
        console.log('playerHand length:', window.gameState.playerHand.length);
        console.log('opponentHand length:', window.gameState.opponentHand.length);
        console.log('–§–∞–∑–∞ –∏–≥—Ä—ã:', window.gameState.gamePhase, '–ê—Ç–∞–∫—É—é—â–∏–π:', window.gameState.currentAttacker);
        console.log('–ê—Ç–∞–∫—É—é—â–∏–µ –∫–∞—Ä—Ç—ã:', window.gameState.attackingCards);
        console.log('–ó–∞—â–∏—â–∞—é—â–∏–µ –∫–∞—Ä—Ç—ã:', window.gameState.defendingCards);

        let html = '<div class="cards-menu">';

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–ø–µ—Ä–Ω–∏–∫–µ
        if (window.currentOpponent) {
            html += '<div class="game-opponent-info">';
            html += '<div class="opponent-avatar-small">' + window.currentOpponent.emoji + '</div>';
            html += '<div class="opponent-name-small">' + window.currentOpponent.name + '</div>';
            html += '<div class="opponent-type">' + (window.currentOpponent.type === 'bot' ? '–ë–æ—Ç' : '–ò–≥—Ä–æ–∫') + '</div>';
            html += '</div>';
        }

        html += '<h3>üé¥ –î—É—Ä–∞–∫</h3>';
        html += '<div class="game-info">';
        html += '<div>–ö–æ–∑—ã—Ä—å: <span class="trump-suit ' + (window.gameState.trumpSuit ? CardGame.getSuitClass(window.gameState.trumpSuit) : '') + '">' + (window.gameState.trumpSuit || '?') + '</span></div>';
        html += '<div>–ö–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ: ' + (window.gameState.deck ? window.gameState.deck.length : 0) + '</div>';

        const currentPhase = window.gameState.gamePhase === 'attack' ? '–ê—Ç–∞–∫–∞' : '–ó–∞—â–∏—Ç–∞';
        const currentAttacker = window.gameState.currentAttacker === 'player' ? '–í—ã' : '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫';
        html += '<div>–§–∞–∑–∞: ' + currentPhase + ' (' + currentAttacker + ')</div>';
        html += '</div>';

        // –ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–≤–≤–µ—Ä—Ö—É)
        html += this.renderOpponentCards();

        // –í–∞—à–∏ –∫–∞—Ä—Ç—ã (–≤–Ω–∏–∑—É)
        html += this.renderPlayerCards();

        // –°—Ç–æ–ª (–ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ)
        html += this.renderTable();

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        html += this.renderControls();

        html += '</div>';

        try {
            gamePanel.innerHTML = html;
            console.log('Durak HTML set successfully');
        } catch (e) {
            console.error('Error setting durak HTML:', e);
        }
    }

    static renderOpponentCards() {
        let html = '<div class="opponent-cards">';
        html += '<h4>–ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (' + window.gameState.opponentHand.length + '):</h4>';
        html += '<div class="cards-hand opponent-hand">';
        for (let i = 0; i < window.gameState.opponentHand.length; i++) {
            html += '<div class="card card-back">üÇ†</div>';
        }
        html += '</div>';
        html += '</div>';
        return html;
    }

    static renderPlayerCards() {
        let html = '<div class="player-cards">';
        html += '<h4>–í–∞—à–∏ –∫–∞—Ä—Ç—ã:</h4>';
        html += '<div class="cards-hand player-hand">';

        for (let i = 0; i < window.gameState.playerHand.length; i++) {
            const card = window.gameState.playerHand[i];
            if (card && card.suit && card.value) {
                const suitClass = CardGame.getSuitClass(card.suit);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏–≥—Ä–∞—Ç—å —ç—Ç–æ–π –∫–∞—Ä—Ç–æ–π
                let canPlay = this.canPlayCard(card, i);

                const playableClass = canPlay ? ' playable' : '';
                html += '<div class="card ' + suitClass + playableClass + '" data-index="' + i + '" onclick="playDurakCard(' + i + ')">';
                html += '<div class="card-value">' + card.value + '</div>';
                html += '<div class="card-suit">' + card.suit + '</div>';
                html += '</div>';
            }
        }
        html += '</div>';
        html += '</div>';
        return html;
    }

    static canPlayCard(card, index) {
        try {
            if (window.gameState.gamePhase === 'attack' && window.gameState.currentAttacker === 'player') {
                // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
                if (window.gameState.attackingCards.length === 0) {
                    return true; // –ü–µ—Ä–≤–∞—è –∞—Ç–∞–∫–∞ - –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π
                } else {
                    return CardGame.canAttackOrThrowCard(card, [...window.gameState.attackingCards, ...window.gameState.defendingCards]);
                }
            } else if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'player') {
                // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫–æ–≤–∞–ª, –±–æ—Ç –∑–∞—â–∏—â–∞–µ—Ç—Å—è, –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å
                const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);
                if (allDefended) {
                    return CardGame.canAttackOrThrowCard(card, [...window.gameState.attackingCards, ...window.gameState.defendingCards]);
                }
            } else if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
                // –ò–≥—Ä–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è –æ—Ç –±–æ—Ç–∞
                const undefendedCards = window.gameState.attackingCards.filter((_, index) => !window.gameState.defendingCards[index]);
                return undefendedCards.some(attackCard => CardGame.canDefendCard(card, attackCard, window.gameState.trumpSuit));
            } else if (window.gameState.gamePhase === 'attack' && window.gameState.currentAttacker === 'bot') {
                // –ë–æ—Ç –∞—Ç–∞–∫–æ–≤–∞–ª, –Ω–æ –µ—â–µ –Ω–µ –≤—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã - –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å
                const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);
                if (allDefended) {
                    return CardGame.canAttackOrThrowCard(card, [...window.gameState.attackingCards, ...window.gameState.defendingCards]);
                }
            }
        } catch (e) {
            console.error('Error checking if card can be played:', e);
            return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏–≥—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ–π
        }
        return false;
    }

    static renderTable() {
        let html = '<div class="durak-table">';
        html += '<h4>–°—Ç–æ–ª:</h4>';
        html += '<div class="table-cards">';

        for (let i = 0; i < window.gameState.attackingCards.length; i++) {
            const attackCard = window.gameState.attackingCards[i];
            const defendCard = window.gameState.defendingCards[i];

            html += '<div class="card-pair">';
            html += '<div class="card ' + CardGame.getSuitClass(attackCard.suit) + ' attacking">';
            html += '<div class="card-value">' + attackCard.value + '</div>';
            html += '<div class="card-suit">' + attackCard.suit + '</div>';
            html += '</div>';

            if (defendCard) {
                html += '<div class="card ' + CardGame.getSuitClass(defendCard.suit) + ' defending">';
                html += '<div class="card-value">' + defendCard.value + '</div>';
                html += '<div class="card-suit">' + defendCard.suit + '</div>';
                html += '</div>';
            }
            html += '</div>';
        }
        html += '</div>';
        html += '</div>';
        return html;
    }

    static renderControls() {
        let html = '<div class="durak-controls">';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã –∏–≥—Ä—ã
        if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
            // –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç, –∏–≥—Ä–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è
            html += '<button onclick="takeDurakCards()" class="action-btn">–í–∑—è—Ç—å –∫–∞—Ä—Ç—ã</button>';
            html += '<button onclick="passDurakTurn()" class="action-btn">–ü–∞—Å (–≤–∑—è—Ç—å)</button>';
        }

        if (window.gameState.gamePhase === 'attack' && window.gameState.currentAttacker === 'player') {
            // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç - –º–æ–∂–µ—Ç –ø–∞—Å–æ–≤–∞—Ç—å (–∑–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ç–∞–∫—É)
            if (window.gameState.attackingCards.length > 0) {
                html += '<button onclick="passDurakTurn()" class="action-btn">–ü–∞—Å (–∑–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ç–∞–∫—É)</button>';
            }
        }

        if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'player') {
            // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫–æ–≤–∞–ª, –±–æ—Ç –æ—Ç–±–∏–ª—Å—è, –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å –∏–ª–∏ –ø–∞—Å–æ–≤–∞—Ç—å
            const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);
            if (allDefended && window.gameState.attackingCards.length > 0) {
                html += '<button onclick="passDurakTurn()" class="action-btn">–ü–∞—Å (–æ—Ç–±–æ–π)</button>';
            }
        }

        if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
            // –ë–æ—Ç –∞—Ç–∞–∫–æ–≤–∞–ª, –∏–≥—Ä–æ–∫ –æ—Ç–±–∏–ª—Å—è, —Ç–µ–ø–µ—Ä—å –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–∞—Å–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–±–æ—è
            const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);
            if (allDefended && window.gameState.attackingCards.length > 0) {
                html += '<button onclick="passDurakTurn()" class="action-btn">–ü–∞—Å (–æ—Ç–±–æ–π)</button>';
            }
        }

        html += '<button onclick="newDurakRound()" class="action-btn">–ù–æ–≤–∞—è –∏–≥—Ä–∞</button>';
        html += '<button onclick="closeGame()" class="back-btn">–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é</button>';
        html += '</div>';
        return html;
    }

    static renderCardsMenu() {
        console.log('renderCardsMenu called');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        const activeGamePanel = document.getElementById('activeGamePanel');
        console.log('activeGamePanel found:', !!activeGamePanel);
        if (activeGamePanel) {
            activeGamePanel.classList.remove('hidden');
            activeGamePanel.style.display = 'block';
            document.getElementById('activeGameTitle').textContent = '–ö–∞—Ä—Ç–æ—á–Ω—ã–µ –∏–≥—Ä—ã';
            document.getElementById('activeGameIcon').textContent = 'üÉè';
        }

        const gamePanel = document.getElementById('activeGameContent');
        console.log('gamePanel (activeGameContent) found:', !!gamePanel);
        if (!gamePanel) {
            console.error('activeGameContent not found!');
            return;
        }

        gamePanel.style.display = 'block'; // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∏–¥–∏–º–æ

        let html = '<div class="cards-menu">';

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–ø–µ—Ä–Ω–∏–∫–µ
        if (window.currentOpponent) {
            html += '<div class="game-opponent-info">';
            html += '<div class="opponent-avatar-small">' + window.currentOpponent.emoji + '</div>';
            html += '<div class="opponent-name-small">' + window.currentOpponent.name + '</div>';
            html += '<div class="opponent-type">' + (window.currentOpponent.type === 'bot' ? '–ë–æ—Ç' : '–ò–≥—Ä–æ–∫') + '</div>';
            html += '</div>';
        }

        html += '<h3>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:</h3>';
        html += '<div class="game-selection">';
        html += '<button class="game-mode-btn" onclick="selectPoker()">üÉè –ü–æ–∫–µ—Ä</button>';
        html += '<button class="game-mode-btn" onclick="selectDurak()">üé¥ –î—É—Ä–∞–∫</button>';
        html += '</div>';
        html += '<div class="game-rules">';
        html += '<div class="rules-section">';
        html += '<h4>–ü—Ä–∞–≤–∏–ª–∞ –ü–æ–∫–µ—Ä–∞:</h4>';
        html += '<ul>';
        html += '<li>–ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç 5 –∫–∞—Ä—Ç</li>';
        html += '<li>–¶–µ–ª—å: —Å–æ–±—Ä–∞—Ç—å –ª—É—á—à—É—é –ø–æ–∫–µ—Ä–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é</li>';
        html += '<li>–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é): –ø–∞—Ä–∞, –¥–≤–µ –ø–∞—Ä—ã, —Ç—Ä–æ–π–∫–∞, —Å—Ç—Ä–∏—Ç, —Ñ–ª–µ—à, —Ñ—É–ª-—Ö–∞—É—Å, –∫–∞—Ä–µ, —Å—Ç—Ä–∏—Ç-—Ñ–ª–µ—à</li>';
        html += '<li>–ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –¥–æ 3 –∫–∞—Ä—Ç –∑–∞ —Ä–∞–∑</li>';
        html += '</ul>';
        html += '</div>';
        html += '<div class="rules-section">';
        html += '<h4>–ü—Ä–∞–≤–∏–ª–∞ –î—É—Ä–∞–∫–∞:</h4>';
        html += '<ul>';
        html += '<li>–ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç 6 –∫–∞—Ä—Ç, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–æ–∑—ã—Ä–Ω–∞—è –º–∞—Å—Ç—å</li>';
        html += '<li>–¶–µ–ª—å: –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö –∫–∞—Ä—Ç –ø–µ—Ä–≤—ã–º</li>';
        html += '<li>–ê—Ç–∞–∫—É—é—â–∏–π –∫–ª–∞–¥—ë—Ç –∫–∞—Ä—Ç—É, –∑–∞—â–∏—â–∞—é—â–∏–π—Å—è –¥–æ–ª–∂–µ–Ω –ø–æ–±–∏—Ç—å –µ—ë</li>';
        html += '<li>–ë–∏—Ç—å –º–æ–∂–Ω–æ —Å—Ç–∞—Ä—à–µ–π –∫–∞—Ä—Ç–æ–π —Ç–æ–π –∂–µ –º–∞—Å—Ç–∏ –∏–ª–∏ –∫–æ–∑—ã—Ä–µ–º</li>';
        html += '<li>–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –ø–æ–±–∏—Ç—å - –∑–∞–±–∏—Ä–∞–µ—à—å –≤—Å–µ –∫–∞—Ä—Ç—ã</li>';
        html += '</ul>';
        html += '</div>';
        html += '</div>';
        html += '<button onclick="closeGame()" class="close-btn">–ó–∞–∫—Ä—ã—Ç—å</button>';
        html += '</div>';

        gamePanel.innerHTML = html;
        console.log('HTML set to gamePanel');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.DurakGameRenderer = DurakGameRenderer;
