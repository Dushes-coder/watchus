// ===== POKER GAME CLASS =====

import { BaseGame } from '../core/BaseGame.js';

// –ö–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã –≤ –ø–æ–∫–µ—Ä
class PokerGame extends BaseGame {
    constructor() {
        super('poker');
        this.round = 1;
        this.maxRounds = 10;
        this.playerScore = 0;
        this.opponentScore = 0;
        this.gamePhase = 'discard'; // 'discard', 'waiting', 'finished'
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
    createDeck() {
        this.deck = [];
        const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
        const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
        suits.forEach(suit => {
            values.forEach(value => {
                this.deck.push({
                    suit,
                    value,
                    power: this.getCardPower(value)
                });
            });
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–ª—ã –∫–∞—Ä—Ç—ã
    getCardPower(value) {
        const powers = { '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14 };
        return powers[value] || 0;
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
    shuffleDeck() {
        for (let i = this.deck.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [this.deck[i], this.deck[j]] = [this.deck[j], this.deck[i]];
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ CSS-–∫–ª–∞—Å—Å–∞ –¥–ª—è –º–∞—Å—Ç–∏
    getSuitClass(suit) {
        const classes = { '‚ô•': 'hearts', '‚ô¶': 'diamonds', '‚ô£': 'clubs', '‚ô†': 'spades' };
        return classes[suit] || '';
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
    init() {
        try {
            console.log('PokerGame.init() called');
            if (!super.init()) {
                console.log('PokerGame.init(): super.init() failed');
                return false;
            }
            console.log('PokerGame.init(): super.init() success, container found:', !!this.container);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mapping –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∏–≥—Ä—ã
            this.setupPlayerMapping();

            if (this.isNetworkGame) {
                // –î–ª—è —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞
                console.log('PokerGame.init(): Network game detected');

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                this.showLoadingState();

                // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ socket –≤ –∫–æ–º–Ω–∞—Ç–µ
                console.log('PokerGame.init(): Ensuring socket is in room:', this.roomId);
                this.socket.emit('join-room', { roomId: this.roomId, userEmoji: 'üÉè' });

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
            if (this.socket && this.roomId) {
                // game-state –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ games.js handleGameStateUpdate
                // socket.on('game-state') —É–±—Ä–∞–Ω–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            }

                // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º render() –∑–¥–µ—Å—å - –∂–¥–µ–º gameState —Å —Å–µ—Ä–≤–µ—Ä–∞
                return true;
            }

            // –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ (—Å –±–æ—Ç–æ–º)
            this.gameState = {
                gameMode: 'poker',
                deck: [],
                playerHand: [],
                opponentHand: [],
                playerScore: 0,
                opponentScore: 0,
                currentPlayer: 'player',
                round: 1,
                gamePhase: 'discard',
                winner: null
            };

            // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É –∏ —Ä–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
            this.createDeck();
            this.shuffleDeck();
            this.dealCards();

            console.log('PokerGame.init(): calling render');
            this.render();
            console.log('PokerGame.init(): render completed');

            return true;
        } catch (error) {
            console.error('PokerGame.init(): Error during initialization:', error);
            return false;
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mapping –∏–≥—Ä–æ–∫–æ–≤
    setupPlayerMapping() {
        if (this.socket && this.roomId && this.currentOpponent?.type === 'player') {
            this.isNetworkGame = true;
            // this.gameState.players –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–º –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ game-state
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å InvitationManager)
    setupPlayerSymbols() {
        this.setupPlayerMapping();
    }

    // –†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç
    dealCards() {
        this.gameState.playerHand = [];
        this.gameState.opponentHand = [];

        for (let i = 0; i < 5; i++) {
            if (this.deck.length > 0) this.gameState.playerHand.push(this.deck.pop());
            if (this.deck.length > 0) this.gameState.opponentHand.push(this.deck.pop());
        }
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–≥—Ä—ã
    render() {
        if (!this.gameState) {
            console.log('PokerGame.render(): gameState not loaded yet, showing loading state');
            this.showLoadingState();
            return;
        }

        if (this.isNetworkGame && !this.gameState.players) {
            console.log('PokerGame.render(): players not loaded yet, showing loading state');
            this.showLoadingState();
            return;
        }

        if (this.isNetworkGame && (!this.gameState.player1Hand || !this.gameState.player2Hand)) {
            console.log('PokerGame.render(): hands not loaded yet, showing loading state');
            this.showLoadingState();
            return;
        }

        // –î–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
        let playerHand, opponentHand, playerScore, opponentScore;
        if (this.isNetworkGame && this.playerRole) {
            playerHand = this.playerRole === 'player1' ? this.gameState.player1Hand : this.gameState.player2Hand;
            opponentHand = this.playerRole === 'player1' ? this.gameState.player2Hand : this.gameState.player1Hand;
        } else {
            playerHand = this.gameState.playerHand;
            opponentHand = this.gameState.opponentHand;
            playerScore = this.gameState.playerScore;
            opponentScore = this.gameState.opponentScore;
        }

        let html = this.renderOpponentInfo();
        html += '<div class="poker-game">';
        html += '<h3>üÉè –ü–æ–∫–µ—Ä</h3>';
        html += '<div class="game-info">';
        html += `<div>–†–∞—É–Ω–¥: <strong>${this.gameState.round || 1}</strong></div>`;
        html += `<div>–í–∞—à —Å—á—ë—Ç: ${playerScore}</div>`;
        html += `<div>–°—á—ë—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: ${opponentScore}</div>`;
        html += '</div>';

        // –ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        if (this.gameState.gamePhase !== 'waiting') {
            html += '<div class="opponent-cards">';
            html += '<h4>–ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:</h4>';
            html += '<div class="cards-hand opponent-hand">';
            if (opponentHand && opponentHand.length > 0) {
                for (let i = 0; i < opponentHand.length; i++) {
                    const card = opponentHand[i];
                    if (this.gameState.gamePhase === 'waiting' || this.gameState.gamePhase === 'finished') {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                        const suitClass = this.getSuitClass(card.suit);
                        html += `<div class="card ${suitClass} revealed">`;
                        html += `<div class="card-value">${card.value}</div>`;
                        html += `<div class="card-suit">${card.suit}</div>`;
                        html += '</div>';
                    } else {
                        // –ó–∞–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã
                        html += '<div class="card card-back">üÇ†</div>';
                    }
                }
            }
            html += '</div></div>';
        }

        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        html += '<div class="poker-center">';
        if (this.gameState.gamePhase === 'finished') {
            if (this.isNetworkGame) {
                // –î–ª—è —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã finished –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                let playerResult;
                if (this.gameState.winner === 'draw') {
                    playerResult = '–ù–ò–ß–¨–Ø!';
                } else if (this.gameState.winner === this.playerRole) {
                    playerResult = '–ü–û–ë–ï–î–ê!';
                } else {
                    playerResult = '–ü–û–†–ê–ñ–ï–ù–ò–ï!';
                }

                const resultColor = playerResult === '–ü–û–ë–ï–î–ê!' ? '#28a745' : 
                                   playerResult === '–ü–û–†–ê–ñ–ï–ù–ò–ï!' ? '#dc3545' : '#ffc107';

                html += '<div class="poker-status">';
                html += '<div style="font-size: 24px; font-weight: bold; color: ' + resultColor + '; margin-bottom: 10px;">' + playerResult + '</div>';
                html += '<div>–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–∂–º–∏—Ç–µ "–ù–æ–≤–∞—è –∏–≥—Ä–∞" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞.</div>';
                html += '</div>';
            } else {
                // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∏–≥—Ä—ã finished –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
                const winner = this.gameState.winner;
                html += '<div class="game-result">';
                if (winner === 'player1' || winner === 'player') {
                    html += '<div style="color: #28a745; font-size: 24px; font-weight: bold;">üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∏–≥—Ä—É!</div>';
                } else if (winner === 'player2' || winner === 'opponent') {
                    html += '<div style="color: #dc3545; font-size: 24px; font-weight: bold;">üòû –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª –∏–≥—Ä—É!</div>';
                } else {
                    html += '<div style="color: #ffc107; font-size: 24px; font-weight: bold;">ü§ù –ù–∏—á—å—è –≤ –∏–≥—Ä–µ!</div>';
                }
                html += '<div style="margin-top: 10px;">–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ü–µ—Ä–≤—ã–π, –∫—Ç–æ –Ω–∞–±—Ä–∞–ª 10 –æ—á–∫–æ–≤, –ø–æ–±–µ–∂–¥–∞–µ—Ç!</div>';
                html += '</div>';
            }
        } else if (this.gameState.gamePhase === 'waiting') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–æ–ª —Å –∫–∞—Ä—Ç–∞–º–∏
            html += '<div class="poker-table">';
            html += '<div class="table-title">–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π</div>';

            // –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ
            html += '<div class="table-player-cards">';
            html += '<div class="player-label">–í–∞—à–∏ –∫–∞—Ä—Ç—ã:</div>';
            html += '<div class="table-cards-row">';
            if (playerHand && playerHand.length > 0) {
                playerHand.forEach((card, i) => {
                    const suitClass = this.getSuitClass(card.suit);
                    html += `<div class="card ${suitClass} on-table">`;
                    html += `<div class="card-value">${card.value}</div>`;
                    html += `<div class="card-suit">${card.suit}</div>`;
                    html += '</div>';
                });
            }
            html += '</div></div>';

            // –ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ
            html += '<div class="table-opponent-cards">';
            html += '<div class="opponent-label">–ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:</div>';
            html += '<div class="table-cards-row">';
            if (opponentHand && opponentHand.length > 0) {
                opponentHand.forEach((card, i) => {
                    const suitClass = this.getSuitClass(card.suit);
                    html += `<div class="card ${suitClass} on-table">`;
                    html += `<div class="card-value">${card.value}</div>`;
                    html += `<div class="card-suit">${card.suit}</div>`;
                    html += '</div>';
                });
            }
            html += '</div></div></div>';

            // –°—Ç–∞—Ç—É—Å
            html += '<div class="poker-status">–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...</div>';
        } else if (this.gameState.gamePhase === 'discard') {
            html += '<div class="poker-status">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—ã –¥–ª—è –æ–±–º–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é</div>';
        }
        html += '</div>';

        // –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
        if (this.gameState.gamePhase !== 'waiting') {
            html += '<div class="player-cards">';
            html += '<h4>–í–∞—à–∏ –∫–∞—Ä—Ç—ã:</h4>';
            html += '<div class="cards-hand player-hand">';
            if (playerHand && playerHand.length > 0) {
                playerHand.forEach((card, i) => {
                    const suitClass = this.getSuitClass(card.suit);
                    const selectedClass = card.selected ? ' selected' : '';
                    html += `<div class="card ${suitClass}${selectedClass}" data-index="${i}" onclick="window.gameManager.getCurrentGame().handleCardClick(${i})">`;
                    html += `<div class="card-value">${card.value}</div>`;
                    html += `<div class="card-suit">${card.suit}</div>`;
                    html += '</div>';
                });
            }
            html += '</div></div>';
        }

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        html += '<div class="poker-controls">';
        console.log('PokerGame.render(): gamePhase =', this.gameState.gamePhase);
        if (this.gameState.gamePhase === 'finished') {
            console.log('PokerGame.render(): adding new game button');
            html += '<button onclick="console.log(\'Button clicked\'); startNewPokerGame()" class="action-btn">üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞</button>';
        } else if (this.gameState.gamePhase === 'discard') {
            html += '<button onclick="window.gameManager.getCurrentGame().exchangeCards()" class="action-btn">–û–±–º–µ–Ω—è—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ</button>';
            html += '<button onclick="window.gameManager.getCurrentGame().checkHand()" class="action-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é</button>';
            html += '<button onclick="window.gameManager.getCurrentGame().nextRound()" class="action-btn">–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥</button>';
        } else if (this.gameState.gamePhase === 'waiting') {
            html += '<button disabled class="action-btn" style="opacity: 0.5;">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...</button>';
        }
        html += '<button onclick="window.gameManager.closeCurrentGame()" class="back-btn">–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é</button>';
        html += '</div>';

        html += '</div>';

        console.log('PokerGame.render(): setting innerHTML, html length:', html.length);
        this.container.innerHTML = html;
        this.container.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        console.log('PokerGame.render(): container displayed');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
    handleCardClick(index) {
        if (this.gameState.gamePhase !== 'discard') return;

        let playerHand;
        if (this.isNetworkGame && this.playerRole) {
            playerHand = this.playerRole === 'player1' ? this.gameState.player1Hand : this.gameState.player2Hand;
        } else {
            playerHand = this.gameState.playerHand;
        }

        const card = playerHand[index];
        if (card) {
            card.selected = !card.selected;
            this.render();
        }
    }

    // –û–±–º–µ–Ω –∫–∞—Ä—Ç
    exchangeCards() {
        let playerHand;
        if (this.isNetworkGame && this.playerRole) {
            playerHand = this.playerRole === 'player1' ? this.gameState.player1Hand : this.gameState.player2Hand;
        } else {
            playerHand = this.gameState.playerHand;
        }

        const selectedCards = playerHand.filter(card => card.selected);

        if (selectedCards.length === 0) {
            this.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—ã –¥–ª—è –æ–±–º–µ–Ω–∞', 'warning');
            return;
        }

        if (this.isNetworkGame) {
            // –î–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É –æ—Ç–¥–µ–ª—å–Ω–æ
            selectedCards.forEach(card => {
                this.sendMove({
                    action: 'discard',
                    card: card,
                    playerId: this.socket.id
                });
            });
            this.showNotification('–ö–∞—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –æ–±–º–µ–Ω...', 'info');
            // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
            playerHand.forEach(card => card.selected = false);
            this.render();
            return;
        }

        selectedCards.forEach(card => {
            const index = playerHand.indexOf(card);
            if (index !== -1 && this.deck.length > 0) {
                playerHand[index] = this.deck.pop();
            }
            card.selected = false;
        });

        this.showNotification('–ö–∞—Ä—Ç—ã –æ–±–º–µ–Ω—è–Ω—ã! –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é.', 'success');
        this.render();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    checkHand() {
        if (this.isNetworkGame) {
            this.sendMove({ action: 'finish', playerId: this.socket.id });
            this.showNotification('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏...', 'info');
            return;
        }

        const playerCombination = this.getPokerCombination(this.gameState.playerHand);

        // –ë–æ—Ç —Ç–æ–∂–µ –º–æ–∂–µ—Ç –æ–±–º–µ–Ω—è—Ç—å –∫–∞—Ä—Ç—ã
        if (this.currentOpponent?.type === 'bot') {
            this.makeBotExchange();
        }

        const opponentCombination = this.getPokerCombination(this.gameState.opponentHand);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        let result = '';
        if (playerCombination.rank > opponentCombination.rank) {
            result = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Ä–∞—É–Ω–¥!';
            this.gameState.playerScore++;
        } else if (playerCombination.rank < opponentCombination.rank) {
            result = '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª —Ä–∞—É–Ω–¥!';
            this.gameState.opponentScore++;
        } else {
            result = '–ù–∏—á—å—è –≤ —Ä–∞—É–Ω–¥–µ!';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
        if (this.gameState.playerScore >= this.maxRounds) {
            this.gameState.gamePhase = 'finished';
            this.gameState.winner = 'player';
            this.endGame('player');
        } else if (this.gameState.opponentScore >= this.maxRounds) {
            this.gameState.gamePhase = 'finished';
            this.gameState.winner = 'opponent';
            this.endGame('opponent');
        } else {
            this.gameState.gamePhase = 'waiting';
        }

        this.gameState.lastResult = {
            playerCombination,
            opponentCombination,
            result
        };

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        this.render();
        if (!this.isNetworkGame) {
            setTimeout(() => {
                this.nextRound();
            }, 2000);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∫–µ—Ä–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    getPokerCombination(hand) {
        const values = hand.map(card => card.power).sort((a, b) => a - b);
        const suits = hand.map(card => card.suit);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        const isFlush = suits.every(suit => suit === suits[0]);
        const isStraight = values.every((val, i) => i === 0 || val === values[i-1] + 1);

        const valueCounts = {};
        values.forEach(val => valueCounts[val] = (valueCounts[val] || 0) + 1);
        const counts = Object.values(valueCounts).sort((a, b) => b - a);

        if (isFlush && isStraight) return { name: '–°—Ç—Ä–∏—Ç-—Ñ–ª–µ—à', rank: 8 };
        if (counts[0] === 4) return { name: '–ö–∞—Ä–µ', rank: 7 };
        if (counts[0] === 3 && counts[1] === 2) return { name: '–§—É–ª-—Ö–∞—É—Å', rank: 6 };
        if (isFlush) return { name: '–§–ª–µ—à', rank: 5 };
        if (isStraight) return { name: '–°—Ç—Ä–∏—Ç', rank: 4 };
        if (counts[0] === 3) return { name: '–¢—Ä–æ–π–∫–∞', rank: 3 };
        if (counts[0] === 2 && counts[1] === 2) return { name: '–î–≤–µ –ø–∞—Ä—ã', rank: 2 };
        if (counts[0] === 2) return { name: '–ü–∞—Ä–∞', rank: 1 };
        return { name: '–°—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞', rank: 0 };
    }

    // –û–±–º–µ–Ω –∫–∞—Ä—Ç –±–æ—Ç–∞
    makeBotExchange() {
        if (this.currentOpponent?.type !== 'bot') return;

        const hand = this.gameState.opponentHand;
        const combination = this.getPokerCombination(hand);

        // –ï—Å–ª–∏ —É –±–æ—Ç–∞ —Ö–æ—Ä–æ—à–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è, –Ω–µ –º–µ–Ω—è–µ–º
        if (combination.rank >= 2) return;

        // –ú–µ–Ω—è–µ–º 1-3 –∫–∞—Ä—Ç—ã
        const cardsToChange = Math.floor(Math.random() * 3) + 1;
        const changedIndices = [];

        for (let i = 0; i < cardsToChange; i++) {
            let randomIndex;
            do {
                randomIndex = Math.floor(Math.random() * hand.length);
            } while (changedIndices.includes(randomIndex));

            changedIndices.push(randomIndex);

            if (this.deck.length > 0) {
                this.gameState.opponentHand[randomIndex] = this.deck.pop();
            }
        }
    }

    // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    showResult() {
        if (!this.gameState.lastResult) return;

        const { playerCombination, opponentCombination, result } = this.gameState.lastResult;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        let playerResult;
        if (this.isNetworkGame && this.playerRole) {
            if (this.gameState.winner === 'draw') {
                playerResult = '–ù–ò–ß–¨–Ø!';
            } else if (this.gameState.winner === this.playerRole) {
                playerResult = '–ü–û–ë–ï–î–ê!';
            } else {
                playerResult = '–ü–û–†–ê–ñ–ï–ù–ò–ï!';
            }
        } else {
            // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            playerResult = result.includes('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏') ? '–ü–û–ë–ï–î–ê!' : 
                          result.includes('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª') ? '–ü–û–†–ê–ñ–ï–ù–ò–ï!' : '–ù–ò–ß–¨–Ø!';
        }

        const resultColor = playerResult === '–ü–û–ë–ï–î–ê!' ? '#28a745' : 
                           playerResult === '–ü–û–†–ê–ñ–ï–ù–ò–ï!' ? '#dc3545' : '#ffc107';

        let statusHtml = `
            <div style="margin-bottom: 10px;"><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞ ${this.gameState.round}:</strong></div>
            <div>–í–∞—à–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: <span style="color: var(--accent-primary);">${playerCombination.name}</span></div>
            <div>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: <span style="color: var(--accent-primary);">${opponentCombination.name}</span></div>
            <div style="margin-top: 20px; font-size: 32px; font-weight: bold; color: ${resultColor};">${playerResult}</div>
            <div style="margin-top: 10px; color: #666;">–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...</div>
        `;

        const statusElement = this.container.querySelector('.poker-status');
        if (statusElement) {
            statusElement.innerHTML = statusHtml;
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É
        setTimeout(() => {
            this.nextRound();
        }, 3000);
    }

    // –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
    nextRound() {
        if (this.isNetworkGame) {
            // –î–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä –Ω–æ–≤–∞—è –∏–≥—Ä–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
            return;
        }

        this.gameState.round++;
        this.gameState.gamePhase = 'discard';

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É –∏ —Ä–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
        this.createDeck();
        this.shuffleDeck();
        this.dealCards();

        this.render();
        this.showNotification('üéÆ –ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞ –≤ –ø–æ–∫–µ—Ä!', 'info');
    }

    // –ù–æ–≤–∞—è –∏–≥—Ä–∞
    startNewGame() {
        console.log('PokerGame.startNewGame() called, isNetworkGame:', this.isNetworkGame);
        if (this.isNetworkGame) {
            console.log('PokerGame: Starting new network game');
            // –î–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—É—é –∏–≥—Ä—É
            this.sendMove({ action: 'new-game', playerId: this.socket.id });
            this.showNotification('–ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—É—é –∏–≥—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...', 'info');
            return;
        }

        // –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ (—Å –±–æ—Ç–æ–º)
        console.log('PokerGame: Starting new local game');
        this.gameState = {
            gameMode: 'poker',
            deck: [],
            playerHand: [],
            opponentHand: [],
            playerScore: 0,
            opponentScore: 0,
            currentPlayer: 'player',
            round: 1,
            gamePhase: 'discard',
            winner: null
        };

        this.createDeck();
        this.shuffleDeck();
        this.dealCards();
        this.render();
        this.showNotification('üéÆ –ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞ –≤ –ø–æ–∫–µ—Ä!', 'info');
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingState() {
        if (this.container) {
            this.container.innerHTML = `
                <div class="game-loading">
                    <h3>üÉè –ü–æ–∫–µ—Ä</h3>
                    <div class="loading-spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...</p>
                    <p>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...</p>
                </div>
            `;
            this.container.style.display = 'block';
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Ö–æ–¥–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä –ø–æ–∫–µ—Ä–∞)
    handleNetworkMove(move) {
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ move object, –∞ gameState update
        if (!move.action) {
            console.log(`PokerGame [${this.socket?.id}]: Received gameState update, gamePhase: ${move.gamePhase}`);
            this.playerRole = this.socket?.id === move.players?.[0] ? 'player1' : 'player2';
            const myHand = this.playerRole === 'player1' ? move.player1Hand : move.player2Hand;
            console.log(`PokerGame [${this.socket?.id}]: My role: ${this.playerRole}, my hand:`, myHand?.map(c => c.value + c.suit));
            this.gameState = move;
            this.render();
            return;
        }

        const { action, card, playerId } = move;
        const isCurrentPlayer = playerId === this.socket?.id;

        if (action === 'discard') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç
            if (isCurrentPlayer) {
                // –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –æ–±–º–µ–Ω—è–ª –∫–∞—Ä—Ç—É
                if (card) {
                    const index = this.gameState.player1Hand.findIndex(c =>
                        c.suit === card.suit && c.value === card.value
                    );
                    if (index !== -1) {
                        this.gameState.player1Hand.splice(index, 1);
                        if (this.gameState.deck.length > 0) {
                            this.gameState.player1Hand.push(this.gameState.deck.pop());
                        }
                    }
                }
            } else {
                // –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ–±–º–µ–Ω—è–ª –∫–∞—Ä—Ç—É
                if (card) {
                    const index = this.gameState.player2Hand.findIndex(c =>
                        c.suit === card.suit && c.value === card.value
                    );
                    if (index !== -1) {
                        this.gameState.player2Hand.splice(index, 1);
                        if (this.gameState.deck.length > 0) {
                            this.gameState.player2Hand.push(this.gameState.deck.pop());
                        }
                    }
                }
            }
            this.showNotification(`${isCurrentPlayer ? '–í—ã' : '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫'} –æ–±–º–µ–Ω—è–ª–∏ –∫–∞—Ä—Ç—É`, 'info');
            this.render();

        } else if (action === 'finish') {
            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞ - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä—É–∫
            this.gameState.gamePhase = 'waiting';
            this.render();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã, –∑–∞—Ç–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            setTimeout(() => {
                this.gameState.gamePhase = 'finished';
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                const hand1 = this.gameState.player1Hand;
                const hand2 = this.gameState.player2Hand;

                // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞: –∫—Ç–æ –∏–º–µ–µ—Ç —Å—Ç–∞—Ä—à—É—é –∫–∞—Ä—Ç—É
                const getHandValue = (hand) => {
                    return Math.max(...hand.map(card => ['2','3','4','5','6','7','8','9','10','J','Q','K','A'].indexOf(card.value)));
                };

                const value1 = getHandValue(hand1);
                const value2 = getHandValue(hand2);

                if (value1 > value2) {
                    this.gameState.winner = 'player1';
                } else if (value2 > value1) {
                    this.gameState.winner = 'player2';
                } else {
                    this.gameState.winner = 'draw';
                }

                this.showNotification('–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...', 'info');
                this.render();
            }, 2000);
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –¥–ª—è ES6 –º–æ–¥—É–ª–µ–π
export { PokerGame };

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.PokerGame = PokerGame;
