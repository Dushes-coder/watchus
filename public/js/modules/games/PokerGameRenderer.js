// ===== POKER GAME RENDERER =====
// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–∫–µ—Ä–∞

import { CardGame } from './CardGame.js';

export class PokerGameRenderer {
    static renderGame() {
        console.log('renderPokerGame called');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
        const activeGamePanel = document.getElementById('activeGamePanel');
        if (activeGamePanel) {
            activeGamePanel.classList.remove('hidden');
            activeGamePanel.style.display = 'block';
            document.getElementById('activeGameTitle').textContent = '–ü–æ–∫–µ—Ä';
            document.getElementById('activeGameIcon').textContent = 'üÉè';
        }

        const gamePanel = document.getElementById('activeGameContent');
        if (!gamePanel) return;

        let html = '<div class="poker-game">';

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–ø–µ—Ä–Ω–∏–∫–µ
        if (window.currentOpponent) {
            html += '<div class="game-opponent-info">';
            html += '<div class="opponent-avatar-small">' + window.currentOpponent.emoji + '</div>';
            html += '<div class="opponent-name-small">' + window.currentOpponent.name + '</div>';
            html += '<div class="opponent-type">' + (window.currentOpponent.type === 'bot' ? '–ë–æ—Ç' : '–ò–≥—Ä–æ–∫') + '</div>';
            html += '</div>';
        }

        html += '<h3>üÉè –ü–æ–∫–µ—Ä</h3>';
        html += '<div class="game-info">';
        html += '<div>–†–∞—É–Ω–¥: <strong>' + window.gameState.round + '</strong></div>';
        html += '<div>–í–∞—à —Å—á—ë—Ç: ' + window.gameState.playerScore + '</div>';
        html += '<div>–°—á—ë—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: ' + window.gameState.opponentScore + '</div>';
        html += '</div>';

        // –ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–≤–≤–µ—Ä—Ö—É)
        html += this.renderOpponentCards();

        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        html += this.renderPokerCenter();

        // –í–∞—à–∏ –∫–∞—Ä—Ç—ã (–≤–Ω–∏–∑—É)
        html += this.renderPlayerCards();

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        html += this.renderPokerControls();

        html += '</div>';
        gamePanel.innerHTML = html;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.addPokerCardHandlers();
    }

    static renderOpponentCards() {
        let html = '<div class="opponent-cards">';
        html += '<h4>–ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:</h4>';
        html += '<div class="cards-hand opponent-hand">';

        for (let i = 0; i < window.gameState.opponentHand.length; i++) {
            if (window.gameState.gamePhase === 'waiting' || window.gameState.gamePhase === 'finished') {
                const card = window.gameState.opponentHand[i];
                const suitClass = CardGame.getSuitClass(card.suit);
                html += '<div class="card ' + suitClass + ' revealed" data-index="' + i + '">';
                html += '<div class="card-value">' + card.value + '</div>';
                html += '<div class="card-suit">' + card.suit + '</div>';
                html += '</div>';
            } else {
                html += '<div class="card card-back">üÇ†</div>';
            }
        }
        html += '</div>';
        html += '</div>';
        return html;
    }

    static renderPokerCenter() {
        let html = '<div class="poker-center">';

        if (window.gameState.gamePhase === 'finished') {
            const winner = window.gameState.winner;
            html += '<div class="game-result">';
            if (winner === 'player') {
                html += '<div style="color: #28a745; font-size: 24px; font-weight: bold;">üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∏–≥—Ä—É!</div>';
            } else if (winner === 'opponent') {
                html += '<div style="color: #dc3545; font-size: 24px; font-weight: bold;">üòû –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª –∏–≥—Ä—É!</div>';
            } else {
                html += '<div style="color: #ffc107; font-size: 24px; font-weight: bold;">ü§ù –ù–∏—á—å—è –≤ –∏–≥—Ä–µ!</div>';
            }
            html += '<div style="margin-top: 10px;">–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ü–µ—Ä–≤—ã–π, –∫—Ç–æ –Ω–∞–±—Ä–∞–ª 10 –æ—á–∫–æ–≤, –ø–æ–±–µ–∂–¥–∞–µ—Ç!</div>';
            html += '</div>';
        } else if (window.gameState.gamePhase === 'waiting') {
            html += this.renderPokerTable();
            html += '<div class="poker-status">–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...</div>';
        } else if (window.gameState.gamePhase === 'exchange') {
            html += '<div class="poker-status">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—ã –¥–ª—è –æ–±–º–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é</div>';
        }

        html += '</div>';
        return html;
    }

    static renderPokerTable() {
        let html = '<div class="poker-table">';
        html += '<div class="table-title">–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π</div>';

        // –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ
        html += '<div class="table-player-cards">';
        html += '<div class="player-label">–í–∞—à–∏ –∫–∞—Ä—Ç—ã:</div>';
        html += '<div class="table-cards-row">';
        for (let i = 0; i < window.gameState.playerHand.length; i++) {
            const card = window.gameState.playerHand[i];
            const suitClass = CardGame.getSuitClass(card.suit);
            html += '<div class="card ' + suitClass + ' on-table" data-index="' + i + '">';
            html += '<div class="card-value">' + card.value + '</div>';
            html += '<div class="card-suit">' + card.suit + '</div>';
            html += '</div>';
        }
        html += '</div>';
        html += '</div>';

        // –ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ
        html += '<div class="table-opponent-cards">';
        html += '<div class="opponent-label">–ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:</div>';
        html += '<div class="table-cards-row">';
        for (let i = 0; i < window.gameState.opponentHand.length; i++) {
            const card = window.gameState.opponentHand[i];
            const suitClass = CardGame.getSuitClass(card.suit);
            html += '<div class="card ' + suitClass + ' on-table" data-index="' + i + '">';
            html += '<div class="card-value">' + card.value + '</div>';
            html += '<div class="card-suit">' + card.suit + '</div>';
            html += '</div>';
        }
        html += '</div>';
        html += '</div>';

        html += '</div>';
        return html;
    }

    static renderPlayerCards() {
        let html = '<div class="player-cards">';
        html += '<h4>–í–∞—à–∏ –∫–∞—Ä—Ç—ã:</h4>';
        html += '<div class="cards-hand player-hand">';

        for (let i = 0; i < window.gameState.playerHand.length; i++) {
            const card = window.gameState.playerHand[i];
            const suitClass = CardGame.getSuitClass(card.suit);
            const isSelected = card.selected ? ' selected' : '';
            html += '<div class="card ' + suitClass + isSelected + '" data-index="' + i + '">';
            html += '<div class="card-value">' + card.value + '</div>';
            html += '<div class="card-suit">' + card.suit + '</div>';
            html += '</div>';
        }
        html += '</div>';
        html += '</div>';
        return html;
    }

    static renderPokerControls() {
        let html = '<div class="poker-controls">';

        if (window.gameState.gamePhase === 'finished') {
            html += '<button onclick="startNewPokerGame()" class="action-btn">üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞</button>';
        } else if (window.gameState.gamePhase === 'exchange') {
            html += '<button onclick="exchangeCards()" class="action-btn">–û–±–º–µ–Ω—è—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ</button>';
            html += '<button onclick="checkPokerHand()" class="action-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é</button>';
            html += '<button onclick="newPokerRound()" class="action-btn">–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥</button>';
        } else if (window.gameState.gamePhase === 'waiting') {
            html += '<button disabled class="action-btn" style="opacity: 0.5;">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...</button>';
        }

        html += '<button onclick="backToMenu()" class="back-btn">–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é</button>';
        html += '</div>';
        return html;
    }

    static addPokerCardHandlers() {
        const cards = document.querySelectorAll('.player-cards .card');
        cards.forEach(card => {
            card.addEventListener('click', function () {
                cards.forEach(c => c.classList.remove('selected'));
                this.classList.toggle('selected');
            });
        });
    }

    static showResult() {
        if (!window.gameState.lastResult) return;

        const { combination, opponentCombination, result } = window.gameState.lastResult;
        const statusElement = document.querySelector('.poker-status');

        if (statusElement) {
            if (window.gameState.gamePhase === 'finished') {
                statusElement.innerHTML = `
                    <div style="margin-bottom: 10px;"><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞ ${window.gameState.round}:</strong></div>
                    <div>–í–∞—à–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: <span style="color: var(--accent-primary);">${combination.name}</span></div>
                    <div>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: <span style="color: var(--accent-primary);">${opponentCombination.name}</span></div>
                    <div style="margin-top: 20px; font-size: 32px; font-weight: bold; color: ${result.includes('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏') ? '#28a745' : result.includes('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª') ? '#dc3545' : '#ffc107'};">${result.includes('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏') ? '–ü–û–ë–ï–î–ê!' : result.includes('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª') ? '–ü–û–†–ê–ñ–ï–ù–ò–ï!' : '–ù–ò–ß–¨–Ø!'}</div>
                    <div style="margin-top: 10px; color: #666;">–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...</div>
                `;

                setTimeout(() => {
                    newPokerRound();
                }, 3000);
            } else {
                statusElement.innerHTML = `
                    <div style="margin-bottom: 10px;"><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞ ${window.gameState.round}:</strong></div>
                    <div>–í–∞—à–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: <span style="color: var(--accent-primary);">${combination.name}</span></div>
                    <div>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: <span style="color: var(--accent-primary);">${opponentCombination.name}</span></div>
                    <div style="margin-top: 20px; font-size: 32px; font-weight: bold; color: ${result.includes('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏') ? '#28a745' : result.includes('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª') ? '#dc3545' : '#ffc107'};">${result.includes('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏') ? '–ü–û–ë–ï–î–ê!' : result.includes('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª') ? '–ü–û–†–ê–ñ–ï–ù–ò–ï!' : '–ù–ò–ß–¨–Ø!'}</div>
                    <div style="margin-top: 10px; color: #666;">–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...</div>
                `;

                setTimeout(() => {
                    newPokerRound();
                }, 3000);
            }
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.PokerGameRenderer = PokerGameRenderer;
