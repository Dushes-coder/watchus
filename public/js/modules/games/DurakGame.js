// ===== DURAK GAME CLASS =====

import { BaseGame } from '../core/BaseGame.js';

// –ö–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã –≤ –¥—É—Ä–∞–∫
class DurakGame extends BaseGame {
    constructor() {
        super('durak');
        this.maxHandSize = 6;
        this.trumpSuit = null;
        this.currentAttacker = 'player';
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
    createDeck() {
        this.gameState.deck = [];
        const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
        const values = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
        suits.forEach(suit => {
            values.forEach(value => {
                this.gameState.deck.push({
                    suit,
                    value,
                    power: this.getCardPower(value)
                });
            });
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–ª—ã –∫–∞—Ä—Ç—ã
    getCardPower(value) {
        const powers = { '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14 };
        return powers[value] || 0;
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
    shuffleDeck() {
        for (let i = this.gameState.deck.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [this.gameState.deck[i], this.gameState.deck[j]] = [this.gameState.deck[j], this.gameState.deck[i]];
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ CSS-–∫–ª–∞—Å—Å–∞ –¥–ª—è –º–∞—Å—Ç–∏
    getSuitClass(suit) {
        const classes = { '‚ô•': 'hearts', '‚ô¶': 'diamonds', '‚ô£': 'clubs', '‚ô†': 'spades' };
        return classes[suit] || '';
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
    init() {
        try {
            console.log('DurakGame.init() called');
            if (!super.init()) {
                console.log('DurakGame.init(): super.init() failed');
                return false;
            }
            console.log('DurakGame.init(): super.init() success, container found:', !!this.container);

            if (this.isNetworkGame) {
                // –î–ª—è —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π gameState
                this.gameState = {
                    gameType: 'durak',
                    deck: [],
                    discardedCards: [], // –î–æ–±–∞–≤–ª—è–µ–º —Å–±—Ä–æ—Å –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –∏–≥—Ä—ã
                    player1Hand: [],
                    player2Hand: [],
                    attackingCards: [],
                    defendingCards: [],
                    trumpSuit: null,
                    currentAttacker: null, // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–º
                    gamePhase: 'waiting', // –ñ–¥–µ–º gameState —Å —Å–µ—Ä–≤–µ—Ä–∞
                    winner: null,
                    players: []
                };

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                this.showLoadingState();

                // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ socket –≤ –∫–æ–º–Ω–∞—Ç–µ
                console.log('DurakGame.init(): Ensuring socket is in room:', this.roomId);
                this.socket.emit('join-room', { roomId: this.roomId, userEmoji: 'üé¥' });

                // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º render() –∑–¥–µ—Å—å - –∂–¥–µ–º gameState —Å —Å–µ—Ä–≤–µ—Ä–∞
                return true;
            }

            // –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ (—Å –±–æ—Ç–æ–º)
            this.gameState = {
                gameMode: 'durak',
                deck: [],
                discardedCards: [], // –î–æ–±–∞–≤–ª—è–µ–º —Å–±—Ä–æ—Å
                playerHand: [],
                opponentHand: [],
                attackingCards: [],
                defendingCards: [],
                trumpSuit: null,
                currentAttacker: 'player',
                gamePhase: 'attack',
                winner: null,
                roundWinner: null
            };

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π gameState –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±–æ—Ç–æ–º
            window.gameState = this.gameState;

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mapping –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã
            this.setupPlayerMapping();

            // –î–ª—è —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (this.isNetworkGame) {
                // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ socket –≤ –∫–æ–º–Ω–∞—Ç–µ
                console.log('DurakGame.init(): Ensuring socket is in room:', this.roomId);
                this.socket.emit('join-room', { roomId: this.roomId, userEmoji: 'üé¥' });
                // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º render() –∑–¥–µ—Å—å - –∂–¥–µ–º gameState —Å —Å–µ—Ä–≤–µ—Ä–∞
                return true;
            }

            // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É, —Ä–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–∑—ã—Ä—è –∏ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            this.createDeck();
            this.shuffleDeck();
            this.setTrumpSuit();
            this.dealInitialCards();
            this.determineFirstPlayer();

            console.log('DurakGame.init(): calling render');
            this.render();
            console.log('DurakGame.init(): render completed');

            return true;
        } catch (error) {
            console.error('DurakGame.init(): Error during initialization:', error);
            return false;
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mapping –∏–≥—Ä–æ–∫–æ–≤
    setupPlayerMapping() {
        if (this.socket && this.roomId && this.currentOpponent?.type === 'player') {
            this.isNetworkGame = true;
            // –í —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä–µ player1 - –ø–æ–ª—É—á–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, player2 - –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
            // –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞
            this.gameState.players = [this.currentOpponent.id, this.socket.id]; // –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–º, –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤—Ç–æ—Ä—ã–º
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å InvitationManager)
    setupPlayerSymbols() {
        this.setupPlayerMapping();
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–∑—ã—Ä–Ω–æ–π –º–∞—Å—Ç–∏
    setTrumpSuit() {
        if (this.gameState.deck.length > 0) {
            this.gameState.trumpSuit = this.gameState.deck[this.gameState.deck.length - 1].suit;
        }
    }

    // –ù–∞—á–∞–ª—å–Ω–∞—è —Ä–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç
    dealInitialCards() {
        this.gameState.playerHand = [];
        this.gameState.opponentHand = [];

        for (let i = 0; i < this.maxHandSize; i++) {
            if (this.gameState.deck.length > 0) this.gameState.playerHand.push(this.gameState.deck.pop());
            if (this.gameState.deck.length > 0) this.gameState.opponentHand.push(this.gameState.deck.pop());
        }
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (—Å —Å–∞–º—ã–º –º–ª–∞–¥—à–∏–º –∫–æ–∑—ã—Ä–µ–º)
    determineFirstPlayer() {
        const trumpSuit = this.gameState.trumpSuit;

        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–∑—ã—Ä–∏ —É –∏–≥—Ä–æ–∫–∞
        const playerTrumps = this.gameState.playerHand.filter(card => card.suit === trumpSuit);
        const opponentTrumps = this.gameState.opponentHand.filter(card => card.suit === trumpSuit);

        let playerLowestTrump = null;
        let opponentLowestTrump = null;

        if (playerTrumps.length > 0) {
            playerLowestTrump = playerTrumps.reduce((lowest, card) =>
                card.power < lowest.power ? card : lowest
            );
        }

        if (opponentTrumps.length > 0) {
            opponentLowestTrump = opponentTrumps.reduce((lowest, card) =>
                card.power < lowest.power ? card : lowest
            );
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
        if (playerLowestTrump && opponentLowestTrump) {
            if (playerLowestTrump.power < opponentLowestTrump.power) {
                this.gameState.currentAttacker = 'player';
            } else {
                this.gameState.currentAttacker = 'opponent';
                // –ï—Å–ª–∏ –±–æ—Ç —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º, –¥–µ–ª–∞–µ–º –µ–≥–æ —Ö–æ–¥
                if (this.currentOpponent?.type === 'bot') {
                    setTimeout(() => this.makeBotAttack(), 1000);
                }
            }
        } else if (playerLowestTrump) {
            this.gameState.currentAttacker = 'player';
        } else if (opponentLowestTrump) {
            this.gameState.currentAttacker = 'opponent';
            if (this.currentOpponent?.type === 'bot') {
                setTimeout(() => this.makeBotAttack(), 1000);
            }
        } else {
            // –ù–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –∫–æ–∑—ã—Ä–µ–π - –∏–≥—Ä–æ–∫ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
            this.gameState.currentAttacker = 'player';
        }
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–≥—Ä—ã
    render() {
        if (!this.gameState) {
            console.log('DurakGame.render(): gameState not loaded yet, showing loading state');
            this.showLoadingState();
            return;
        }

        // –î–ª—è —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (this.isNetworkGame && (!this.playerRole || this.gameState.gamePhase === 'waiting')) {
            console.log('DurakGame.render(): Waiting for complete gameState from server, playerRole:', this.playerRole, 'gamePhase:', this.gameState.gamePhase);
            this.showLoadingState();
            return;
        }

        let html = this.renderOpponentInfo();
        html += '<div class="durak-game">';
        html += '<h3>üé¥ –î—É—Ä–∞–∫</h3>';
        html += '<div class="game-info">';
        html += '<div>–ö–æ–∑—ã—Ä—å: <span class="trump-suit ' + (this.gameState.trumpSuit ? this.getSuitClass(this.gameState.trumpSuit) : '') + '">' + (this.gameState.trumpSuit || '?') + '</span></div>';
        html += '<div>–ö–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ: ' + ((this.gameState.deck && Array.isArray(this.gameState.deck)) ? this.gameState.deck.length : 0) + '</div>';
        html += '<div>–ö–∞—Ä—Ç –≤ —Å–±—Ä–æ—Å–µ: ' + ((this.gameState.discardedCards && Array.isArray(this.gameState.discardedCards)) ? this.gameState.discardedCards.length : 0) + '</div>';
        const phaseName = this.gameState.gamePhase === 'attack' ? '–ê—Ç–∞–∫–∞' : '–ó–∞—â–∏—Ç–∞';
        const currentPlayerRole = this.getCurrentPlayerRole();
        console.log(`DurakGame.render() [${this.socket?.id}]: gamePhase=${this.gameState.gamePhase}, currentAttacker=${this.gameState.currentAttacker}, myRole=${currentPlayerRole}, playerRole=${this.playerRole}, isNetwork=${this.isNetworkGame}`);
        const attackerName = this.gameState.currentAttacker === currentPlayerRole ? '–í—ã' : '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫';
        html += '<div>–§–∞–∑–∞: ' + phaseName + ' (' + attackerName + ')</div>';
        html += '</div>';

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ä—É–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        let playerCards = [];
        let opponentCards = [];
        let playerCardCount = 0;
        let opponentCardCount = 0;

        if (this.isNetworkGame && this.playerRole) {
            // –í —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—É–∫–∏ –ø–æ —Ä–æ–ª—è–º
            playerCards = this.playerRole === 'player1' ? (this.gameState.player1Hand || []) : (this.gameState.player2Hand || []);
            opponentCards = this.playerRole === 'player1' ? (this.gameState.player2Hand || []) : (this.gameState.player1Hand || []);
            playerCardCount = playerCards.length;
            opponentCardCount = opponentCards.length;
        } else {
            // –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º
            playerCards = this.gameState.playerHand || [];
            opponentCards = this.gameState.opponentHand || [];
            playerCardCount = playerCards.length;
            opponentCardCount = opponentCards.length;
        }

        // –ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        html += '<div class="opponent-cards">';
        html += '<h4>–ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (' + opponentCardCount + '):</h4>';
        html += '<div class="cards-hand opponent-hand">';
        for (let i = 0; i < opponentCardCount; i++) {
            html += '<div class="card card-back">üÇ†</div>';
        }
        html += '</div></div>';

        // –°—Ç–æ–ª —Å –∫–∞—Ä—Ç–∞–º–∏
        html += '<div class="durak-table">';
        html += '<h4>–°—Ç–æ–ª:</h4>';
        html += '<div class="table-cards">';
        for (let i = 0; i < (this.gameState.attackingCards || []).length; i++) {
            const attackCard = this.gameState.attackingCards[i];
            const defendCard = this.gameState.defendingCards[i];

            html += '<div class="card-pair">';
            html += '<div class="card ' + this.getSuitClass(attackCard.suit) + ' attacking">';
            html += '<div class="card-value">' + attackCard.value + '</div>';
            html += '<div class="card-suit">' + attackCard.suit + '</div>';
            html += '</div>';

            if (defendCard) {
                html += '<div class="card ' + this.getSuitClass(defendCard.suit) + ' defending">';
                html += '<div class="card-value">' + defendCard.value + '</div>';
                html += '<div class="card-suit">' + defendCard.suit + '</div>';
                html += '</div>';
            }
            html += '</div>';
        }
        html += '</div></div>';

        // –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
        html += '<div class="player-cards">';
        html += '<h4>–í–∞—à–∏ –∫–∞—Ä—Ç—ã:</h4>';
        html += '<div class="cards-hand player-hand">';
        playerCards.forEach((card, i) => {
            if (card && card.suit && card.value) {
                const suitClass = this.getSuitClass(card.suit);
                const canPlay = this.canPlayCard(card, i);
                const playableClass = canPlay ? ' playable' : '';
                html += '<div class="card ' + suitClass + playableClass + '" data-index="' + i + '" onclick="window.gameManager.getCurrentGame().handleCardClick(' + i + ')">';
                html += '<div class="card-value">' + card.value + '</div>';
                html += '<div class="card-suit">' + card.suit + '</div>';
                html += '</div>';
            }
        });
        html += '</div></div>';

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        html += '<div class="durak-controls">';

        // –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã –∏–≥—Ä—ã
        const myRole = this.getCurrentPlayerRole();
        console.log(`DurakGame.render() [${this.socket?.id}]: Showing controls for myRole=${myRole}, currentAttacker=${this.gameState.currentAttacker}, gamePhase=${this.gameState.gamePhase}`);
        if (this.gameState.gamePhase === 'defend' && this.gameState.currentAttacker !== myRole) {
            // –ò–≥—Ä–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è
            console.log(`DurakGame.render() [${this.socket?.id}]: Showing defense buttons for defender`);
            html += '<button onclick="window.gameManager.getCurrentGame().takeCards()" class="action-btn">–í–∑—è—Ç—å –∫–∞—Ä—Ç—ã</button>';
            // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–∞—Å (–≤–∑—è—Ç—å)" - –ø–∞—Å –≤ –∑–∞—â–∏—Ç–µ –æ–∑–Ω–∞—á–∞–µ—Ç –≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã
        }

        if (this.gameState.gamePhase === 'attack' && this.gameState.currentAttacker === myRole) {
            // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
            console.log(`DurakGame.render() [${this.socket?.id}]: Showing attack buttons for attacker`);
            if ((this.gameState.attackingCards || []).length > 0) {
                html += '<button onclick="window.gameManager.getCurrentGame().passTurn()" class="action-btn">–ü–∞—Å (–∑–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ç–∞–∫—É)</button>';
            }
        }

        if (this.gameState.gamePhase === 'defend' && this.gameState.currentAttacker === myRole) {
            // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫–æ–≤–∞–ª, –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å
            console.log(`DurakGame.render() [${this.socket?.id}]: Showing throw buttons for attacker in defend phase`);
            const allDefended = (this.gameState.attackingCards || []).every((_, i) => (this.gameState.defendingCards || [])[i]);
            if (allDefended && (this.gameState.attackingCards || []).length > 0) {
                html += '<button onclick="window.gameManager.getCurrentGame().passTurn()" class="action-btn">–ü–∞—Å (–æ—Ç–±–æ–π)</button>';
            }
        }

        if (this.gameState.gamePhase === 'attack' && this.gameState.currentAttacker !== myRole) {
            // –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∞—Ç–∞–∫–æ–≤–∞–ª, –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å –µ—Å–ª–∏ –≤—Å–µ –æ—Ç–±–∏—Ç—ã
            console.log(`DurakGame.render() [${this.socket?.id}]: Showing throw buttons for defender in attack phase`);
            const allDefended = (this.gameState.attackingCards || []).every((_, i) => (this.gameState.defendingCards || [])[i]);
            if (allDefended && (this.gameState.attackingCards || []).length > 0) {
                html += '<button onclick="window.gameManager.getCurrentGame().passTurn()" class="action-btn">–ü–∞—Å (–æ—Ç–±–æ–π)</button>';
            }
        }

        html += '<button onclick="window.gameManager.getCurrentGame().newRound()" class="action-btn">–ù–æ–≤–∞—è –∏–≥—Ä–∞</button>';
        html += '<button onclick="window.gameManager.closeCurrentGame()" class="back-btn">–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é</button>';
        html += '</div>';

        html += '</div>';

        console.log('DurakGame.render(): setting innerHTML, html length:', html.length);
        this.container.innerHTML = html;
        this.container.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        console.log('DurakGame.render(): container displayed');
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingState() {
        if (this.container) {
            this.container.innerHTML = `
                <div class="game-loading">
                    <h3>üé¥ –î—É—Ä–∞–∫</h3>
                    <div class="loading-spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...</p>
                    <p>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...</p>
                </div>
            `;
            this.container.style.display = 'block';
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    getCurrentPlayerRole() {
        if (this.isNetworkGame && this.playerRole) {
            return this.playerRole;
        }
        return 'player';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ —Å—ã–≥—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ–π
    canPlayCard(card, index) {
        if (!this.gameState) return false;

        const playerRole = this.getCurrentPlayerRole();
        const playerCards = this.isNetworkGame && this.playerRole ?
            (this.playerRole === 'player1' ? this.gameState.player1Hand : this.gameState.player2Hand) :
            this.gameState.playerHand;

        if (this.gameState.gamePhase === 'attack' && this.gameState.currentAttacker === playerRole) {
            // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
            if ((this.gameState.attackingCards || []).length === 0) {
                return true; // –ü–µ—Ä–≤–∞—è –∞—Ç–∞–∫–∞ - –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π
            } else {
                return this.canAttackOrThrowCard(card);
            }
        } else if (this.gameState.gamePhase === 'defend' && this.gameState.currentAttacker !== playerRole) {
            // –ò–≥—Ä–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è
            const undefendedCards = (this.gameState.attackingCards || []).filter((_, i) => !(this.gameState.defendingCards || [])[i]);
            return undefendedCards.some(attackCard => this.canDefendCard(card, attackCard));
        } else if (this.gameState.gamePhase === 'defend' && this.gameState.currentAttacker === playerRole) {
            // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫–æ–≤–∞–ª, –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å
            const allDefended = (this.gameState.attackingCards || []).every((_, i) => (this.gameState.defendingCards || [])[i]);
            if (allDefended) {
                return this.canAttackOrThrowCard(card);
            }
        } else if (this.gameState.gamePhase === 'attack' && this.gameState.currentAttacker !== playerRole) {
            // –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∞—Ç–∞–∫–æ–≤–∞–ª, –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å –µ—Å–ª–∏ –≤—Å–µ –æ—Ç–±–∏—Ç—ã
            const allDefended = (this.gameState.attackingCards || []).every((_, i) => (this.gameState.defendingCards || [])[i]);
            if (allDefended) {
                return this.canAttackOrThrowCard(card);
            }
        }

        return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –∞—Ç–∞–∫–∏/–ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—è
    canAttackOrThrowCard(card) {
        if (this.gameState.attackingCards.length === 0) return true;

        const tableValues = [...this.gameState.attackingCards, ...this.gameState.defendingCards]
            .map(c => c.value);
        return tableValues.includes(card.value);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –∑–∞—â–∏—Ç–∏—Ç—å—Å—è –∫–∞—Ä—Ç–æ–π
    canDefendCard(defendCard, attackCard) {
        // –ú–æ–∂–Ω–æ –±–∏—Ç—å –∫–∞—Ä—Ç–æ–π —Ç–æ–π –∂–µ –º–∞—Å—Ç–∏, –Ω–æ –±–æ–ª—å—à–µ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞
        if (defendCard.suit === attackCard.suit && defendCard.power > attackCard.power) {
            return true;
        }

        // –ú–æ–∂–Ω–æ –±–∏—Ç—å –∫–æ–∑—ã—Ä–µ–º, –µ—Å–ª–∏ –∞—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –∫–æ–∑—ã—Ä—å
        if (defendCard.suit === this.gameState.trumpSuit && attackCard.suit !== this.gameState.trumpSuit) {
            return true;
        }

        // –ö–æ–∑—ã—Ä—å –º–æ–∂–Ω–æ –±–∏—Ç—å —Ç–æ–ª—å–∫–æ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—à–∏–º –∫–æ–∑—ã—Ä–µ–º
        if (defendCard.suit === this.gameState.trumpSuit &&
            attackCard.suit === this.gameState.trumpSuit &&
            defendCard.power > attackCard.power) {
            return true;
        }

        return false;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
    handleCardClick(index) {
        if (!this.gameState) return;

        const playerRole = this.getCurrentPlayerRole();
        const playerCards = this.isNetworkGame && this.playerRole ?
            (this.playerRole === 'player1' ? this.gameState.player1Hand : this.gameState.player2Hand) :
            this.gameState.playerHand;

        const card = playerCards ? playerCards[index] : null;
        if (!card) return;

        if (this.gameState.gamePhase === 'attack' && this.gameState.currentAttacker === playerRole) {
            this.playerAttack(card, index);
        } else if (this.gameState.gamePhase === 'defend' && this.gameState.currentAttacker !== playerRole) {
            this.playerDefend(card, index);
        } else if (this.gameState.gamePhase === 'defend' && this.gameState.currentAttacker === playerRole) {
            this.playerThrow(card, index);
        } else if (this.gameState.gamePhase === 'attack' && this.gameState.currentAttacker !== playerRole) {
            this.playerThrow(card, index);
        }
    }

    // –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
    playerAttack(card, index) {
        if (this.gameState.attackingCards.length === 0) {
            // –ü–µ—Ä–≤–∞—è –∞—Ç–∞–∫–∞
            this.makeAttack(card, index);
        } else if (this.canAttackOrThrowCard(card)) {
            // –ü–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏–µ
            this.makeThrow(card, index);
        } else {
            this.showNotification('–ù–µ–ª—å–∑—è –ø–æ–¥–∫–∏–Ω—É—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É!', 'warning');
        }
    }

    // –ó–∞—â–∏—Ç–∞ –∏–≥—Ä–æ–∫–∞
    playerDefend(card, index) {
        const undefendedCards = this.gameState.attackingCards.filter((_, i) => !this.gameState.defendingCards[i]);

        if (undefendedCards.length === 0) {
            this.showNotification('–í—Å–µ –∫–∞—Ä—Ç—ã —É–∂–µ –æ—Ç–±–∏—Ç—ã!', 'warning');
            return;
        }

        const attackCard = undefendedCards[0];
        if (this.canDefendCard(card, attackCard)) {
            this.makeDefense(card, index);
        } else {
            this.showNotification('–≠—Ç–æ–π –∫–∞—Ä—Ç–æ–π –Ω–µ–ª—å–∑—è –æ—Ç–±–∏—Ç—å—Å—è!', 'warning');
        }
    }

    // –ü–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    playerThrow(card, index) {
        const allDefended = this.gameState.attackingCards.every((_, i) => this.gameState.defendingCards[i]);

        if (!allDefended) {
            this.showNotification('–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ç–±–∏—Ç—å –≤—Å–µ –∞—Ç–∞–∫—É—é—â–∏–µ –∫–∞—Ä—Ç—ã!', 'warning');
            return;
        }

        if (this.canAttackOrThrowCard(card)) {
            this.makeThrow(card, index);
        } else {
            this.showNotification('–ù–µ–ª—å–∑—è –ø–æ–¥–∫–∏–Ω—É—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É!', 'warning');
        }
    }

    // –°–æ–≤–µ—Ä—à–µ–Ω–∏–µ –∞—Ç–∞–∫–∏
    makeAttack(card, index) {
        if (this.isNetworkGame) {
            this.sendMove({
                action: 'play',
                card: card,
                playerId: this.socket.id,
                cardIndex: index
            });
        }

        this.gameState.attackingCards.push(card);
        if (this.isNetworkGame && this.playerRole) {
            const playerHand = this.playerRole === 'player1' ? this.gameState.player1Hand : this.gameState.player2Hand;
            playerHand.splice(index, 1);
        } else {
            this.gameState.playerHand.splice(index, 1);
        }
        this.gameState.gamePhase = 'defend';

        this.showNotification(`–í—ã —Å—ã–≥—Ä–∞–ª–∏ ${card.value}${card.suit}`, 'info');
        this.render();

        // –ë–æ—Ç –∑–∞—â–∏—â–∞–µ—Ç—Å—è
        if (this.currentOpponent?.type === 'bot') {
            setTimeout(() => this.makeBotDefense(), 1000);
        }
    }

    // –°–æ–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã
    makeDefense(card, index) {
        if (this.isNetworkGame) {
            this.sendMove({
                action: 'defend',
                card: card,
                playerId: this.socket.id,
                cardIndex: index
            });
        }

        const undefendedIndex = this.gameState.attackingCards.findIndex((_, i) => !this.gameState.defendingCards[i]);
        this.gameState.defendingCards[undefendedIndex] = card;
        if (this.isNetworkGame && this.playerRole) {
            const playerHand = this.playerRole === 'player1' ? this.gameState.player1Hand : this.gameState.player2Hand;
            playerHand.splice(index, 1);
        } else {
            this.gameState.playerHand.splice(index, 1);
        }

        this.showNotification(`–í—ã –æ—Ç–±–∏–ª–∏—Å—å ${card.value}${card.suit}`, 'success');
        this.render();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã
        const allDefended = this.gameState.attackingCards.every((_, i) => this.gameState.defendingCards[i]);

        if (allDefended) {
            // –ë–æ—Ç –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å
            if (this.currentOpponent?.type === 'bot') {
                setTimeout(() => this.makeBotThrow(), 1000);
            }
        } else {
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞—â–∏—Ç—É
            if (this.currentOpponent?.type === 'bot') {
                setTimeout(() => this.makeBotDefense(), 1000);
            }
        }
    }

    // –°–æ–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—è
    makeThrow(card, index) {
        if (this.isNetworkGame) {
            this.sendMove({
                action: 'play',
                card: card,
                playerId: this.socket.id,
                cardIndex: index
            });
        }

        this.gameState.attackingCards.push(card);
        if (this.isNetworkGame && this.playerRole) {
            const playerHand = this.playerRole === 'player1' ? this.gameState.player1Hand : this.gameState.player2Hand;
            playerHand.splice(index, 1);
        } else {
            this.gameState.playerHand.splice(index, 1);
        }
        this.gameState.gamePhase = 'defend';

        this.showNotification(`–í—ã –ø–æ–¥–∫–∏–Ω—É–ª–∏ ${card.value}${card.suit}`, 'info');
        this.render();

        // –ë–æ—Ç –∑–∞—â–∏—â–∞–µ—Ç—Å—è –æ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç–æ–π –∫–∞—Ä—Ç—ã
        if (this.currentOpponent?.type === 'bot') {
            setTimeout(() => this.makeBotDefense(), 1000);
        }
    }

    // –ò–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã
    takeCards() {
        if (this.isNetworkGame) {
            this.sendMove({
                action: 'take',
                playerId: this.socket.id
            });
        }

        // –ò–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞
        if (this.isNetworkGame && this.playerRole) {
            const playerHand = this.playerRole === 'player1' ? this.gameState.player1Hand : this.gameState.player2Hand;
            playerHand.push(...this.gameState.attackingCards);
            playerHand.push(...this.gameState.defendingCards);
            // –ê—Ç–∞–∫—É—é—â–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ
        } else {
            this.gameState.playerHand.push(...this.gameState.attackingCards);
            this.gameState.playerHand.push(...this.gameState.defendingCards);
            // –ê—Ç–∞–∫—É—é—â–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ
        }
        this.gameState.attackingCards = [];
        this.gameState.defendingCards = [];
        this.gameState.gamePhase = 'attack';

        this.refillHands();
        this.showNotification('–í—ã –≤–∑—è–ª–∏ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞', 'warning');
        this.render();

        // –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç
        if (this.currentOpponent?.type === 'bot') {
            setTimeout(() => this.makeBotAttack(), 1000);
        }
    }

    // –ü–∞—Å (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞)
    passTurn() {
        if (this.isNetworkGame) {
            this.sendMove({
                action: 'pass',
                playerId: this.socket.id
            });
        }

        this.finishRound();
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
    finishRound() {
        console.log('finishRound() called, currentAttacker before:', this.gameState.currentAttacker);
        // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞ –≤ —Å–±—Ä–æ—Å
        if (this.gameState.discardedCards) {
            this.gameState.discardedCards.push(...this.gameState.attackingCards);
            this.gameState.discardedCards.push(...this.gameState.defendingCards);
            console.log('Cards moved to discard pile, total discarded:', this.gameState.discardedCards.length);
        }
        this.gameState.attackingCards = [];
        this.gameState.defendingCards = [];

        // –ú–µ–Ω—è–µ–º –∞—Ç–∞–∫—É—é—â–µ–≥–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∏–≥—Ä—ã)
        if (!this.isNetworkGame) {
            this.gameState.currentAttacker = this.gameState.currentAttacker === 'player' ? 'opponent' : 'player';
            console.log('finishRound() - new attacker:', this.gameState.currentAttacker);
        }
        // –î–ª—è —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã currentAttacker –º–µ–Ω—è–µ—Ç —Å–µ—Ä–≤–µ—Ä
        
        this.gameState.gamePhase = 'attack';

        this.refillHands();
        this.showNotification('–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω (–æ—Ç–±–æ–π)', 'info');
        this.render();

        // –ï—Å–ª–∏ —Ç–µ–ø–µ—Ä—å –∞—Ç–∞–∫—É–µ—Ç –±–æ—Ç, –¥–µ–ª–∞–µ–º –µ–≥–æ —Ö–æ–¥
        if (this.gameState.currentAttacker === 'opponent' && this.currentOpponent?.type === 'bot') {
            console.log('Bot should attack now');
            setTimeout(() => this.makeBotAttack(), 1000);
        }
    }

    // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä—É–∫
    refillHands() {
        console.log('refillHands() called, deck length:', this.gameState.deck.length, 'discarded length:', this.gameState.discardedCards?.length);
        
        // –ï—Å–ª–∏ –∫–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞, –ø–µ—Ä–µ–º–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º
        if (this.gameState.deck.length === 0 && this.gameState.discardedCards && this.gameState.discardedCards.length > 0) {
            console.log('Deck empty, reshuffling discarded cards, discarded count:', this.gameState.discardedCards.length);
            this.gameState.deck = [...this.gameState.discardedCards];
            this.gameState.discardedCards = [];
            
            // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
            for (let i = this.gameState.deck.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [this.gameState.deck[i], this.gameState.deck[j]] = [this.gameState.deck[j], this.gameState.deck[i]];
            }
            
            console.log('Deck reshuffled, new deck length:', this.gameState.deck.length);
        } else if (this.gameState.deck.length === 0) {
            console.log('Deck empty but no discarded cards to reshuffle');
        }
        
        // –ü–æ–ø–æ–ª–Ω—è–µ–º —Ä—É–∫–∏ –¥–æ 6 –∫–∞—Ä—Ç
        if (this.isNetworkGame && this.playerRole) {
            const playerHand = this.playerRole === 'player1' ? this.gameState.player1Hand : this.gameState.player2Hand;
            const opponentHand = this.playerRole === 'player1' ? this.gameState.player2Hand : this.gameState.player1Hand;
            while (playerHand.length < this.maxHandSize && this.gameState.deck.length > 0) {
                playerHand.push(this.gameState.deck.pop());
            }
            while (opponentHand.length < this.maxHandSize && this.gameState.deck.length > 0) {
                opponentHand.push(this.gameState.deck.pop());
            }
        } else {
            console.log('refillHands() - player hand before:', this.gameState.playerHand.length, 'opponent hand before:', this.gameState.opponentHand.length);
            while (this.gameState.playerHand.length < this.maxHandSize && this.gameState.deck.length > 0) {
                this.gameState.playerHand.push(this.gameState.deck.pop());
            }
            while (this.gameState.opponentHand.length < this.maxHandSize && this.gameState.deck.length > 0) {
                this.gameState.opponentHand.push(this.gameState.deck.pop());
            }
            console.log('refillHands() - player hand after:', this.gameState.playerHand.length, 'opponent hand after:', this.gameState.opponentHand.length, 'final deck length:', this.gameState.deck.length);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
        this.checkGameEnd();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    checkGameEnd() {
        let playerHasCards = false;
        let opponentHasCards = false;

        if (this.isNetworkGame && this.playerRole) {
            const playerHand = this.playerRole === 'player1' ? this.gameState.player1Hand : this.gameState.player2Hand;
            const opponentHand = this.playerRole === 'player1' ? this.gameState.player2Hand : this.gameState.player1Hand;
            playerHasCards = playerHand.length > 0;
            opponentHasCards = opponentHand.length > 0;
        } else {
            playerHasCards = this.gameState.playerHand.length > 0;
            opponentHasCards = this.gameState.opponentHand.length > 0;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã: –µ—Å–ª–∏ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∫–∞—Ä—Ç –∏ –∫–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞
        if (this.isNetworkGame) {
            if (this.playerRole === 'player1' && !playerHasCards && opponentHasCards && this.gameState.deck.length === 0) {
                this.gameState.winner = 'player1';
                this.showGameResult(true); // –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏
            } else if (this.playerRole === 'player2' && !playerHasCards && opponentHasCards && this.gameState.deck.length === 0) {
                this.gameState.winner = 'player2';
                this.showGameResult(true); // –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏
            } else if (this.playerRole === 'player1' && playerHasCards && !opponentHasCards && this.gameState.deck.length === 0) {
                this.gameState.winner = 'player2';
                this.showGameResult(false); // –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏
            } else if (this.playerRole === 'player2' && playerHasCards && !opponentHasCards && this.gameState.deck.length === 0) {
                this.gameState.winner = 'player1';
                this.showGameResult(false); // –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏
            }
        } else {
            // –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º
            if (!playerHasCards && opponentHasCards && this.gameState.deck.length === 0) {
                this.gameState.winner = 'player';
                this.showGameResult(true); // –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏
            } else if (playerHasCards && !opponentHasCards && this.gameState.deck.length === 0) {
                this.gameState.winner = 'opponent';
                this.showGameResult(false); // –ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª
            }
        }
    }

    // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞
    showGameResult(isWinner) {
        const message = isWinner ? 'üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ' : 'üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üò¢';
        const color = isWinner ? 'success' : 'error';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        if (this.container) {
            const resultDiv = document.createElement('div');
            resultDiv.className = 'game-result';
            resultDiv.innerHTML = `
                <div class="result-message ${color}">
                    <h2>${message}</h2>
                    <p>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞</p>
                    <button onclick="window.selectDurak()" class="action-btn">–ù–æ–≤–∞—è –∏–≥—Ä–∞</button>
                </div>
            `;
            this.container.appendChild(resultDiv);
        }

        this.showNotification(message, color);
    }

    // –ê—Ç–∞–∫–∞ –±–æ—Ç–∞
    makeBotAttack() {
        if (this.gameState.currentAttacker !== 'opponent' || this.currentOpponent?.type !== 'bot') return;

        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –±–æ—Ç –∞—Ç–∞–∫—É–µ—Ç —Å–∞–º–æ–π —Å–ª–∞–±–æ–π –∫–∞—Ä—Ç–æ–π
        if (this.gameState.opponentHand.length > 0) {
            const weakestCard = this.gameState.opponentHand.reduce((weakest, card) =>
                card.power < weakest.power ? card : weakest
            );

            this.gameState.attackingCards.push(weakestCard);
            this.gameState.opponentHand.splice(this.gameState.opponentHand.indexOf(weakestCard), 1);
            this.gameState.gamePhase = 'defend';

            this.showNotification(`–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∞—Ç–∞–∫–æ–≤–∞–ª ${weakestCard.value}${weakestCard.suit}`, 'info');
            this.render();

            // –î–∞–µ–º –∏–≥—Ä–æ–∫—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞—â–∏—Ç—É
            setTimeout(() => {
                // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –æ—Ç–±–∏–ª, –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ
            }, 1000);
        }
    }

    // –ó–∞—â–∏—Ç–∞ –±–æ—Ç–∞
    makeBotDefense() {
        if (this.currentOpponent?.type !== 'bot') return;

        const undefendedCards = this.gameState.attackingCards.filter((_, i) => !this.gameState.defendingCards[i]);

        if (undefendedCards.length === 0) {
            // –í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã, –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å
            setTimeout(() => this.makeBotThrow(), 1000);
            return;
        }

        const attackCard = undefendedCards[0];
        
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞—â–∏—Ç—ã: –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ä—Ç—É –¥–ª—è –∑–∞—â–∏—Ç—ã
        const defenseCard = this.gameState.opponentHand.find(card => this.canDefendCard(card, attackCard));

        if (defenseCard) {
            const undefendedIndex = this.gameState.attackingCards.findIndex((_, i) => !this.gameState.defendingCards[i]);
            this.gameState.defendingCards[undefendedIndex] = defenseCard;
            this.gameState.opponentHand.splice(this.gameState.opponentHand.indexOf(defenseCard), 1);

            this.showNotification(`–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Ç–±–∏–ª—Å—è ${defenseCard.value}${defenseCard.suit}`, 'info');
            this.render();

            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞—â–∏—Ç—É –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—é
            const allDefended = this.gameState.attackingCards.every((_, i) => this.gameState.defendingCards[i]);
            if (allDefended) {
                setTimeout(() => this.makeBotThrow(), 1000);
            } else {
                setTimeout(() => this.makeBotDefense(), 1000);
            }
        } else {
            // –ë–æ—Ç –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã
            this.botTakeCards();
        }
    }

    // –ü–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    makeBotThrow() {
        if (this.gameState.currentAttacker === 'player' || this.currentOpponent?.type !== 'bot') return;

        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—è: –ø–æ–¥–∫–∏–¥—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É —Ç–æ–≥–æ –∂–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞
        const tableValues = [...this.gameState.attackingCards, ...this.gameState.defendingCards]
            .map(c => c.value);
        
        const throwableCards = this.gameState.opponentHand.filter(card => tableValues.includes(card.value));

        if (throwableCards.length > 0) {
            // –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—è
            const cardToThrow = throwableCards[Math.floor(Math.random() * throwableCards.length)];

            this.gameState.attackingCards.push(cardToThrow);
            this.gameState.opponentHand.splice(this.gameState.opponentHand.indexOf(cardToThrow), 1);
            this.gameState.gamePhase = 'defend';

            this.showNotification(`–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ–¥–∫–∏–Ω—É–ª ${cardToThrow.value}${cardToThrow.suit}`, 'info');
            this.render();
            return;
        }

        // –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–∏–¥—ã–≤–∞–µ—Ç - –æ—Ç–±–æ–π
        console.log('Bot passes - finishing round');
        this.showNotification('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞—É–Ω–¥ (–æ—Ç–±–æ–π)', 'info');
        this.finishRound();
    }

    // –ë–æ—Ç –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã
    botTakeCards() {
        this.gameState.opponentHand.push(...this.gameState.attackingCards);
        this.gameState.opponentHand.push(...this.gameState.defendingCards);
        this.gameState.attackingCards = [];
        this.gameState.defendingCards = [];
        this.gameState.gamePhase = 'attack';
        // –ê—Ç–∞–∫—É—é—â–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ (opponent)

        this.refillHands();
        this.showNotification('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–∑—è–ª –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞', 'warning');
        this.render();
    }

    // –ù–æ–≤–∞—è –∏–≥—Ä–∞
    newRound() {
        console.log('DurakGame.newRound() called');
        if (this.isNetworkGame) {
            this.showNotification('–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–µ—Ç–µ–≤–æ–º —Ä–µ–∂–∏–º–µ', 'warning');
            return;
        }
        // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∏–≥—Ä—ã —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.gameState = {
            gameMode: 'durak',
            deck: [],
            discardedCards: [],
            playerHand: [],
            opponentHand: [],
            attackingCards: [],
            defendingCards: [],
            trumpSuit: null,
            currentAttacker: 'player',
            gamePhase: 'attack',
            winner: null,
            roundWinner: null
        };
        this.createDeck();
        this.shuffleDeck();
        this.setTrumpSuit();
        this.dealInitialCards();
        this.determineFirstPlayer();
        this.render();
        this.showNotification('–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!', 'info');
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Ö–æ–¥–æ–≤
    handleNetworkMove(move) {
        // –ï—Å–ª–∏ —ç—Ç–æ gameState update
        if (!move.action) {
            console.log(`DurakGame [${this.socket?.id}]: Received gameState update, gamePhase: ${move.gamePhase}`);
            this.playerRole = this.socket?.id === move.players?.[0] ? 'player1' : 'player2';
            // –ï—Å–ª–∏ playerRole –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (socket.id –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω), –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ currentOpponent
            if (!this.playerRole) {
                if (this.currentOpponent?.id === move.players?.[0]) {
                    this.playerRole = 'player2'; // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫
                } else {
                    this.playerRole = 'player1'; // –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                }
            }
            console.log(`DurakGame [${this.socket?.id || 'unknown'}]: My role: ${this.playerRole}`);
            console.log(`DurakGame [${this.socket?.id}]: Deck length: ${move.deck?.length}`);
            console.log(`DurakGame [${this.socket?.id}]: Attacking cards:`, move.attackingCards?.map(c => c.value + c.suit));
            console.log(`DurakGame [${this.socket?.id}]: Defending cards:`, move.defendingCards?.map(c => c.value + c.suit));
            if (this.playerRole === 'player1') {
                console.log(`DurakGame [${this.socket?.id}]: My hand:`, move.player1Hand?.map(c => c.value + c.suit));
                console.log(`DurakGame [${this.socket?.id}]: Opponent hand:`, move.player2Hand?.length, 'cards');
            } else {
                console.log(`DurakGame [${this.socket?.id}]: My hand:`, move.player2Hand?.map(c => c.value + c.suit));
                console.log(`DurakGame [${this.socket?.id}]: Opponent hand:`, move.player1Hand?.length, 'cards');
            }
            console.log(`DurakGame [${this.socket?.id}]: Current attacker: ${move.currentAttacker}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ gameState –ø–æ–ª–Ω—ã–π
            const isComplete = move.gamePhase && move.players && move.deck && move.player1Hand && move.player2Hand !== undefined;
            console.log(`DurakGame [${this.socket?.id}]: Checking completeness - gamePhase: ${!!move.gamePhase}, players: ${!!move.players}, deck: ${!!move.deck}, player1Hand: ${!!move.player1Hand}, player2Hand: ${move.player2Hand !== undefined}, complete: ${isComplete}`);
            if (isComplete) {
                this.gameState = move;
                console.log(`DurakGame [${this.socket?.id}]: Full gameState received, rendering`);
                this.render();
            } else {
                console.log(`DurakGame [${this.socket?.id}]: Incomplete gameState received, waiting for complete data`);
                console.log(`DurakGame [${this.socket?.id}]: Missing fields:`, {
                    gamePhase: !move.gamePhase,
                    players: !move.players,
                    deck: !move.deck,
                    player1Hand: !move.player1Hand,
                    player2Hand: move.player2Hand === undefined
                });
            }
            return;
        }

        const { action, card, playerId, cardIndex } = move;
        const isCurrentPlayer = playerId === this.socket?.id;

        if (action === 'play' && card) {
            if (isCurrentPlayer) {
                const index = this.gameState.playerHand.findIndex(c =>
                    c.suit === card.suit && c.value === card.value
                );
                if (index !== -1) {
                    this.gameState.attackingCards.push(card);
                    this.gameState.playerHand.splice(index, 1);
                }
            } else {
                const index = this.gameState.opponentHand.findIndex(c =>
                    c.suit === card.suit && c.value === card.value
                );
                if (index !== -1) {
                    this.gameState.attackingCards.push(card);
                    this.gameState.opponentHand.splice(index, 1);
                }
            }
            this.gameState.gamePhase = 'defend';
            this.showNotification(`${isCurrentPlayer ? '–í—ã' : '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫'} —Å—ã–≥—Ä–∞–ª–∏ ${card.value}${card.suit}`, 'info');

        } else if (action === 'defend' && card) {
            if (isCurrentPlayer) {
                const index = this.gameState.playerHand.findIndex(c =>
                    c.suit === card.suit && c.value === card.value
                );
                if (index !== -1) {
                    const undefendedIndex = this.gameState.attackingCards.findIndex((_, i) => !this.gameState.defendingCards[i]);
                    this.gameState.defendingCards[undefendedIndex] = card;
                    this.gameState.playerHand.splice(index, 1);
                }
            } else {
                const index = this.gameState.opponentHand.findIndex(c =>
                    c.suit === card.suit && c.value === card.value
                );
                if (index !== -1) {
                    const undefendedIndex = this.gameState.attackingCards.findIndex((_, i) => !this.gameState.defendingCards[i]);
                    this.gameState.defendingCards[undefendedIndex] = card;
                    this.gameState.opponentHand.splice(index, 1);
                }
            }
            this.showNotification(`${isCurrentPlayer ? '–í—ã' : '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫'} –æ—Ç–±–∏–ª–∏—Å—å ${card.value}${card.suit}`, 'success');

        } else if (action === 'take') {
            if (isCurrentPlayer) {
                this.gameState.playerHand.push(...this.gameState.attackingCards);
                this.gameState.playerHand.push(...this.gameState.defendingCards);
                // –ê—Ç–∞–∫—É—é—â–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ (–Ω–µ –º–µ–Ω—è–µ–º currentAttacker)
            } else {
                this.gameState.opponentHand.push(...this.gameState.attackingCards);
                this.gameState.opponentHand.push(...this.gameState.defendingCards);
                // –ê—Ç–∞–∫—É—é—â–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ
            }
            this.gameState.attackingCards = [];
            this.gameState.defendingCards = [];
            this.gameState.gamePhase = 'attack';
            this.refillHands();
            this.showNotification(`${isCurrentPlayer ? '–í—ã' : '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫'} –≤–∑—è–ª–∏ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞`, 'warning');
        }
    };

    // –ù–æ–≤–∞—è –∏–≥—Ä–∞
    newRound() {
        console.log('DurakGame.newRound() called');
        if (this.isNetworkGame) {
            this.showNotification('–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–µ—Ç–µ–≤–æ–º —Ä–µ–∂–∏–º–µ', 'warning');
            return;
        }
        // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∏–≥—Ä—ã —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.gameState = {
            gameMode: 'durak',
            deck: [],
            discardedCards: [],
            playerHand: [],
            opponentHand: [],
            attackingCards: [],
            defendingCards: [],
            trumpSuit: null,
            currentAttacker: 'player',
            gamePhase: 'attack',
            winner: null,
            roundWinner: null
        };
        this.createDeck();
        this.shuffleDeck();
        this.setTrumpSuit();
        this.dealInitialCards();
        this.determineFirstPlayer();
        this.render();
        this.showNotification('–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!', 'info');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –¥–ª—è ES6 –º–æ–¥—É–ª–µ–π
export { DurakGame };

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.DurakGame = DurakGame;
