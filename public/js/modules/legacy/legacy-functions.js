// ===== LEGACY FUNCTIONS =====
// –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
window.currentGame = null;
window.currentOpponent = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function createTicTacToeGame() {
    if (window.gameManager) {
        window.currentGame = window.gameManager.createGame('tictactoe');
        return window.currentGame ? window.currentGame.init() : false;
    }
    return false;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã TicTacToe (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function initNetworkTicTacToe() {
    console.log('initNetworkTicTacToe called, currentOpponent:', window.currentOpponent);
    if (window.gameManager) {
        console.log('Using gameManager.startGame for tictactoe with opponent:', window.currentOpponent);
        const game = window.gameManager.startGame('tictactoe', window.currentOpponent);
        if (game) {
            console.log('TicTacToe game started, isNetworkGame:', game.isNetworkGame);
            return true;
        } else {
            console.error('Failed to start TicTacToe game');
        }
    } else {
        console.error('gameManager not available');
    }
    return false;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã Chess (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function initNetworkChess() {
    if (window.gameManager) {
        const game = window.gameManager.startGame('chess', window.currentOpponent);
        if (game) {
            game.isNetworkGame = true;
            return game.init();
        }
    }
    return false;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã Poker (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function initNetworkPoker() {
    if (window.gameManager) {
        const game = window.gameManager.startGame('poker', window.currentOpponent);
        if (game) {
            game.isNetworkGame = true;
            return game.init();
        }
    }
    return false;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã Durak (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function initNetworkDurak() {
    if (window.gameManager) {
        const game = window.gameManager.startGame('durak', window.currentOpponent);
        if (game) {
            game.isNetworkGame = true;
            return game.init();
        }
    }
    return false;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Ö–æ–¥–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function handleNetworkTicTacToeMove(move) {
    if (window.gameManager && window.gameManager.currentGame) {
        window.gameManager.currentGame.handleNetworkMove(move);
    }
}

function handleNetworkChessMove(move) {
    if (window.gameManager && window.gameManager.currentGame) {
        window.gameManager.currentGame.handleNetworkMove(move);
    }
}

function handleNetworkPokerMove(move) {
    if (window.gameManager && window.gameManager.currentGame) {
        window.gameManager.currentGame.handleNetworkMove(move);
    }
}

function handleNetworkCardsMove(move) {
    if (window.gameManager && window.gameManager.currentGame) {
        window.gameManager.currentGame.handleNetworkMove(move);
    }
}

// –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function renderTicTacToeBoard() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.render) {
        window.gameManager.currentGame.render();
    }
}

function renderChessBoard() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.render) {
        window.gameManager.currentGame.render();
    }
}

function renderPokerGame() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.render) {
        window.gameManager.currentGame.render();
    }
}

function renderDurakGame() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.render) {
        window.gameManager.currentGame.render();
    }
}

function renderCardsGame() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.render) {
        window.gameManager.currentGame.render();
    }
}

function renderCardsMenu() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –∏–≥—Ä
    const container = document.getElementById('activeGameContent');
    if (!container) return;

    let html = '<div class="cards-menu">';
    html += '<h3>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–Ω—É—é –∏–≥—Ä—É:</h3>';
    html += '<div class="game-selection">';
    html += '<button class="game-mode-btn" onclick="selectPoker()">üÉè –ü–æ–∫–µ—Ä</button>';
    html += '<button class="game-mode-btn" onclick="selectDurak()">üé¥ –î—É—Ä–∞–∫</button>';
    html += '</div>';
    html += '<button onclick="backToMenu()" class="back-btn">–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é</button>';
    html += '</div>';

    container.innerHTML = html;
    container.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
}

  // –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  function selectPoker() {
      // –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã, —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
      if (window.selectPoker && window.selectPoker !== selectPoker) {
          // –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ games.js
          window.selectPoker();
      } else if (window.gameManager) {
          // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          window.gameManager.startGame('poker');
      }
  }

  function selectDurak() {
      // –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã, —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
      if (window.selectDurak && window.selectDurak !== selectDurak) {
          // –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ games.js
          window.selectDurak();
      } else if (window.gameManager) {
          // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          window.gameManager.startGame('durak');
      }
  }

function initCards() {
    renderCardsMenu();
}

// –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ò–ò (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function makeBotMove() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.makeBotMove) {
        window.gameManager.currentGame.makeBotMove();
    }
}

function makeChessBotMove() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.makeBotMove) {
        window.gameManager.currentGame.makeBotMove();
    }
}

function makePokerBotMove() {
    // –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∫–ª–∞—Å—Å–µ PokerGame
}

function makeDurakBotDefense() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.makeBotDefense) {
        window.gameManager.currentGame.makeBotDefense();
    }
}

function makeDurakBotAttack() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.makeBotAttack) {
        window.gameManager.currentGame.makeBotAttack();
    }
}

function makeDurakBotThrow() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.makeBotThrow) {
        window.gameManager.currentGame.makeBotThrow();
    }
}

// –î—Ä—É–≥–∏–µ —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function handleCardClick(e) {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.handleCardClick) {
        window.gameManager.currentGame.handleCardClick(e);
    }
}

function addPokerCardHandlers() {
    // –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∫–ª–∞—Å—Å–µ PokerGame
}

function exchangeCards() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.exchangeCards) {
        window.gameManager.currentGame.exchangeCards();
    }
}

function checkPokerHand() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.checkHand) {
        window.gameManager.currentGame.checkHand();
    }
}

function newPokerRound() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.nextRound) {
        window.gameManager.currentGame.nextRound();
    }
}

function startNewPokerGame() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.startNewGame) {
        window.gameManager.currentGame.startNewGame();
    }
}

function showPokerResult() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.showResult) {
        window.gameManager.currentGame.showResult();
    }
}

function playDurakCard(cardIndex) {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.handleCardClick) {
        window.gameManager.currentGame.handleCardClick(cardIndex);
    }
}

function takeDurakCards() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.takeCards) {
        window.gameManager.currentGame.takeCards();
    }
}

function passDurakTurn() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.passTurn) {
        window.gameManager.currentGame.passTurn();
    }
}

function newDurakRound() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.newRound) {
        window.gameManager.currentGame.newRound();
    }
}

function finishDurakRound() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.finishRound) {
        window.gameManager.currentGame.finishRound();
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–æ–¥–æ–π (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function createDeck() {
    // –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∫–ª–∞—Å—Å–µ CardGame
}

function shuffleDeck() {
    // –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∫–ª–∞—Å—Å–µ CardGame
}

function setTrumpSuit() {
    // –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∫–ª–∞—Å—Å–µ DurakGame
}

function dealPokerCards() {
    // –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∫–ª–∞—Å—Å–µ PokerGame
}

function dealDurakCards() {
    // –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∫–ª–∞—Å—Å–µ DurakGame
}

function determineFirstPlayer() {
    // –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∫–ª–∞—Å—Å–µ DurakGame
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function getCardPower(value) {
    const powers = { '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14 };
    return powers[value] || 0;
}

function getSuitClass(suit) {
    const classes = { '‚ô•': 'hearts', '‚ô¶': 'diamonds', '‚ô£': 'clubs', '‚ô†': 'spades' };
    return classes[suit] || '';
}

function canAttackOrThrowCard(card) {
    // –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∫–ª–∞—Å—Å–µ DurakGame
    return false;
}

function refillDurakHands() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.refillHands) {
        window.gameManager.currentGame.refillHands();
    }
}

function checkDurakGameEnd() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.checkGameEnd) {
        window.gameManager.currentGame.checkGameEnd();
    }
}

function validateBotAction(action, card, targetCard = null) {
    // –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∫–ª–∞—Å—Å–µ DurakGame
    return false;
}

function takeDurakCardsBot() {
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.botTakeCards) {
        window.gameManager.currentGame.botTakeCards();
    }
}

function canDefendCard(defendCard, attackCard) {
    // –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∫–ª–∞—Å—Å–µ DurakGame
    return false;
}

function defendWithAI() {
    // –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –∫–ª–∞—Å—Å–µ DurakGame
}

function testDurak() {
    if (window.gameManager) {
        window.currentOpponent = {
            name: '–£–º–Ω—ã–π –ë–æ—Ç',
            emoji: 'ü§ñ',
            type: 'bot'
        };
        window.gameManager.startGame('durak');
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function updateRoomPlayers() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
    if (window.networkManager) {
        // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ NetworkManager
    }
}

function startGameDirectly(game) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–∫—Ä—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é
    try { localStorage.removeItem('wt_active_game_closed'); } catch (e) { }

    window.currentGame = game;
    const panel = document.getElementById('activeGamePanel');
    if (!panel) {
        console.error('activeGamePanel not found!');
        return;
    }
    const icon = document.getElementById('activeGameIcon');
    const title = document.getElementById('activeGameTitle');
    if (icon && title) {
        if (game === 'chess') { icon.textContent = '‚ôüÔ∏è'; title.textContent = '–®–∞—Ö–º–∞—Ç—ã'; }
        else if (game === 'tictactoe') { icon.textContent = '‚≠ï'; title.textContent = '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏'; }
        else if (game === 'cards') { icon.textContent = 'üÉè'; title.textContent = '–ö–∞—Ä—Ç—ã'; }
    }
    panel.classList.remove('hidden');
    panel.scrollIntoView({ behavior: 'smooth', block: 'nearest' });

    console.log('startGameDirectly: calling gameManager.startGame');
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    if (window.socket && window.roomId && window.currentOpponent?.type === 'player') {
        window.socket.emit('game-start', {
            roomId: window.roomId,
            gameType: game,
            opponentId: window.currentOpponent.id
        });
    } else {
        // –ï—Å–ª–∏ –∏–≥—Ä–∞–µ–º —Å –±–æ—Ç–æ–º –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        console.log('startGameDirectly: starting local game via gameManager');
        const startedGame = window.gameManager?.startGame(game);
        console.log('gameManager.startGame result:', startedGame);
        if (!startedGame) {
            console.error('Failed to start game via gameManager!');
        }
    }
}

function openGame(game) {
    console.log('openGame called with:', game);
    console.log('window.gameManager exists:', !!window.gameManager);
    console.log('window.roomId:', window.roomId);
    console.log('window.socket exists:', !!window.socket);

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –∏–≥—Ä - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    if (game === 'cards') {
        console.log('Opening cards menu');
        initCards();
        return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ, –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    if (window.roomId && window.socket) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ (–∏—Å–∫–ª—é—á–∞—è —Å–µ–±—è)
        const otherPlayers = window.roomPlayers.filter(p => p.id !== (window.socket?.id || 'self'));

        if (otherPlayers.length === 0) {
            // –í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –±–æ—Ç–∞
            console.log('No other players in room, auto-selecting bot');
            window.currentOpponent = { type: 'bot', name: '–ë–æ—Ç', emoji: 'ü§ñ' };
            if (window.showNotification) window.showNotification('–í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤. –ò–≥—Ä–∞–µ–º —Å –±–æ—Ç–æ–º! ü§ñ', 'info');
            startGameDirectly(game);
            return;
        } else {
            // –í –∫–æ–º–Ω–∞—Ç–µ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
            console.log('Other players found in room, showing opponent selector');
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
            updateRoomPlayers();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
            setTimeout(() => {
                if (window.showOpponentSelector) window.showOpponentSelector(game);
            }, 100);
            return;
        }
    }

    // –ï—Å–ª–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –Ω–∞–ø—Ä—è–º—É—é
    if (window.currentOpponent) {
        startGameDirectly(game);
        return;
    }

    // –ï—Å–ª–∏ –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞—Ç—å –±–æ—Ç–∞
    if (!window.roomId || !window.socket) {
        console.log('Not in room, auto-selecting bot');
        window.currentOpponent = { type: 'bot', name: '–ë–æ—Ç', emoji: 'ü§ñ' };
        startGameDirectly(game);
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
    updateRoomPlayers();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
    setTimeout(() => {
        if (window.showOpponentSelector) window.showOpponentSelector(game);
    }, 100);
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–ª–µ—Ç–∫–∞–º –≤ –∫—Ä–µ—Å—Ç–∏–∫–∞—Ö-–Ω–æ–ª–∏–∫–∞—Ö
function handleTicTacToeCellClick(row, col) {
    console.log('handleTicTacToeCellClick called with:', row, col);
    console.log('window.gameManager exists:', !!window.gameManager);
    console.log('window.gameManager.currentGame exists:', !!(window.gameManager && window.gameManager.currentGame));
    console.log('currentGame type:', window.gameManager?.currentGame?.gameType);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ —ç—Ç–æ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.gameType === 'tictactoe' &&
        window.gameManager.currentGame.handleCellClick) {
        console.log('Calling handleCellClick on currentGame');
        window.gameManager.currentGame.handleCellClick(row, col);
    } else {
        console.log('TicTacToe game not active or not found');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å HTML
window.createTicTacToeGame = createTicTacToeGame;
window.initNetworkTicTacToe = initNetworkTicTacToe;
window.initNetworkChess = initNetworkChess;
window.initNetworkPoker = initNetworkPoker;
window.initNetworkDurak = initNetworkDurak;
window.handleNetworkTicTacToeMove = handleNetworkTicTacToeMove;
window.handleNetworkChessMove = handleNetworkChessMove;
window.handleNetworkPokerMove = handleNetworkPokerMove;
window.handleNetworkCardsMove = handleNetworkCardsMove;
window.renderTicTacToeBoard = renderTicTacToeBoard;
window.renderChessBoard = renderChessBoard;
window.renderPokerGame = renderPokerGame;
window.renderDurakGame = renderDurakGame;
window.renderCardsGame = renderCardsGame;
window.renderCardsMenu = renderCardsMenu;
window.selectPoker = selectPoker;
window.selectDurak = selectDurak;
window.initCards = initCards;
window.makeBotMove = makeBotMove;
window.makeChessBotMove = makeChessBotMove;
window.makePokerBotMove = makePokerBotMove;
window.makeDurakBotDefense = makeDurakBotDefense;
window.makeDurakBotAttack = makeDurakBotAttack;
window.makeDurakBotThrow = makeDurakBotThrow;
window.handleCardClick = handleCardClick;
window.addPokerCardHandlers = addPokerCardHandlers;
window.exchangeCards = exchangeCards;
window.checkPokerHand = checkPokerHand;
window.newPokerRound = newPokerRound;
window.startNewPokerGame = startNewPokerGame;
window.showPokerResult = showPokerResult;
window.playDurakCard = playDurakCard;
window.takeDurakCards = takeDurakCards;
window.passDurakTurn = passDurakTurn;
window.newDurakRound = newDurakRound;
window.finishDurakRound = finishDurakRound;
window.createDeck = createDeck;
window.shuffleDeck = shuffleDeck;
window.setTrumpSuit = setTrumpSuit;
window.dealPokerCards = dealPokerCards;
window.dealDurakCards = dealDurakCards;
window.determineFirstPlayer = determineFirstPlayer;
window.getCardPower = getCardPower;
window.getSuitClass = getSuitClass;
window.canAttackOrThrowCard = canAttackOrThrowCard;
window.refillDurakHands = refillDurakHands;
window.checkDurakGameEnd = checkDurakGameEnd;
window.validateBotAction = validateBotAction;
window.takeDurakCardsBot = takeDurakCardsBot;
window.canDefendCard = canDefendCard;
window.defendWithAI = defendWithAI;
window.testDurak = testDurak;
window.updateRoomPlayers = updateRoomPlayers;
window.startGameDirectly = startGameDirectly;
window.openGame = openGame;
window.handleTicTacToeCellClick = handleTicTacToeCellClick;
