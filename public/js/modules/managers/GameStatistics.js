// ===== GAME STATISTICS =====

// –°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä
class GameStatistics {
    constructor() {
        this.storageKey = 'wt_game_statistics';
        this.stats = this.loadStats();
        this.listeners = [];
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ localStorage
    loadStats() {
        try {
            const saved = localStorage.getItem(this.storageKey);
            return saved ? JSON.parse(saved) : this.getDefaultStats();
        } catch (e) {
            console.warn('Failed to load game statistics:', e);
            return this.getDefaultStats();
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ localStorage
    saveStats() {
        try {
            localStorage.setItem(this.storageKey, JSON.stringify(this.stats));
        } catch (e) {
            console.warn('Failed to save game statistics:', e);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    getDefaultStats() {
        return {
            gamesPlayed: 0,
            totalWins: 0,
            totalLosses: 0,
            totalDraws: 0,
            games: {
                tictactoe: {
                    played: 0,
                    wins: 0,
                    losses: 0,
                    draws: 0,
                    winRate: 0,
                    bestStreak: 0,
                    currentStreak: 0
                },
                chess: {
                    played: 0,
                    wins: 0,
                    losses: 0,
                    draws: 0,
                    winRate: 0,
                    bestStreak: 0,
                    currentStreak: 0
                },
                poker: {
                    played: 0,
                    wins: 0,
                    losses: 0,
                    draws: 0,
                    winRate: 0,
                    bestStreak: 0,
                    currentStreak: 0,
                    bestScore: 0,
                    totalScore: 0
                },
                durak: {
                    played: 0,
                    wins: 0,
                    losses: 0,
                    draws: 0,
                    winRate: 0,
                    bestStreak: 0,
                    currentStreak: 0
                }
            },
            achievements: {
                firstWin: false,
                winStreak5: false,
                winStreak10: false,
                gamesPlayed100: false,
                perfectGame: false // –≤—ã–∏–≥—Ä–∞—Ç—å –±–µ–∑ –ø–æ—Ä–∞–∂–µ–Ω–∏–π –≤–æ –≤—Å–µ—Ö –∏–≥—Ä–∞—Ö
            },
            lastUpdated: Date.now()
        };
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
    recordGameResult(gameType, result, metadata = {}) {
        if (!this.stats.games[gameType]) {
            console.warn(`Unknown game type: ${gameType}`);
            return;
        }

        const gameStats = this.stats.games[gameType];

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        gameStats.played++;
        this.stats.gamesPlayed++;

        switch (result) {
            case 'win':
                gameStats.wins++;
                this.stats.totalWins++;
                gameStats.currentStreak++;
                if (gameStats.currentStreak > gameStats.bestStreak) {
                    gameStats.bestStreak = gameStats.currentStreak;
                }
                break;
            case 'loss':
                gameStats.losses++;
                this.stats.totalLosses++;
                gameStats.currentStreak = 0;
                break;
            case 'draw':
                gameStats.draws++;
                this.stats.totalDraws++;
                gameStats.currentStreak = 0;
                break;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥
        gameStats.winRate = gameStats.played > 0 ? Math.round((gameStats.wins / gameStats.played) * 100) : 0;

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–∫–µ—Ä–∞ (–æ—á–∫–∏)
        if (gameType === 'poker' && metadata.score !== undefined) {
            gameStats.totalScore = (gameStats.totalScore || 0) + metadata.score;
            if (metadata.score > gameStats.bestScore) {
                gameStats.bestScore = metadata.score;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.checkAchievements(gameType, result);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        this.saveStats();
        this.notifyListeners('gameCompleted', { gameType, result, metadata });

        console.log(`üìä Game statistics updated: ${gameType} - ${result}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    checkAchievements(gameType, result) {
        const achievements = this.stats.achievements;

        // –ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞
        if (!achievements.firstWin && result === 'win') {
            achievements.firstWin = true;
            this.notifyListeners('achievementUnlocked', { achievement: 'firstWin', name: '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞!' });
        }

        // –°–µ—Ä–∏–∏ –ø–æ–±–µ–¥
        const gameStats = this.stats.games[gameType];
        if (result === 'win') {
            if (gameStats.currentStreak >= 5 && !achievements.winStreak5) {
                achievements.winStreak5 = true;
                this.notifyListeners('achievementUnlocked', { achievement: 'winStreak5', name: '–°–µ—Ä–∏—è –∏–∑ 5 –ø–æ–±–µ–¥!' });
            }
            if (gameStats.currentStreak >= 10 && !achievements.winStreak10) {
                achievements.winStreak10 = true;
                this.notifyListeners('achievementUnlocked', { achievement: 'winStreak10', name: '–°–µ—Ä–∏—è –∏–∑ 10 –ø–æ–±–µ–¥!' });
            }
        }

        // 100 –∏–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ
        if (this.stats.gamesPlayed >= 100 && !achievements.gamesPlayed100) {
            achievements.gamesPlayed100 = true;
            this.notifyListeners('achievementUnlocked', { achievement: 'gamesPlayed100', name: '100 –∏–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ!' });
        }

        // –ò–¥–µ–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ (–ø–æ–±–µ–¥—ã –≤–æ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö –∏–≥—Ä)
        const allGamesWon = Object.values(this.stats.games).every(game => game.wins > 0);
        if (allGamesWon && !achievements.perfectGame) {
            achievements.perfectGame = true;
            this.notifyListeners('achievementUnlocked', { achievement: 'perfectGame', name: '–ò–¥–µ–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞!' });
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∏–≥—Ä—ã
    getGameStats(gameType) {
        return this.stats.games[gameType] || null;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getOverallStats() {
        return {
            gamesPlayed: this.stats.gamesPlayed,
            totalWins: this.stats.totalWins,
            totalLosses: this.stats.totalLosses,
            totalDraws: this.stats.totalDraws,
            winRate: this.stats.gamesPlayed > 0 ? Math.round((this.stats.totalWins / this.stats.gamesPlayed) * 100) : 0
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    getAchievements() {
        return this.stats.achievements;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–≥—Ä –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    getGameRanking() {
        return Object.entries(this.stats.games)
            .map(([gameType, stats]) => ({
                gameType,
                played: stats.played,
                winRate: stats.winRate
            }))
            .sort((a, b) => b.played - a.played);
    }

    // –°–±—Ä–æ—Å –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    resetStats() {
        this.stats = this.getDefaultStats();
        this.saveStats();
        this.notifyListeners('statsReset', {});
        console.log('üìä Game statistics reset');
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π
    addListener(callback) {
        this.listeners.push(callback);
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è
    removeListener(callback) {
        const index = this.listeners.indexOf(callback);
        if (index > -1) {
            this.listeners.splice(index, 1);
        }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    notifyListeners(event, data) {
        this.listeners.forEach(callback => {
            try {
                callback(event, data);
            } catch (e) {
                console.error('Error in statistics listener:', e);
            }
        });
    }

    // –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –±—ç–∫–∞–ø–∞)
    exportStats() {
        return JSON.stringify(this.stats, null, 2);
    }

    // –ò–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∏–∑ –±—ç–∫–∞–ø–∞)
    importStats(jsonString) {
        try {
            const imported = JSON.parse(jsonString);
            if (this.validateStats(imported)) {
                this.stats = imported;
                this.saveStats();
                this.notifyListeners('statsImported', {});
                console.log('üìä Game statistics imported');
                return true;
            }
        } catch (e) {
            console.error('Failed to import statistics:', e);
        }
        return false;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    validateStats(stats) {
        return stats &&
               typeof stats.gamesPlayed === 'number' &&
               stats.games &&
               typeof stats.games === 'object' &&
               stats.achievements &&
               typeof stats.achievements === 'object';
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    getAchievementDescription(achievement) {
        const descriptions = {
            firstWin: 'üéâ –í—ã–∏–≥—Ä–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∏–≥—Ä—É!',
            winStreak5: 'üî• –í—ã–∏–≥—Ä–∞–π—Ç–µ 5 –∏–≥—Ä –ø–æ–¥—Ä—è–¥!',
            winStreak10: '‚ö° –í—ã–∏–≥—Ä–∞–π—Ç–µ 10 –∏–≥—Ä –ø–æ–¥—Ä—è–¥!',
            gamesPlayed100: 'üéÆ –°—ã–≥—Ä–∞–π—Ç–µ 100 –∏–≥—Ä!',
            perfectGame: 'üèÜ –í—ã–∏–≥—Ä–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –ø–æ –æ–¥–Ω–æ–π –∏–≥—Ä–µ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞!'
        };
        return descriptions[achievement] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ';
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –¥–ª—è ES6 –º–æ–¥—É–ª–µ–π
export { GameStatistics };

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.GameStatistics = GameStatistics;
