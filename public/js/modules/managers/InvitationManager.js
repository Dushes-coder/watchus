// ===== INVITATION MANAGER =====

// –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π - —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏ –∏–≥—Ä–æ–∫–æ–≤
class InvitationManager {
    constructor() {
        this.socket = window.socket;
        this.roomId = window.roomId;
        this.pendingInvitations = new Map(); // invitationId -> invitationData
        this.sentInvitations = new Map(); // targetPlayerId -> invitationData
        this.eventHandlers = {};
        this.setupSocketListeners();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–∫–µ—Ç–æ–≤
    setupSocketListeners() {
        if (!this.socket) return;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        this.on('game-invitation', (data) => {
            console.log('üì® Received game invitation:', data);
            this.handleIncomingInvitation(data);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        this.on('game-invitation-response', (data) => {
            console.log('üì¨ Received invitation response:', data);
            this.handleInvitationResponse(data);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        this.on('game-started', (data) => {
            console.log('üéÆ Game started:', data);
            this.handleGameStarted(data);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–≥—Ä—ã
        this.on('game-closed', () => {
            console.log('üéØ Game closed');
            this.handleGameClosed();
        });
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
    on(event, handler) {
        if (this.socket) {
            this.socket.on(event, handler);
            this.eventHandlers[event] = handler;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
    emit(event, data) {
        if (this.socket) {
            this.socket.emit(event, data);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É
    sendInvitation(targetPlayerId, gameType, senderName, senderEmoji) {
        if (!this.socket || !this.roomId) {
            console.error('Socket or roomId not available');
            return false;
        }

        const invitationData = {
            roomId: this.roomId,
            targetPlayerId: targetPlayerId,
            gameType: gameType,
            senderName: senderName,
            senderEmoji: senderEmoji,
            timestamp: Date.now()
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        this.emit('send-game-invitation', invitationData);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        this.sentInvitations.set(targetPlayerId, invitationData);

        console.log('üì§ Sent invitation:', invitationData);
        return true;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    handleIncomingInvitation(data) {
        const invitationId = `${data.senderId}-${data.gameType}-${Date.now()}`;

        const invitationData = {
            id: invitationId,
            senderId: data.senderId,
            senderName: data.senderName,
            senderEmoji: data.senderEmoji,
            gameType: data.gameType,
            roomId: data.roomId,
            timestamp: data.timestamp || Date.now()
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö
        this.pendingInvitations.set(invitationId, invitationData);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        this.showInvitationModal(invitationData);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (this.pendingInvitations.has(invitationId)) {
                this.declineInvitation(invitationId);
            }
        }, 30000);
    }

    // –ü–æ–∫–∞–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    showInvitationModal(data) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        const existingModal = document.querySelector('.game-invitation');
        if (existingModal) {
            console.log('Invitation modal already exists, skipping creation');
            return;
        }

        const modal = document.createElement('div');
        modal.className = 'modal-overlay game-invitation';
        modal.setAttribute('aria-hidden', 'false');
        modal.style.display = 'flex';

        let gameIcon = '';
        let gameName = '';
        switch(data.gameType) {
            case 'chess': gameIcon = '‚ôüÔ∏è'; gameName = '–®–∞—Ö–º–∞—Ç—ã'; break;
            case 'tictactoe': gameIcon = '‚≠ï'; gameName = '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏'; break;
            case 'poker': gameIcon = 'üÉè'; gameName = '–ü–æ–∫–µ—Ä'; break;
            case 'durak': gameIcon = 'üé¥'; gameName = '–î—É—Ä–∞–∫'; break;
            default: gameIcon = 'üéÆ'; gameName = '–ò–≥—Ä–∞'; break;
        }

        let html = `
            <div class="modal-content invitation-modal">
                <div class="modal-header">
                    <h3>${gameIcon} –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∏–≥—Ä—É</h3>
                </div>
                <div class="invitation-content">
                    <div class="invitation-message">
                        <div class="inviter">${data.senderEmoji || 'üë§'} ${data.senderName || '–ò–≥—Ä–æ–∫'}</div>
                        <div class="game-invite">–ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å —Å—ã–≥—Ä–∞—Ç—å –≤ <strong>${gameName}</strong></div>
                    </div>
        `;
        console.log('Generating invitation modal HTML, invitationManager available:', !!window.invitationManager);
        html += '<div class="invitation-actions">';
        html += '<button class="action-btn accept-btn" onclick="window.invitationManager.acceptInvitation(\'' + data.id + '\'); event.preventDefault(); event.stopPropagation(); return false;">‚úÖ –ü—Ä–∏–Ω—è—Ç—å</button>';
        html += '<button class="back-btn decline-btn" onclick="window.invitationManager.declineInvitation(\'' + data.id + '\'); event.preventDefault(); event.stopPropagation(); return false;">‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>';
        html += '</div>';
        html += `
                </div>
            </div>
        `;

        modal.innerHTML = html;

        document.body.appendChild(modal);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            modal.style.opacity = '1';
            modal.querySelector('.modal-content').style.transform = 'scale(1)';
        }, 10);
    }

    // –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    acceptInvitation(invitationId) {
        const invitation = this.pendingInvitations.get(invitationId);
        if (!invitation) {
            console.error('Invitation not found:', invitationId);
            return;
        }

        console.log('üéØ ACCEPTING INVITATION in InvitationManager:', invitation);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        this.emit('game-invitation-response', {
            roomId: invitation.roomId,
            senderId: invitation.senderId,
            accepted: true,
            gameType: invitation.gameType
        });

        console.log('üì§ Sent game-invitation-response from InvitationManager');

        // –û—á–∏—â–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        this.pendingInvitations.delete(invitationId);
        console.log('üßπ Cleared pending invitation, calling closeInvitationModal');
        this.closeInvitationModal();

        console.log('üéØ Set currentOpponent in InvitationManager');
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ø–æ–Ω–µ–Ω—Ç–µ
        window.currentOpponent = {
            type: 'player',
            id: invitation.senderId,
            name: invitation.senderName,
            emoji: invitation.senderEmoji
        };

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        this.startAcceptedGame(invitation.gameType);

        showNotification('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É.', 'success');
    }

    // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    declineInvitation(invitationId) {
        const invitation = this.pendingInvitations.get(invitationId);
        if (!invitation) {
            console.error('Invitation not found:', invitationId);
            return;
        }

        console.log('‚ùå Declining invitation:', invitation);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫–∞–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        this.emit('game-invitation-response', {
            roomId: invitation.roomId,
            senderId: invitation.senderId,
            accepted: false
        });

        // –û—á–∏—â–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        this.pendingInvitations.delete(invitationId);
        this.closeInvitationModal();

        showNotification('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.', 'warning');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    handleInvitationResponse(data) {
        console.log('üéâ Handling invitation response:', data);

        if (data.accepted) {
            // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ
            const invitation = this.sentInvitations.get(data.responderId);
            if (invitation) {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ø–æ–Ω–µ–Ω—Ç–µ
                window.currentOpponent = {
                    type: 'player',
                    id: data.responderId,
                    name: data.responderName || '–ò–≥—Ä–æ–∫',
                    emoji: data.responderEmoji || 'üë§'
                };

                // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
                this.startAcceptedGame(data.gameType);

                showNotification('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É.', 'success');
                this.sentInvitations.delete(data.responderId);
            }
        } else {
            // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ
            showNotification('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.', 'warning');
            this.sentInvitations.delete(data.responderId);
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ)
        if (window.GameUI && window.GameUI.closeInvitationModal) {
            console.log('Attempting to close invitation modal from InvitationManager');
            window.GameUI.closeInvitationModal();
        }
    }

    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    startAcceptedGame(gameType) {
        console.log('üöÄ Starting accepted game:', gameType);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ –∏–≥—Ä–∞ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é)
        if (window.gameManager?.isGameActive() && window.gameManager.currentGame?.gameType === gameType) {
            console.log('Game already started, skipping duplicate initialization in startAcceptedGame');
            return;
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–≥—Ä—ã
        try { localStorage.removeItem('wt_active_game_closed'); } catch (e) {}

        // –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        console.log('Starting game for invitation sender');
        const game = window.gameManager.startGame(gameType, window.currentOpponent);
        if (game) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º
            game.isNetworkGame = true;
            console.log('Network game initialized for sender');
        } else {
            console.error('Failed to start game in startAcceptedGame');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    handleGameStarted(data) {
        const { gameType, players, roomId } = data;
        console.log('üéÆ Game started event received:', data);

        window.roomId = roomId;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º roomId –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–≥—Ä—ã
        try { localStorage.removeItem('wt_active_game_closed'); } catch (e) {}

        // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (window.gameManager.isGameActive() && window.gameManager.currentGame && window.gameManager.currentGame.gameType === gameType) {
            console.log('Game already active, updating state');
            if (window.gameManager.currentGame) {
                window.gameManager.currentGame.gameState.players = players;
                window.gameManager.currentGame.isNetworkGame = true;
                console.log('Updated players for active game:', players);
                window.gameManager.currentGame.setupPlayerSymbols();
                // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º render() –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ gameState –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ handleNetworkMove
            }
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        console.log('Creating new game for started event');
        const opponent = {
            type: 'player',
            id: players.find(p => p !== window.socket.id),
            name: `–ò–≥—Ä–æ–∫ ${players.find(p => p !== window.socket.id).slice(0, 6)}`,
            emoji: 'üéÆ'
        };
        
        const game = window.gameManager.startGame(gameType, opponent);
        if (game) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã
            game.gameState.players = players;
            game.isNetworkGame = true;
            console.log('Network game initialized for receiver, players:', players);
            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –∏–≥—Ä–æ–∫–æ–≤
            game.setupPlayerSymbols();
            // render() –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω —á–µ—Ä–µ–∑ handleNetworkMove
        } else {
            console.error('Failed to start game in handleGameStarted');
        }
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    closeInvitationModal() {
        console.log('üîç InvitationManager: Looking for invitation modal to close');
        const modal = document.querySelector('.game-invitation');
        console.log('InvitationManager: Found modal element:', modal);
        if (modal) {
            console.log('InvitationManager: Closing invitation modal');
            modal.style.opacity = '0';
            modal.querySelector('.modal-content').style.transform = 'scale(0.8)';
            setTimeout(() => {
                if (modal.parentNode) {
                    modal.parentNode.removeChild(modal);
                    console.log('InvitationManager: Invitation modal removed from DOM');
                }
            }, 300);
        } else {
            console.log('InvitationManager: No invitation modal found to close');
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    getPendingInvitations() {
        return Array.from(this.pendingInvitations.values());
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    getSentInvitations() {
        return Array.from(this.sentInvitations.values());
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    clearAllInvitations() {
        this.pendingInvitations.clear();
        this.sentInvitations.clear();
    }

    // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–æ—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
    destroy() {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        Object.keys(this.eventHandlers).forEach(event => {
            if (this.socket && this.eventHandlers[event]) {
                this.socket.off(event, this.eventHandlers[event]);
            }
        });
        this.eventHandlers = {};

        // –û—á–∏—â–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        this.clearAllInvitations();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –¥–ª—è ES6 –º–æ–¥—É–ª–µ–π
export { InvitationManager };

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.InvitationManager = InvitationManager;
