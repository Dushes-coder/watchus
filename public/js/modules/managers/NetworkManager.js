// ===== NETWORK MANAGER =====

// –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ç–∏ - —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ç–µ–≤—ã–º–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏
class NetworkManager {
    constructor() {
        this.socket = null;
        this.roomId = null;
        this.isConnected = false;
        this.eventHandlers = {};
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
    connect(serverUrl = null) {
        if (this.socket && this.isConnected) {
            console.log('üîó Already connected');
            return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π socket –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (window.socket) {
            this.socket = window.socket;
            this.roomId = window.roomId;
            this.isConnected = true;
            this.setupSocketListeners();
            console.log('üîó Using existing socket connection');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        const url = serverUrl || window.location.origin;
        console.log('üîó Connecting to:', url);

        try {
            this.socket = io(url);
            this.setupSocketListeners();
        } catch (error) {
            console.error('‚ùå Failed to connect:', error);
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–∫–µ—Ç–æ–≤
    setupSocketListeners() {
        if (!this.socket) return;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.on('connect', () => {
            this.isConnected = true;
            console.log('‚úÖ Connected to server');
            this.emit('join-room', { roomId: this.roomId });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        this.on('disconnect', () => {
            this.isConnected = false;
            console.log('‚ùå Disconnected from server');
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        this.on('connect_error', (error) => {
            console.error('‚ùå Connection error:', error);
            this.isConnected = false;
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
        this.on('room-joined', (data) => {
            console.log('üè† Joined room:', data);
            this.roomId = data.roomId;

            // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            window.roomId = this.roomId;
            if (data.players) {
                window.roomPlayers = data.players;
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
        this.on('players-update', (players) => {
            console.log('üë• Players updated:', players);
            window.roomPlayers = players;
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        this.on('game-invitation', (data) => {
            console.log('üì® Game invitation received:', data);
            if (window.invitationManager) {
                window.invitationManager.handleIncomingInvitation(data);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        this.on('game-invitation-response', (data) => {
            console.log('üì¨ Invitation response received:', data);
            if (window.invitationManager) {
                window.invitationManager.handleInvitationResponse(data);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        this.on('game-started', (data) => {
            console.log('üéÆ Game started event:', data);
            if (window.invitationManager) {
                window.invitationManager.handleGameStarted(data);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        this.on('game-ended', (data) => {
            console.log('üèÅ Game ended:', data);
            if (window.gameManager && window.gameManager.currentGame) {
                window.gameManager.currentGame.endGame(data.winner);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–≥—Ä—ã
        this.on('game-closed', () => {
            console.log('üéØ Game closed');
            if (window.invitationManager) {
                window.invitationManager.handleGameClosed();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ö–æ–¥–∞ –≤ –∏–≥—Ä–µ
        this.on('game-move', (move) => {
            console.log('üé≤ Game move received:', move);
            if (window.gameManager && window.gameManager.currentGame) {
                window.gameManager.currentGame.handleNetworkMove(move);
            }
        });
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
    on(event, handler) {
        if (this.socket) {
            this.socket.on(event, handler);
            this.eventHandlers[event] = handler;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
    emit(event, data) {
        if (this.socket && this.isConnected) {
            this.socket.emit(event, data);
        } else {
            console.warn('‚ö†Ô∏è Cannot emit - not connected');
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
    sendStartGame(gameType) {
        this.emit('start-game', {
            roomId: this.roomId,
            gameType: gameType
        });
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ö–æ–¥–∞
    sendMove(moveData) {
        this.emit('game-move', {
            roomId: this.roomId,
            ...moveData
        });
    }

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
    joinRoom(roomId) {
        this.roomId = roomId;
        if (this.isConnected) {
            this.emit('join-room', { roomId });
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    createRoom(roomData = {}) {
        this.emit('create-room', roomData);
    }

    // –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
    leaveRoom() {
        if (this.roomId) {
            this.emit('leave-room', { roomId: this.roomId });
            this.roomId = null;
        }
    }

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    disconnect() {
        if (this.socket) {
            this.socket.disconnect();
            this.socket = null;
            this.isConnected = false;
            this.roomId = null;

            // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            Object.keys(this.eventHandlers).forEach(event => {
                if (this.socket) {
                    this.socket.off(event, this.eventHandlers[event]);
                }
            });
            this.eventHandlers = {};
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    getConnectionStatus() {
        return {
            connected: this.isConnected,
            roomId: this.roomId,
            socketId: this.socket?.id
        };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    isConnected() {
        return this.isConnected && this.socket && this.socket.connected;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –¥–ª—è ES6 –º–æ–¥—É–ª–µ–π
export { NetworkManager };

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.NetworkManager = NetworkManager;
