// ===== GAME MANAGER =====

// –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä - —É–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∏–≥—Ä
class GameManager {
    constructor() {
        this.currentGame = null;
        this.availableGames = {
            'tictactoe': window.TicTacToeGame,
            'chess': window.ChessGame,
            'poker': window.PokerGame,
            'durak': window.DurakGame
        };
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –ø–æ —Ç–∏–ø—É
    createGame(gameType) {
        if (this.availableGames[gameType]) {
            this.currentGame = new this.availableGames[gameType]();
            console.log(`üéÆ Created game: ${gameType}`);
            return this.currentGame;
        }
        console.error(`‚ùå Unknown game type: ${gameType}`);
        return null;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
    getCurrentGame() {
        return this.currentGame;
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
    closeCurrentGame() {
        if (this.currentGame) {
            console.log('üéØ Closing current game');
            this.currentGame.endGame();
            this.currentGame.clearContainer(); // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–≥—Ä—ã
            this.currentGame = null;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
            window.currentOpponent = null;
            window.gameState = null;
            window.currentGame = null;
        }
    }

    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    startGame(gameType, opponent = null) {
        this.closeCurrentGame();

        const game = this.createGame(gameType);
        if (game) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
            if (opponent) {
                window.currentOpponent = opponent;
                game.currentOpponent = opponent;
                console.log('GameManager: Set opponent for', gameType, ':', opponent);
            } else {
                console.log('GameManager: No opponent provided for', gameType);
            }

            console.log(`GameManager: Calling init on game ${gameType}, game.currentOpponent:`, game.currentOpponent);
            const success = game.init();
            console.log(`GameManager: init result for ${gameType}:`, success, 'game.isNetworkGame:', game.isNetworkGame);
            if (success) {
                console.log(`‚úÖ Game started: ${gameType}`);
                return game;
            } else {
                console.error(`‚ùå Failed to start game: ${gameType}`);
                this.currentGame = null;
            }
        }
        return null;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä
    getAvailableGames() {
        return Object.keys(this.availableGames);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞
    isGameActive() {
        return this.currentGame !== null;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
    getCurrentGameType() {
        return this.currentGame ? this.currentGame.gameType : null;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –¥–ª—è ES6 –º–æ–¥—É–ª–µ–π
export { GameManager };

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.GameManager = GameManager;
