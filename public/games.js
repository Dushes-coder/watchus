// games.js - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
function loadGameModules() {
    return new Promise((resolve, reject) => {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        const modules = [
            './js/modules/legacy/legacy-functions.js',
            './js/modules/index.js'
        ];

        let loadedCount = 0;
        const totalModules = modules.length;

        function loadModule(src) {
            const script = document.createElement('script');
            script.src = src;

            // Legacy functions –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞–∫ –º–æ–¥—É–ª–∏
            if (src.includes('legacy-functions.js')) {
                // –û–±—ã—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è legacy —Ñ—É–Ω–∫—Ü–∏–π
            } else {
                script.type = 'module';
            }

            script.onload = () => {
                loadedCount++;
                console.log(`Loaded module ${loadedCount}/${totalModules}: ${src}`);
                if (loadedCount === totalModules) {
                    console.log('All game modules loaded successfully!');

                    // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
                    overrideLegacyFunctions();

                    resolve();
                }
            };
            script.onerror = (e) => {
                console.error('Failed to load module:', src, e);
                reject(new Error(`Failed to load ${src}`));
            };
            document.head.appendChild(script);
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        modules.forEach(loadModule);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π
loadGameModules().then(() => {
    console.log('üéÆ Game system initialized successfully');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    if (window.initializeGameSystem) {
        window.initializeGameSystem();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–≥—Ä—ã
    initializeGameInvitations();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ gameManager –¥–æ—Å—Ç—É–ø–µ–Ω
    console.log('GameManager available:', !!window.gameManager);
    console.log('TicTacToeGame available:', !!window.TicTacToeGame);
}).catch((error) => {
    console.error('Failed to load game modules:', error);
});

// –§—É–Ω–∫—Ü–∏–∏-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
function initializeGameInvitations() {
    if (!window.socket) return;

    console.log('üéÆ Initializing game invitations...');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    window.socket.on('game-state', (data) => {
        console.log('üéØ Game state update received:', data);
        handleGameStateUpdate(data);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    window.socket.on('invitation-declined', (data) => {
        console.log('‚ùå Invitation declined by:', data.playerId);
        showNotification('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', 'warning');
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    window.socket.on('game-invitation-response', (data) => {
        console.log('üì¨ Game invitation response:', data);
        handleInvitationResponse(data);
    });

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è: game-started, game-ended

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    window.socket.on('game-started', (data) => {
        console.log('üéÆ Game started event received:', data);
        // –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É –ø–æ–≤—Ç–æ—Ä–Ω–æ, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞
        // –î–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å –±–æ—Ç–æ–º - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if (!window.gameManager?.currentGame || window.gameManager.currentGame.gameType !== data.gameType) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ª–æ–∫–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º
            console.log('Ignoring game-started for local bot game');
        } else {
            console.log('Game already active, just updating state for network games');
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä
            if (window.gameManager?.currentGame?.currentOpponent?.type === 'player') {
                // –î–ª—è game-started —Å–æ–±—ã—Ç–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º data –≤ handleNetworkMove,
                // —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω–æ–≥–æ gameState
                console.log('Game-started event received, waiting for game-state event');
            }
        }
    });

    console.log('‚úÖ Game invitations initialized');
}

function handleGameStateUpdate(data) {
    console.log('üéØ FULL GAME STATE UPDATE:', data);

    const currentGame = window.gameManager?.currentGame;

    if (data.gameType === 'tictactoe') {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–µ—Å—Ç–∏–∫–æ–≤-–Ω–æ–ª–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä
        console.log('Updating TicTacToe state, currentGame exists:', !!(window.gameManager && window.gameManager.currentGame));
        console.log('Current game type:', window.gameManager?.currentGame?.gameType);
        console.log('Current opponent type:', window.gameManager?.currentGame?.currentOpponent?.type);
        console.log('Game state data received:', data);
        console.log('Current local game state:', window.gameManager?.currentGame?.gameState);
        
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º game-state –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä —Å –±–æ—Ç–æ–º
        if (window.gameManager?.currentGame?.currentOpponent?.type === 'bot') {
            console.log('Ignoring game-state update for local bot game');
            return;
        }
        
        if (window.gameManager && window.gameManager.currentGame &&
            window.gameManager.currentGame.gameType === 'tictactoe') {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ö–æ–¥–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            if (window.gameManager.currentGame.gameState) {
                window.gameManager.currentGame.gameState.waitingForMove = false;
            }
            
            const oldState = window.gameManager.currentGame.gameState;
            const preservedPlayers = oldState.players;
            const mergedState = { ...oldState, ...data };

            if (data.players) {
                mergedState.players = data.players;
            } else if (!mergedState.players && preservedPlayers) {
                mergedState.players = preservedPlayers;
            }

            window.gameManager.currentGame.gameState = mergedState;
            console.log('Updated TicTacToe state from:', oldState, 'to:', mergedState);

            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –∏–≥—Ä–æ–∫–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            window.gameManager.currentGame.setupPlayerSymbols();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
            if (window.gameManager.currentGame.gameState.gameOver) {
                const winner = window.gameManager.currentGame.gameState.winner;
                const mySymbol = window.gameManager.currentGame.mySymbol;
                
                let message, type;
                if (winner === 'draw') {
                    message = 'ü§ù –ù–∏—á—å—è!';
                    type = 'info';
                } else if (winner === mySymbol) {
                    message = 'üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!';
                    type = 'success';
                } else {
                    message = 'üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!';
                    type = 'warning';
                }
                
                console.log('Game ended with result:', { winner, mySymbol, message });
                if (window.showNotification) {
                    window.showNotification(message, type);
                }
            }

            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–æ—Å–∫—É
            console.log('Calling render on TicTacToe game');
            window.gameManager.currentGame.render();
            console.log('TicTacToe render completed');
        } else {
            console.warn('No TicTacToe game to update or wrong game type');
        }

        return;
    }

    if (data.gameType === 'chess') {
        if (currentGame?.gameType === 'chess' && currentGame?.isNetworkGame) {
            console.log('Passing chess state to current network game');
            currentGame.handleNetworkMove(data);
        } else {
            console.warn('Received chess state update but no active chess network game');
        }
        return;
    }

    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä –ø–µ—Ä–µ–¥–∞–µ–º gameState –≤ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
    if (currentGame?.gameType !== 'tictactoe' &&
        (currentGame?.isNetworkGame ||
         (currentGame?.currentOpponent?.type === 'player' &&
          (data.gameType === 'durak' || data.gameType === 'poker')))) {
        console.log('Passing gameState to current network game');
        currentGame.handleNetworkMove(data);
        return;
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
function showOpponentSelector(gameType) {
    console.log('showOpponentSelector called with:', gameType);
    console.log('Current game state - currentGame:', window.currentGame);

    const modal = document.createElement('div');
    modal.className = 'modal-overlay opponent-selector';
    modal.setAttribute('aria-hidden', 'false');
    modal.style.display = 'flex';
    console.log('Modal element created');

    let gameIcon = '';
    let gameName = '';
    let botName = '';
    let botDescription = '';
    let botEmoji = 'ü§ñ';

    // –î–ª—è –≤—Å–µ—Ö –∏–≥—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
    switch (gameType) {
        case 'chess':
            gameIcon = '‚ôüÔ∏è';
            gameName = '–®–∞—Ö–º–∞—Ç—ã';
            botName = '–®–∞—Ö–º–∞—Ç–Ω—ã–π –±–æ—Ç';
            botDescription = '–£–º–Ω—ã–π —à–∞—Ö–º–∞—Ç–Ω—ã–π —Å–æ–ø–µ—Ä–Ω–∏–∫';
            botEmoji = '‚ôüÔ∏è';
            break;
        case 'tictactoe':
            gameIcon = '‚≠ï';
            gameName = '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏';
            botName = '–ë–æ—Ç';
            botDescription = '–û–ø—ã—Ç–Ω—ã–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏';
            botEmoji = '‚≠ï';
            break;
        case 'poker':
            gameIcon = 'üÉè';
            gameName = '–ü–æ–∫–µ—Ä';
            botName = '–ü–æ–∫–µ—Ä–Ω—ã–π –±–æ—Ç';
            botDescription = '–£–º–Ω—ã–π –ø–æ–∫–µ—Ä–Ω—ã–π —Å–æ–ø–µ—Ä–Ω–∏–∫';
            botEmoji = 'üÉè';
            break;
        case 'durak':
            gameIcon = 'üé¥';
            gameName = '–î—É—Ä–∞–∫';
            botName = '–ö–∞—Ä—Ç–æ—á–Ω—ã–π –±–æ—Ç';
            botDescription = '–û–ø—ã—Ç–Ω—ã–π –∏–≥—Ä–æ–∫ –≤ –∫–∞—Ä—Ç—ã';
            botEmoji = 'üé¥';
            break;
    }

    let html = '<div class="modal-content opponent-modal">';
    html += '<div class="modal-header">';
    html += '<h3>' + gameIcon + ' –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –¥–ª—è ' + gameName + '</h3>';
    html += '<button class="secondary icon-btn" onclick="closeOpponentSelector()">‚úï</button>';
    html += '</div>';

    html += '<div class="opponent-sections">';

    // –°–µ–∫—Ü–∏—è —Å –±–æ—Ç–æ–º
    html += '<div class="opponent-section">';
    html += '<h4>' + botEmoji + ' –ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º</h4>';
    html += '<div class="bot-options">';
    html += '<div class="opponent-option bot-option" onclick="selectBot(\'' + gameType + '\')">';
    html += '<div class="opponent-avatar">' + botEmoji + '</div>';
    html += '<div class="opponent-info">';
    html += '<div class="opponent-name">' + botName + '</div>';
    html += '<div class="opponent-status">' + botDescription + '</div>';
    html += '</div>';
    html += '</div>';
    html += '</div>';
    html += '</div>';

    // –°–µ–∫—Ü–∏—è —Å –∏–≥—Ä–æ–∫–∞–º–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ
    html += '<div class="opponent-section">';
    html += '<h4>üë• –ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ</h4>';
    html += '<div class="opponent-list">';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏
    const otherPlayers = window.roomPlayers ? window.roomPlayers.filter(p => p.id !== (window.socket?.id || 'self')) : [];

    if (otherPlayers.length > 0) {
        otherPlayers.forEach(player => {
            const isInGame = false; // TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ –∏–≥—Ä–µ
            html += '<div class="opponent-option player-option ' + (isInGame ? 'busy' : 'available') + '" onclick="invitePlayer(\'' + player.id + '\', \'' + gameType + '\')">';
            html += '<div class="opponent-avatar">' + (player.emoji || 'üë§') + '</div>';
            html += '<div class="opponent-info">';
            html += '<div class="opponent-name">' + (player.name || '–ò–≥—Ä–æ–∫') + '</div>';
            html += '<div class="opponent-status">' + (isInGame ? '–í –∏–≥—Ä–µ' : '–ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ') + '</div>';
            html += '</div>';
            html += '<div class="opponent-status-indicator ' + (isInGame ? 'busy' : 'online') + '"></div>';
            html += '</div>';
        });
    } else {
        html += '<div class="no-players">';
        html += '<div class="no-players-icon">üë§‚ùì</div>';
        html += '<div class="no-players-text">–í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤</div>';
        html += '<div class="no-players-subtext">–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏–ª–∏ –∏–≥—Ä–∞–π—Ç–µ —Å –±–æ—Ç–æ–º!</div>';
        html += '</div>';
    }

    html += '</div>';
    html += '</div>';

    html += '</div>'; // –ó–∞–∫—Ä—ã–≤–∞–µ–º opponent-sections
    html += '</div>';

    modal.innerHTML = html;
    document.body.appendChild(modal);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        modal.style.opacity = '1';
        modal.querySelector('.modal-content').style.transform = 'scale(1)';
    }, 10);
}

function closeOpponentSelector() {
    const modal = document.querySelector('.opponent-selector');
    if (modal) {
        modal.style.opacity = '0';
        modal.querySelector('.modal-content').style.transform = 'scale(0.8)';
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
}

function selectBot(gameType) {
    let botName = '';
    let botEmoji = 'ü§ñ';

    switch (gameType) {
        case 'chess':
            botName = '–®–∞—Ö–º–∞—Ç–Ω—ã–π –±–æ—Ç';
            botEmoji = '‚ôüÔ∏è';
            break;
        case 'tictactoe':
            botName = '–ë–æ—Ç';
            botEmoji = '‚≠ï';
            break;
        case 'poker':
            botName = '–ü–æ–∫–µ—Ä–Ω—ã–π –±–æ—Ç';
            botEmoji = 'üÉè';
            break;
        case 'cards':
            botName = '–ö–∞—Ä—Ç–æ—á–Ω—ã–π –±–æ—Ç';
            botEmoji = 'üÉè';
            break;
        default:
            botName = '–ë–æ—Ç';
            botEmoji = 'ü§ñ';
    }

    window.currentOpponent = {
        type: 'bot',
        name: botName,
        emoji: botEmoji
    };

    closeOpponentSelector();
    startGameWithOpponent(gameType);
}

function invitePlayer(playerId, gameType) {
    if (window.socket && window.roomId) {
        window.socket.emit('send-game-invitation', {
            roomId: window.roomId,
            targetPlayerId: playerId,
            gameType: gameType,
            senderName: window.userEmoji || '–ò–≥—Ä–æ–∫'
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        showNotification('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...', 'info');
        closeOpponentSelector();
    }
}

function handleInvitationResponse(data) {
    console.log('üéâ HANDLING invitation response:', data);
    if (data.accepted) {
        console.log('‚úÖ Invitation ACCEPTED');
        const opponent = window.roomPlayers.find(p => p.id === data.responderId);
        window.currentOpponent = {
            type: 'player',
            id: data.responderId,
            name: opponent?.name || '–ò–≥—Ä–æ–∫',
            emoji: opponent?.emoji || 'üë§'
        };

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        console.log('üöÄ Starting game for invitation sender');
        startGameWithOpponent(data.gameType);

        showNotification('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É.', 'success');
    } else {
        console.log('‚ùå Invitation DECLINED');
        showNotification('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.', 'warning');
    }
}

function startGameWithOpponent(gameType) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–∫—Ä—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é
    try { localStorage.removeItem('wt_active_game_closed'); } catch (e) { }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ –∏–≥—Ä–∞ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
    if (window.gameManager?.isGameActive() && window.gameManager.currentGame?.gameType === gameType) {
        console.log('Game already started, skipping startGameWithOpponent');
        return;
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    closeOpponentSelector();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–≥—Ä—ã
    const panel = document.getElementById('activeGamePanel');
    if (!panel) return;
    const icon = document.getElementById('activeGameIcon');
    const title = document.getElementById('activeGameTitle');
    if (icon && title) {
        if (gameType === 'chess') { icon.textContent = '‚ôüÔ∏è'; title.textContent = '–®–∞—Ö–º–∞—Ç—ã'; }
        else if (gameType === 'tictactoe') { icon.textContent = '‚≠ï'; title.textContent = '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏'; }
        else if (gameType === 'cards') { icon.textContent = 'üÉè'; title.textContent = '–ö–∞—Ä—Ç—ã'; }
    }
    panel.classList.remove('hidden');
    panel.style.display = ''; // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
    panel.scrollIntoView({ behavior: 'smooth', block: 'nearest' });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    switch (gameType) {
        case 'chess':
            if (window.initNetworkChess) window.initNetworkChess();
            break;
        case 'tictactoe':
            if (window.initNetworkTicTacToe) window.initNetworkTicTacToe();
            break;
        case 'poker':
            if (window.selectPoker) window.selectPoker();
            break;
        case 'durak':
            if (window.selectDurak) window.selectDurak();
            break;
        case 'cards':
            initCards();
            break;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –¥—É—Ä–∞–∫
function selectDurak() {
    console.log('selectDurak called');

    // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é
    if (window.gameManager.isGameActive() && window.gameManager.currentGame && window.gameManager.currentGame.gameType === 'durak') {
        console.log('Network durak game already active, not starting new one');
        return;
    }

    // –ï—Å–ª–∏ –∏–≥—Ä–∞–µ–º —Å –±–æ—Ç–æ–º –∏–ª–∏ –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ, –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∏–≥—Ä—É
    if (window.currentOpponent?.type === 'bot' || !window.roomId) {
        console.log('Starting local durak game');
        if (window.gameManager) {
            window.gameManager.startGame('durak');
        } else {
            console.error('GameManager not available for durak');
        }
        return;
    }

    console.log('Starting network durak game');
    if (window.gameManager) {
        window.gameManager.startGame('durak');
    } else {
        console.error('GameManager not available for durak network game');
    }
}

function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;

    document.body.appendChild(notification);

    setTimeout(() => {
        notification.classList.add('show');
    }, 10);

    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 3000);
}

function updateParticipantsList() {
    const participantsList = document.getElementById('participantsList');
    const participantCount = document.getElementById('participantCount');

    if (!participantsList || !participantCount) return;

    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
    participantsList.innerHTML = '';

    if (!window.roomPlayers || window.roomPlayers.length === 0) {
        // –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participantsList.innerHTML = `
            <div class="no-participants">
                <div class="no-participants-icon">üë§</div>
                <div class="no-participants-text">–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</div>
            </div>
        `;
        if (participantCount) participantCount.textContent = '(0)';
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (participantCount) {
        participantCount.textContent = `(${window.roomPlayers.length})`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    window.roomPlayers.forEach(player => {
        const participantDiv = document.createElement('div');
        participantDiv.className = 'participant-item';

        participantDiv.innerHTML = `
            <div class="participant-avatar">${player.emoji || 'üë§'}</div>
            <div class="participant-info">
                <div class="participant-name">${player.name || '–ò–≥—Ä–æ–∫'}</div>
                <div class="participant-status">${player.id === window.socket?.id ? '–í—ã' : '–í —Å–µ—Ç–∏'}</div>
            </div>
        `;

        participantsList.appendChild(participantDiv);
    });
}

// Game Functions
function openGame(game) {
    console.log('openGame called with:', game);

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ, –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    if (window.roomId && window.socket) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ (–∏—Å–∫–ª—é—á–∞—è —Å–µ–±—è)
        const otherPlayers = window.roomPlayers.filter(p => p.id !== (window.socket?.id || 'self'));

        if (otherPlayers.length === 0) {
            // –í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –±–æ—Ç–∞
            console.log('No other players in room, auto-selecting bot');
            window.currentOpponent = { type: 'bot', name: '–ë–æ—Ç', emoji: 'ü§ñ' };
            showNotification('–í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤. –ò–≥—Ä–∞–µ–º —Å –±–æ—Ç–æ–º! ü§ñ', 'info');
            startGameDirectly(game);
            return;
        } else {
            // –í –∫–æ–º–Ω–∞—Ç–µ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
            console.log('Other players found in room, showing opponent selector');
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
            updateRoomPlayers();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
            setTimeout(() => {
                showOpponentSelector(game);
            }, 100);
            return;
        }
    }

    // –ï—Å–ª–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –Ω–∞–ø—Ä—è–º—É—é
    if (window.currentOpponent) {
        startGameDirectly(game);
        return;
    }

    // –ï—Å–ª–∏ –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞—Ç—å –±–æ—Ç–∞
    if (!window.roomId || !window.socket) {
        console.log('Not in room, auto-selecting bot');
        window.currentOpponent = { type: 'bot', name: '–ë–æ—Ç', emoji: 'ü§ñ' };
        startGameDirectly(game);
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
    updateRoomPlayers();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
    setTimeout(() => {
        showOpponentSelector(game);
    }, 100);
}

function startNetworkGame(game) {
    console.log('Starting network game:', game);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–∫—Ä—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é
    try { localStorage.removeItem('wt_active_game_closed'); } catch (e) { }

    window.currentGame = game;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    window.gameState = {
        gameType: game,
        players: [],
        currentPlayer: 0,
        gameStarted: false
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ
    if (window.socket && window.roomId) {
        window.socket.emit('start-game', {
            roomId: window.roomId,
            gameType: game
        });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–≥—Ä—ã
    const panel = document.getElementById('activeGamePanel');
    if (panel) {
        const icon = document.getElementById('activeGameIcon');
        const title = document.getElementById('activeGameTitle');
        if (icon && title) {
            if (game === 'chess') { icon.textContent = '‚ôüÔ∏è'; title.textContent = '–®–∞—Ö–º–∞—Ç—ã (—Å–µ—Ç–µ–≤–∞—è)'; }
            else if (game === 'tictactoe') { icon.textContent = '‚≠ï'; title.textContent = '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ (—Å–µ—Ç–µ–≤–∞—è)'; }
            else if (game === 'cards') { icon.textContent = 'üÉè'; title.textContent = '–ö–∞—Ä—Ç—ã (—Å–µ—Ç–µ–≤–∞—è)'; }
        }
        panel.classList.remove('hidden');
        panel.style.display = ''; // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        panel.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
    const container = document.getElementById('gameContainer');
    if (container) {
        container.innerHTML = `
            <div class="game-waiting">
                <h3>–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...</h3>
                <p>–î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ —Å–º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ</p>
                <div class="game-controls">
                    <button onclick="closeGame()">–û—Ç–º–µ–Ω–∞</button>
                </div>
            </div>
        `;
    }
}

function startGameDirectly(game) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–∫—Ä—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é
    try { localStorage.removeItem('wt_active_game_closed'); } catch (e) {}

    window.currentGame = game;
    const panel = document.getElementById('activeGamePanel');
    if (!panel) return;
    const icon = document.getElementById('activeGameIcon');
    const title = document.getElementById('activeGameTitle');
    if (icon && title) {
        if (game === 'chess') { icon.textContent = '‚ôüÔ∏è'; title.textContent = '–®–∞—Ö–º–∞—Ç—ã'; }
        else if (game === 'tictactoe') { icon.textContent = '‚≠ï'; title.textContent = '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏'; }
        else if (game === 'cards') { icon.textContent = 'üÉè'; title.textContent = '–ö–∞—Ä—Ç—ã'; }
    }
    panel.classList.remove('hidden');
    panel.style.display = ''; // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
    panel.scrollIntoView({ behavior: 'smooth', block: 'nearest' });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
    const activeGameContent = document.getElementById('activeGameContent');
    if (activeGameContent) {
        activeGameContent.style.display = ''; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    if (window.socket && window.roomId && window.currentOpponent?.type === 'player') {
        window.socket.emit('game-start', {
            roomId: window.roomId,
            gameType: game,
            opponentId: window.currentOpponent.id
        });
    } else {
        // –ï—Å–ª–∏ –∏–≥—Ä–∞–µ–º —Å –±–æ—Ç–æ–º –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        console.log('startGameDirectly: starting local game via gameManager');
        const startedGame = window.gameManager?.startGame(game);
        console.log('gameManager.startGame result:', startedGame);
        if (!startedGame) {
            console.error('Failed to start game via gameManager!');
        }
    }
}

function closeGame() {
    console.log('closeGame() called - closing active game');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É
    try { localStorage.setItem('wt_active_game_closed', 'true'); } catch (e) { }

    // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
    const panel = document.getElementById('activeGamePanel');
    if (panel) {
        console.log('Hiding active game panel');
        panel.classList.add('hidden');
        panel.style.display = 'none'; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è
    } else {
        console.log('Active game panel not found');
    }

    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    window.gameState = null;
    window.currentOpponent = null;
    window.currentGame = null;

    // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
    const activeGameContent = document.getElementById('activeGameContent');
    if (activeGameContent) {
        console.log('Clearing active game content');
        activeGameContent.innerHTML = '';
        activeGameContent.style.display = 'none'; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è
    }

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ GameManager
    if (window.gameManager) {
        window.gameManager.closeCurrentGame();
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∏–≥—Ä –≤ gameContainer
    const container = document.getElementById('gameContainer');
    if (container) {
        console.log('Restoring game menu');
        container.style.display = ''; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.innerHTML = `
            <h2> üéÆ –ò–≥—Ä—ã</h2>
            <p>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞:</p>

            <div class="games-grid">
                <div class="game-card" onclick="openGame('tictactoe')">
                    <div class="game-icon">‚≠ï</div>
                    <div class="game-title">–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏</div>
                    <div class="game-description">–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ 3x3</div>
                </div>

                <div class="game-card" onclick="openGame('chess')">
                    <div class="game-icon">‚ôüÔ∏è</div>
                    <div class="game-title">–®–∞—Ö–º–∞—Ç—ã</div>
                    <div class="game-description">–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∞—è –∏–≥—Ä–∞</div>
                </div>

                <div class="game-card" onclick="openGame('poker')">
                    <div class="game-icon">üÉè</div>
                    <div class="game-title">–ü–æ–∫–µ—Ä</div>
                    <div class="game-description">–ò–≥—Ä–∞ –Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ 5 –∫–∞—Ä—Ç</div>
                </div>

                <div class="game-card" onclick="openGame('durak')">
                    <div class="game-icon">üé¥</div>
                    <div class="game-title">–î—É—Ä–∞–∫</div>
                    <div class="game-description">–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ä—É—Å—Å–∫–∞—è –∫–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞</div>
                </div>
            </div>
        `;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–≥—Ä
    const gamesPanel = document.getElementById('gamesPanel');
    if (gamesPanel) {
        console.log('Showing games panel');
        gamesPanel.classList.remove('collapsed');
        gamesPanel.style.display = ''; // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–≥—Ä
    const gameContainer = document.getElementById('gameContainer');
    if (gameContainer) {
        console.log('Showing game container');
        gameContainer.style.display = ''; // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    }

    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –±—ã–ª–∞ —Å–µ—Ç–µ–≤–æ–π, —É–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä
    if (window.socket && window.roomId) {
        console.log('Notifying server about game end');
        window.socket.emit('leave-game', { roomId: window.roomId });
    }

    console.log('Game closed successfully');
}

// –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä, –µ—Å–ª–∏ –º–æ–¥—É–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
function initSimpleChess() {
    console.log('Initializing full chess game');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!window.currentOpponent) {
        window.currentOpponent = { type: 'bot', name: '–®–∞—Ö–º–∞—Ç–Ω—ã–π –±–æ—Ç', emoji: '‚ôüÔ∏è' };
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–≥—Ä—ã
    const panel = document.getElementById('activeGamePanel');
    if (panel) {
        document.getElementById('activeGameTitle').textContent = '–®–∞—Ö–º–∞—Ç—ã';
        document.getElementById('activeGameIcon').textContent = '‚ôüÔ∏è';
        panel.classList.remove('hidden');
        panel.style.display = ''; // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        panel.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }

    const container = document.getElementById('activeGameContent');
    if (container) {
        // –°–æ–∑–¥–∞–µ–º —à–∞—Ö–º–∞—Ç–Ω—É—é –¥–æ—Å–∫—É —Å Unicode —Ñ–∏–≥—É—Ä–∞–º–∏
        let html = '<div class="chess-status">–í–∞—à —Ö–æ–¥ (–±–µ–ª—ã–µ —Ñ–∏–≥—É—Ä—ã)</div>';
        html += '<div class="chess-board">';

        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä—ã
        window.chessGame = new ChessGame();

        for (let row = 0; row < 8; row++) {
            for (let col = 0; col < 8; col++) {
                const isLight = (row + col) % 2 === 0;
                const cellClass = isLight ? 'light' : 'dark';
                const piece = window.chessGame.board[row][col] || '';
                html += `<div class="chess-cell ${cellClass}" data-row="${row}" data-col="${col}">${piece}</div>`;
            }
        }
        html += '</div>';
        html += '<div class="chess-info">';
        html += '<div class="chess-moves">–•–æ–¥—ã: 0</div>';
        html += '<div class="chess-status-text">–•–æ–¥ –±–µ–ª—ã—Ö</div>';
        html += '</div>';
        html += '<div class="game-controls"><button onclick="closeGame()">–ó–∞–∫—Ä—ã—Ç—å</button></div>';

        container.innerHTML = html;
        container.style.display = 'block';

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
        container.querySelectorAll('.chess-cell').forEach(cell => {
            cell.addEventListener('click', () => {
                const row = parseInt(cell.dataset.row);
                const col = parseInt(cell.dataset.col);
                handleChessClick(row, col);
            });
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        updateChessStatus();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–µ
function handleChessClick(row, col) {
    if (!window.chessGame) return;

    const piece = window.chessGame.board[row][col];
    const pieceColor = window.chessGame.getPieceColor(piece);

    // –ï—Å–ª–∏ —Ñ–∏–≥—É—Ä–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
    if (!window.chessGame.selectedSquare) {
        // –í—ã–±–∏—Ä–∞–µ–º —Ñ–∏–≥—É—Ä—É —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        if (piece && pieceColor === window.chessGame.currentPlayer) {
            window.chessGame.selectedSquare = { row, col };
            updateChessBoard();
            highlightPossibleMoves(row, col);
        }
        return;
    }

    const selected = window.chessGame.selectedSquare;

    // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Ç—É –∂–µ –∫–ª–µ—Ç–∫—É - —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    if (selected.row === row && selected.col === col) {
        window.chessGame.selectedSquare = null;
        updateChessBoard();
        return;
    }

    // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Å–≤–æ—é —Ñ–∏–≥—É—Ä—É - –≤—ã–±–∏—Ä–∞–µ–º –µ—ë
    if (piece && pieceColor === window.chessGame.currentPlayer) {
        window.chessGame.selectedSquare = { row, col };
        updateChessBoard();
        highlightPossibleMoves(row, col);
        return;
    }

    // –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
    if (window.chessGame.makeMove(selected.row, selected.col, row, col)) {
        window.chessGame.selectedSquare = null;
        updateChessBoard();
        updateChessStatus();

        // –•–æ–¥ –ò–ò
        if (window.currentOpponent?.type === 'bot' && window.chessGame.currentPlayer === 'black' && window.chessGame.gameStatus === 'playing') {
            setTimeout(() => {
                makeChessAIMove();
            }, 1000);
        }
    } else {
        // –ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π —Ö–æ–¥ - —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        window.chessGame.selectedSquare = null;
        updateChessBoard();
    }
}

// –•–æ–¥ —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ –ò–ò
function makeChessAIMove() {
    if (!window.chessGame || window.chessGame.gameStatus !== 'playing') return;

    const bestMove = window.chessGame.findBestMove(2); // –ì–ª—É–±–∏–Ω–∞ 2 –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞

    if (bestMove) {
        window.chessGame.makeMove(bestMove.fromRow, bestMove.fromCol, bestMove.toRow, bestMove.toCol);
        updateChessBoard();
        updateChessStatus();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏
function updateChessBoard() {
    if (!window.chessGame) return;

    for (let row = 0; row < 8; row++) {
        for (let col = 0; col < 8; col++) {
            const cell = document.querySelector(`.chess-cell[data-row="${row}"][data-col="${col}"]`);
            if (cell) {
                const piece = window.chessGame.board[row][col] || '';

                // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã
                cell.className = cell.className.replace(/selected|valid-move|last-move/g, '');
                cell.classList.remove('selected', 'valid-move', 'last-move');

                // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∫–ª–µ—Ç–∫–∏
                const isLight = (row + col) % 2 === 0;
                cell.classList.add(isLight ? 'light' : 'dark');

                // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–ª–µ—Ç–∫–∏
                if (window.chessGame.selectedSquare &&
                    window.chessGame.selectedSquare.row === row &&
                    window.chessGame.selectedSquare.col === col) {
                    cell.classList.add('selected');
                }

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É
                cell.textContent = piece;
            }
        }
    }
}

// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤
function highlightPossibleMoves(row, col) {
    if (!window.chessGame) return;

    const moves = window.chessGame.getPossibleMoves(row, col);

    moves.forEach(move => {
        const cell = document.querySelector(`.chess-cell[data-row="${move.row}"][data-col="${move.col}"]`);
        if (cell) {
            cell.classList.add('valid-move');
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —à–∞—Ö–º–∞—Ç
function updateChessStatus() {
    if (!window.chessGame) return;

    const statusEl = document.querySelector('.chess-status');
    const movesEl = document.querySelector('.chess-moves');
    const statusTextEl = document.querySelector('.chess-status-text');

    if (statusEl) {
        statusEl.textContent = window.chessGame.getGameStatusText();
    }

    if (movesEl) {
        movesEl.textContent = `–•–æ–¥—ã: ${window.chessGame.moveHistory.length}`;
    }

    if (statusTextEl) {
        if (window.chessGame.gameStatus === 'checkmate' || window.chessGame.gameStatus === 'stalemate') {
            statusTextEl.textContent = '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞';
            statusTextEl.style.color = '#dc3545';
        } else if (window.chessGame.gameStatus === 'check') {
            statusTextEl.textContent = '–®–∞—Ö!';
            statusTextEl.style.color = '#ffc107';
        } else {
            statusTextEl.textContent = `–•–æ–¥ ${window.chessGame.currentPlayer === 'white' ? '–±–µ–ª—ã—Ö' : '—á–µ—Ä–Ω—ã—Ö'}`;
            statusTextEl.style.color = '';
        }
    }
}

function initSimpleTicTacToe() {
    console.log('Initializing simple tic-tac-toe game');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!window.currentOpponent) {
        window.currentOpponent = { type: 'bot', name: '–ë–æ—Ç', emoji: '‚≠ï' };
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–≥—Ä—ã
    const panel = document.getElementById('activeGamePanel');
    if (panel) {
        document.getElementById('activeGameTitle').textContent = '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏';
        document.getElementById('activeGameIcon').textContent = '‚≠ï';
        panel.classList.remove('hidden');
        panel.style.display = ''; // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        panel.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }

    const container = document.getElementById('activeGameContent');
    if (container) {
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        const opponentEmoji = window.currentOpponent?.emoji || 'ü§ñ';
        const opponentName = window.currentOpponent?.name || '–ë–æ—Ç';

        let html = '<div class="tic-tac-toe-container">';
        html += '<div class="tic-tac-toe-header">';
        html += '<div class="tic-tac-toe-title"><span class="ttt-icon">‚≠ï</span>–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏</div>';
        html += '<div class="tic-tac-toe-status">–í–∞—à —Ö–æ–¥</div>';
        html += '</div>';

        html += '<div class="tic-tac-toe-meta">';
        html += '<div class="ttt-badge player active"><span>‚≠ê</span>–í—ã (X)</div>';
        html += `<div class="ttt-badge opponent"><span>${opponentEmoji}</span>${opponentName}</div>`;
        html += '</div>';

        html += '<div class="tic-tac-toe-board">';
        for (let row = 0; row < 3; row++) {
            for (let col = 0; col < 3; col++) {
                html += `<div class="cell" data-row="${row}" data-col="${col}" onclick="window.handleSimpleTicTacToeClick(${row}, ${col})"></div>`;
            }
        }
        html += '</div>';

        html += '<div class="tic-tac-toe-actions">';
        html += '<button class="secondary" onclick="closeGame()">–ó–∞–∫—Ä—ã—Ç—å</button>';
        html += '</div>';

        html += '</div>';

        container.innerHTML = html;
        container.style.display = 'block';

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        window.gameState = {
            board: Array(3).fill().map(() => Array(3).fill('')),
            currentPlayer: 'X',
            gameOver: false,
            winner: null
        };
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function createInitialChessBoard() {
    const board = Array(8).fill().map(() => Array(8).fill(''));
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ Unicode —Å–∏–º–≤–æ–ª–∞–º–∏
    const blackPieces = ['‚ôú', '‚ôû', '‚ôù', '‚ôõ', '‚ôö', '‚ôù', '‚ôû', '‚ôú'];
    const whitePieces = ['‚ôñ', '‚ôò', '‚ôó', '‚ôï', '‚ôî', '‚ôó', '‚ôò', '‚ôñ'];

    for (let i = 0; i < 8; i++) {
        board[1][i] = '‚ôüÔ∏è'; // –ß–µ—Ä–Ω—ã–µ –ø–µ—à–∫–∏
        board[6][i] = '‚ôô'; // –ë–µ–ª—ã–µ –ø–µ—à–∫–∏
        board[0][i] = blackPieces[i]; // –ß–µ—Ä–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã
        board[7][i] = whitePieces[i]; // –ë–µ–ª—ã–µ —Ñ–∏–≥—É—Ä—ã
    }
    return board;
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å ASCII —Å–∏–º–≤–æ–ª–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function createSimpleChessBoard() {
    const board = Array(8).fill().map(() => Array(8).fill(''));
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ ASCII —Å–∏–º–≤–æ–ª—ã –≤–º–µ—Å—Ç–æ Unicode
    const blackPieces = ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'];
    const whitePieces = ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'];

    for (let i = 0; i < 8; i++) {
        board[1][i] = 'p'; // –ß–µ—Ä–Ω—ã–µ –ø–µ—à–∫–∏
        board[6][i] = 'P'; // –ë–µ–ª—ã–µ –ø–µ—à–∫–∏
        board[0][i] = blackPieces[i]; // –ß–µ—Ä–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã
        board[7][i] = whitePieces[i]; // –ë–µ–ª—ã–µ —Ñ–∏–≥—É—Ä—ã
    }
    return board;
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ –∫—Ä–µ—Å—Ç–∏–∫–∞–º-–Ω–æ–ª–∏–∫–∞–º
window.handleSimpleTicTacToeClick = function(row, col) {
    if (window.gameState.gameOver || window.gameState.board[row][col] !== '') {
        return;
    }

    // –î–µ–ª–∞–µ–º —Ö–æ–¥
    window.gameState.board[row][col] = window.gameState.currentPlayer;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if (checkSimpleWinner(window.gameState.currentPlayer)) {
        window.gameState.gameOver = true;
        window.gameState.winner = window.gameState.currentPlayer;
        updateSimpleTicTacToeDisplay(`–ò–≥—Ä–æ–∫ ${window.gameState.currentPlayer} –ø–æ–±–µ–¥–∏–ª!`);
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏—á—å—é
    if (window.gameState.board.flat().every(cell => cell !== '')) {
        window.gameState.gameOver = true;
        window.gameState.winner = 'draw';
        updateSimpleTicTacToeDisplay('–ù–∏—á—å—è!');
        return;
    }

    // –ú–µ–Ω—è–µ–º –∏–≥—Ä–æ–∫–∞
    window.gameState.currentPlayer = window.gameState.currentPlayer === 'X' ? 'O' : 'X';
    updateSimpleTicTacToeDisplay(window.gameState.currentPlayer === 'X' ? '–í–∞—à —Ö–æ–¥' : '–•–æ–¥ –±–æ—Ç–∞');

    // –•–æ–¥ –±–æ—Ç–∞
    if (window.currentOpponent?.type === 'bot' && window.gameState.currentPlayer === 'O' && !window.gameState.gameOver) {
        setTimeout(() => {
            makeSimpleBotMove();
        }, 500);
    }
};

function updateSimpleTicTacToeDisplay(message) {
    const statusEl = document.querySelector('.tic-tac-toe-status');
    if (statusEl) {
        statusEl.textContent = message;
    }

    const playerBadge = document.querySelector('.ttt-badge.player');
    const opponentBadge = document.querySelector('.ttt-badge.opponent');

    if (playerBadge && opponentBadge) {
        playerBadge.classList.remove('active', 'winner', 'draw');
        opponentBadge.classList.remove('active', 'winner', 'draw');

        if (window.gameState.gameOver) {
            const winner = window.gameState.winner;
            if (winner === 'X') {
                playerBadge.classList.add('winner');
            } else if (winner === 'O') {
                opponentBadge.classList.add('winner');
            } else {
                playerBadge.classList.add('draw');
                opponentBadge.classList.add('draw');
            }
        } else {
            const isPlayerTurn = window.gameState.currentPlayer === 'X';
            if (isPlayerTurn) {
                playerBadge.classList.add('active');
            } else {
                opponentBadge.classList.add('active');
            }
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å–∫–∏
    for (let row = 0; row < 3; row++) {
        for (let col = 0; col < 3; col++) {
            const cell = document.querySelector(`.cell[data-row="${row}"][data-col="${col}"]`);
            if (cell) {
                cell.textContent = window.gameState.board[row][col];
                cell.className = `cell ${window.gameState.board[row][col].toLowerCase()}`;
            }
        }
    }
}

function checkSimpleWinner(player) {
    const board = window.gameState.board;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã
    for (let i = 0; i < 3; i++) {
        if ((board[i][0] === player && board[i][1] === player && board[i][2] === player) ||
            (board[0][i] === player && board[1][i] === player && board[2][i] === player)) {
            return true;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    if ((board[0][0] === player && board[1][1] === player && board[2][2] === player) ||
        (board[0][2] === player && board[1][1] === player && board[2][0] === player)) {
        return true;
    }

    return false;
}

function makeSimpleBotMove() {
    if (window.gameState.gameOver) return;

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ –¥–ª—è –∫—Ä–µ—Å—Ç–∏–∫–æ–≤-–Ω–æ–ª–∏–∫–æ–≤
    const botSymbol = 'O';
    const playerSymbol = 'X';
    const board = window.gameState.board;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
    function evaluatePosition() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –±–æ—Ç
        if (checkWinnerForSymbol(botSymbol)) return 10;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫
        if (checkWinnerForSymbol(playerSymbol)) return -10;
        // –ù–∏—á—å—è
        return 0;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ —Å–∏–º–≤–æ–ª
    function checkWinnerForSymbol(symbol) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏, —Å—Ç–æ–ª–±—Ü—ã –∏ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
        for (let i = 0; i < 3; i++) {
            if ((board[i][0] === symbol && board[i][1] === symbol && board[i][2] === symbol) ||
                (board[0][i] === symbol && board[1][i] === symbol && board[2][i] === symbol)) {
                return true;
            }
        }
        // –î–∏–∞–≥–æ–Ω–∞–ª–∏
        if ((board[0][0] === symbol && board[1][1] === symbol && board[2][2] === symbol) ||
            (board[0][2] === symbol && board[1][1] === symbol && board[2][0] === symbol)) {
            return true;
        }
        return false;
    }

    // –ú–∏–Ω–∏–º–∞–∫—Å –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ–≥–æ —Ö–æ–¥–∞
    function minimax(depth, isMaximizing, alpha = -Infinity, beta = Infinity) {
        const score = evaluatePosition();

        // –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (score === 10 || score === -10) return score;
        if (board.flat().every(cell => cell !== '')) return 0; // –ù–∏—á—å—è

        if (isMaximizing) {
            // –•–æ–¥ –±–æ—Ç–∞ (–º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è)
            let maxEval = -Infinity;
            for (let row = 0; row < 3; row++) {
                for (let col = 0; col < 3; col++) {
                    if (board[row][col] === '') {
                        board[row][col] = botSymbol;
                        const eval = minimax(depth + 1, false, alpha, beta);
                        board[row][col] = '';
                        maxEval = Math.max(maxEval, eval);
                        alpha = Math.max(alpha, eval);
                        if (beta <= alpha) break;
                    }
                }
            }
            return maxEval;
        } else {
            // –•–æ–¥ –∏–≥—Ä–æ–∫–∞ (–º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è)
            let minEval = Infinity;
            for (let row = 0; row < 3; row++) {
                for (let col = 0; col < 3; col++) {
                    if (board[row][col] === '') {
                        board[row][col] = playerSymbol;
                        const eval = minimax(depth + 1, true, alpha, beta);
                        board[row][col] = '';
                        minEval = Math.min(minEval, eval);
                        beta = Math.min(beta, eval);
                        if (beta <= alpha) break;
                    }
                }
            }
            return minEval;
        }
    }

    // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Ö–æ–¥
    let bestMove = null;
    let bestValue = -Infinity;

    for (let row = 0; row < 3; row++) {
        for (let col = 0; col < 3; col++) {
            if (board[row][col] === '') {
                board[row][col] = botSymbol;
                const moveValue = minimax(0, false);
                board[row][col] = '';

                if (moveValue > bestValue) {
                    bestValue = moveValue;
                    bestMove = { row, col };
                }
            }
        }
    }

    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ª—É—á—à–∏–π —Ö–æ–¥, –¥–µ–ª–∞–µ–º –µ–≥–æ
    if (bestMove) {
        window.handleSimpleTicTacToeClick(bestMove.row, bestMove.col);
    } else {
        // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥
        const emptyCells = [];
        for (let row = 0; row < 3; row++) {
            for (let col = 0; col < 3; col++) {
                if (board[row][col] === '') {
                    emptyCells.push({ row, col });
                }
            }
        }
        if (emptyCells.length > 0) {
            const randomMove = emptyCells[Math.floor(Math.random() * emptyCells.length)];
            window.handleSimpleTicTacToeClick(randomMove.row, randomMove.col);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–µ
window.handleSimpleChessClick = function(row, col) {
    if (window.gameState.gameOver) return;

    const piece = window.gameState.board[row][col];

    // –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    if (window.gameState.selectedSquare &&
        window.gameState.selectedSquare.row === row &&
        window.gameState.selectedSquare.col === col) {
        window.gameState.selectedSquare = null;
        updateSimpleChessBoard();
        return;
    }

    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ñ–∏–≥—É—Ä–∞ –∏–≥—Ä–æ–∫–∞, –≤—ã–¥–µ–ª—è–µ–º –µ—ë
    if (piece && isPlayerPiece(piece, window.gameState.currentPlayer)) {
        window.gameState.selectedSquare = { row, col };
        updateSimpleChessBoard();
        return;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ñ–∏–≥—É—Ä–∞, –ø—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
    if (window.gameState.selectedSquare) {
        const fromRow = window.gameState.selectedSquare.row;
        const fromCol = window.gameState.selectedSquare.col;
        const fromPiece = window.gameState.board[fromRow][fromCol];

        if (isValidSimpleMove(fromPiece, fromRow, fromCol, row, col)) {
            // –î–µ–ª–∞–µ–º —Ö–æ–¥
            window.gameState.board[row][col] = fromPiece;
            window.gameState.board[fromRow][fromCol] = '';
            window.gameState.selectedSquare = null;
            window.gameState.currentPlayer = window.gameState.currentPlayer === 'white' ? 'black' : 'white';
            window.gameState.moveCount++;

            updateSimpleChessBoard();
            updateSimpleChessStatus();

            // –•–æ–¥ –±–æ—Ç–∞
            if (window.currentOpponent?.type === 'bot' && window.gameState.currentPlayer === 'black' && !window.gameState.gameOver) {
                setTimeout(() => {
                    makeSimpleChessBotMove();
                }, 1000);
            }
        }
    }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∏–≥—É—Ä–∞ —Ñ–∏–≥—É—Ä–æ–π –∏–≥—Ä–æ–∫–∞
function isPlayerPiece(piece, player) {
    // –î–ª—è ASCII —Å–∏–º–≤–æ–ª–æ–≤
    const whitePiecesASCII = ['r', 'n', 'b', 'q', 'k', 'P'];
    const blackPiecesASCII = ['R', 'N', 'B', 'Q', 'K', 'p'];

    // –î–ª—è Unicode —Å–∏–º–≤–æ–ª–æ–≤ (—Ä–µ–∑–µ—Ä–≤)
    const whitePiecesUnicode = ['‚ôî', '‚ôï', '‚ôñ', '‚ôó', '‚ôò', '‚ôô'];
    const blackPiecesUnicode = ['‚ôö', '‚ôõ', '‚ôú', '‚ôù', '‚ôû', '‚ôüÔ∏è'];

    if (player === 'white') {
        return whitePiecesASCII.includes(piece) || whitePiecesUnicode.includes(piece);
    } else {
        return blackPiecesASCII.includes(piece) || blackPiecesUnicode.includes(piece);
    }
}

// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ —Ö–æ–¥–∞ (–æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
function isValidSimpleMove(piece, fromRow, fromCol, toRow, toCol) {
    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (fromRow === toRow && fromCol === toCol) return false;

    const targetPiece = window.gameState.board[toRow][toCol];
    const isCapture = targetPiece !== '';

    // –ù–µ–ª—å–∑—è —Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–≤–æ–∏ —Ñ–∏–≥—É—Ä—ã
    if (isCapture && isPlayerPiece(targetPiece, window.gameState.currentPlayer)) {
        return false;
    }

    const pieceType = getPieceType(piece);
    const rowDiff = Math.abs(toRow - fromRow);
    const colDiff = Math.abs(toCol - fromCol);

    let isValid = false;

    switch (pieceType) {
        case 'pawn':
            isValid = isValidPawnMove(piece, fromRow, fromCol, toRow, toCol, window.gameState.currentPlayer);
            break;
        case 'rook':
            isValid = isValidRookMove(fromRow, fromCol, toRow, toCol);
            break;
        case 'bishop':
            isValid = isValidBishopMove(fromRow, fromCol, toRow, toCol);
            break;
        case 'queen':
            isValid = isValidQueenMove(fromRow, fromCol, toRow, toCol);
            break;
        case 'knight':
            isValid = isValidKnightMove(fromRow, fromCol, toRow, toCol);
            break;
        case 'king':
            isValid = isValidKingMove(fromRow, fromCol, toRow, toCol, window.gameState.currentPlayer);
            break;
    }

    if (!isValid) return false;

    return true;
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø —Ñ–∏–≥—É—Ä—ã
function getPieceType(piece) {
    const types = {
        '‚ôî': 'king', '‚ôö': 'king',
        '‚ôï': 'queen', '‚ôõ': 'queen',
        '‚ôñ': 'rook', '‚ôú': 'rook',
        '‚ôó': 'bishop', '‚ôù': 'bishop',
        '‚ôò': 'knight', '‚ôû': 'knight',
        '‚ôô': 'pawn', '‚ôüÔ∏è': 'pawn'
    };
    return types[piece] || null;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–æ–¥–∞ –ø–µ—à–∫–∏
function isValidPawnMove(piece, fromRow, fromCol, toRow, toCol, color) {
    const direction = color === 'white' ? -1 : 1;
    const startRow = color === 'white' ? 6 : 1;

    // –û–±—ã—á–Ω—ã–π —Ö–æ–¥ –≤–ø–µ—Ä–µ–¥
    if (fromCol === toCol && !window.gameState.board[toRow][toCol]) {
        if (toRow === fromRow + direction) return true;
        // –î–≤–æ–π–Ω–æ–π —Ö–æ–¥ —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        if (fromRow === startRow && toRow === fromRow + 2 * direction && !window.gameState.board[fromRow + direction][toCol]) {
            return true;
        }
    }

    // –í–∑—è—Ç–∏–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    if (Math.abs(toCol - fromCol) === 1 && toRow === fromRow + direction) {
        if (window.gameState.board[toRow][toCol]) return true; // –û–±—ã—á–Ω–æ–µ –≤–∑—è—Ç–∏–µ

        // –í–∑—è—Ç–∏–µ –Ω–∞ –ø—Ä–æ—Ö–æ–¥–µ
        if (window.gameState.enPassantTarget && window.gameState.enPassantTarget.row === toRow && window.gameState.enPassantTarget.col === toCol) {
            return true;
        }
    }

    return false;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–æ–¥–∞ –ª–∞–¥—å–∏
function isValidRookMove(fromRow, fromCol, toRow, toCol) {
    if (fromRow !== toRow && fromCol !== toCol) return false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —Ñ–∏–≥—É—Ä –Ω–∞ –ø—É—Ç–∏
    const rowStep = fromRow === toRow ? 0 : (toRow - fromRow) / Math.abs(toRow - fromRow);
    const colStep = fromCol === toCol ? 0 : (toCol - fromCol) / Math.abs(toCol - fromCol);

    let currentRow = fromRow + rowStep;
    let currentCol = fromCol + colStep;

    while (currentRow !== toRow || currentCol !== toCol) {
        if (window.gameState.board[currentRow][currentCol]) return false;
        currentRow += rowStep;
        currentCol += colStep;
    }

    return true;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–æ–¥–∞ —Å–ª–æ–Ω–∞
function isValidBishopMove(fromRow, fromCol, toRow, toCol) {
    if (Math.abs(toRow - fromRow) !== Math.abs(toCol - fromCol)) return false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —Ñ–∏–≥—É—Ä –Ω–∞ –ø—É—Ç–∏
    const rowStep = (toRow - fromRow) / Math.abs(toRow - fromRow);
    const colStep = (toCol - fromCol) / Math.abs(toCol - fromCol);

    let currentRow = fromRow + rowStep;
    let currentCol = fromCol + colStep;

    while (currentRow !== toRow || currentCol !== toCol) {
        if (window.gameState.board[currentRow][currentCol]) return false;
        currentRow += rowStep;
        currentCol += colStep;
    }

    return true;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–æ–¥–∞ —Ñ–µ—Ä–∑—è
function isValidQueenMove(fromRow, fromCol, toRow, toCol) {
    return isValidRookMove(fromRow, fromCol, toRow, toCol) ||
           isValidBishopMove(fromRow, fromCol, toRow, toCol);
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–æ–¥–∞ –∫–æ–Ω—è
function isValidKnightMove(fromRow, fromCol, toRow, toCol) {
    const rowDiff = Math.abs(toRow - fromRow);
    const colDiff = Math.abs(toCol - fromCol);

    return (rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2);
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–æ–¥–∞ –∫–æ—Ä–æ–ª—è
function isValidKingMove(fromRow, fromCol, toRow, toCol, color) {
    const rowDiff = Math.abs(toRow - fromRow);
    const colDiff = Math.abs(toCol - fromCol);

    // –û–±—ã—á–Ω—ã–π —Ö–æ–¥ –∫–æ—Ä–æ–ª—è
    if (rowDiff <= 1 && colDiff <= 1) return true;

    // –†–æ–∫–∏—Ä–æ–≤–∫–∞
    if (rowDiff === 0 && colDiff === 2 && fromRow === (color === 'white' ? 7 : 0)) {
        return canCastle(fromRow, fromCol, toCol, color);
    }

    return false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ–∫–∏—Ä–æ–≤–∫–∏
function canCastle(kingRow, kingCol, targetCol, color) {
    const kingside = targetCol > kingCol;
    const rights = window.gameState.castlingRights[color];

    if ((kingside && !rights.kingside) || (!kingside && !rights.queenside)) return false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–µ—Ç–∫–∏ –º–µ–∂–¥—É –∫–æ—Ä–æ–ª–µ–º –∏ –ª–∞–¥—å–µ–π –ø—É—Å—Ç—ã–µ
    const rookCol = kingside ? 7 : 0;
    const step = kingside ? 1 : -1;

    for (let col = kingCol + step; col !== rookCol; col += step) {
        if (window.gameState.board[kingRow][col]) return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä–æ–ª—å –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –Ω–µ –ø–æ–¥ —à–∞—Ö–æ–º
    const opponentColor = color === 'white' ? 'black' : 'white';
    if (isSquareAttacked(kingRow, kingCol, opponentColor)) return false;

    const intermediateCol = kingCol + step;
    if (isSquareAttacked(kingRow, intermediateCol, opponentColor)) return false;

    return true;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–ª–µ—Ç–∫–∞ –ø–æ–¥ –∞—Ç–∞–∫–æ–π
function isSquareAttacked(row, col, byColor) {
    for (let r = 0; r < 8; r++) {
        for (let c = 0; c < 8; c++) {
            const piece = window.gameState.board[r][c];
            if (piece && getPieceColor(piece) === byColor) {
                if (isValidMove(r, c, row, col, true)) {
                    return true;
                }
            }
        }
    }
    return false;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏
function updateSimpleChessBoard() {
    for (let row = 0; row < 8; row++) {
        for (let col = 0; col < 8; col++) {
            const cell = document.querySelector(`.chess-cell[data-row="${row}"][data-col="${col}"]`);
            if (cell) {
                const piece = window.gameState.board[row][col] || '';
                cell.textContent = piece;

                // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è
                cell.classList.remove('selected', 'valid-move');

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–ª–µ—Ç–∫–∏
                if (window.gameState.selectedSquare &&
                    window.gameState.selectedSquare.row === row &&
                    window.gameState.selectedSquare.col === col) {
                    cell.classList.add('selected');
                }
            }
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —à–∞—Ö–º–∞—Ç
function updateSimpleChessStatus() {
    const statusEl = document.querySelector('.chess-status');
    if (statusEl) {
        const playerName = window.gameState.currentPlayer === 'white' ? '–í–∞—à —Ö–æ–¥ (–±–µ–ª—ã–µ)' : '–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (—á–µ—Ä–Ω—ã–µ)';
        statusEl.textContent = playerName;
    }
}

// –•–æ–¥ —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
function makeSimpleChessBotMove() {
    if (window.gameState.gameOver) return;

    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ö–æ–¥
    const possibleMoves = [];

    for (let fromRow = 0; fromRow < 8; fromRow++) {
        for (let fromCol = 0; fromCol < 8; fromCol++) {
            const piece = window.gameState.board[fromRow][fromCol];
            if (piece && isPlayerPiece(piece, 'black')) {
                for (let toRow = 0; toRow < 8; toRow++) {
                    for (let toCol = 0; toCol < 8; toCol++) {
                        if (isValidSimpleMove(piece, fromRow, fromCol, toRow, toCol)) {
                            possibleMoves.push({ fromRow, fromCol, toRow, toCol });
                        }
                    }
                }
            }
        }
    }

    if (possibleMoves.length > 0) {
        const move = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];
        window.gameState.board[move.toRow][move.toCol] = window.gameState.board[move.fromRow][move.fromCol];
        window.gameState.board[move.fromRow][move.fromCol] = '';
        window.gameState.currentPlayer = 'white';
        window.gameState.moveCount++;

        updateSimpleChessBoard();
        updateSimpleChessStatus();
    }
}

// Cards Game - –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –∏–≥—Ä (—Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function initCards() {
    console.log('initCards called - this function is deprecated, use openGame("cards") instead');
    // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
    openGame('cards');
}

function renderCardsGame() {
    const playerHandElement = document.getElementById('playerHand');
    const opponentHandElement = document.getElementById('opponentHand');
    const tableElement = document.getElementById('cardsTable');

    if (playerHandElement && opponentHandElement && tableElement) {
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä—É–∫—É –∏–≥—Ä–æ–∫–∞
        let playerHandHtml = '';
        window.gameState.playerHand.forEach((card, index) => {
            playerHandHtml += `<div class="card" data-index="${index}">${card.value}${card.suit}</div>`;
        });
        playerHandElement.innerHTML = playerHandHtml;

        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä—É–∫—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        let opponentHandHtml = '';
        window.gameState.opponentHand.forEach((card, index) => {
            opponentHandHtml += `<div class="card" data-index="${index}">${card.value}${card.suit}</div>`;
        });
        opponentHandElement.innerHTML = opponentHandHtml;

        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ
        let tableHtml = '';
        window.gameState.table.forEach((card, index) => {
            tableHtml += `<div class="card" data-index="${index}">${card.value}${card.suit}</div>`;
        });
        tableElement.innerHTML = tableHtml;
    }
}

function startPoker() {
    console.log('startPoker called');

    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–æ–∫–µ—Ä–∞
    window.gameState = {
        gameMode: 'poker',
        deck: [],
        playerHand: [],
        opponentHand: [],
        playerScore: window.gameState?.playerScore || 0,
        opponentScore: window.gameState?.opponentScore || 0,
        currentPlayer: 'player',
        round: window.gameState?.round || 1,
        gamePhase: 'exchange',
        winner: null
    };

    createDeck();
    shuffleDeck();
    dealPokerCards();
    renderPokerGame();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∏–≥—Ä—ã
    const activeGamePanel = document.getElementById('activeGamePanel');
    if (activeGamePanel) {
        document.getElementById('activeGameTitle').textContent = '–ü–æ–∫–µ—Ä';
        document.getElementById('activeGameIcon').textContent = 'üÉè';
    }
}

function startDurak() {
    console.log('startDurak called');

    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –¥—É—Ä–∞–∫–∞
    window.gameState = {
        gameMode: 'durak',
        deck: [],
        playerHand: [],
        opponentHand: [],
        attackingCards: [],
        defendingCards: [],
        trumpSuit: null,
        gamePhase: 'attack',
        currentAttacker: 'player'
    };

    console.log('Creating deck...');
    createDeck();
    console.log('Shuffling deck...');
    shuffleDeck();
    console.log('Setting trump suit...');
    setTrumpSuit();
    console.log('Dealing durak cards...');
    dealDurakCards();
    console.log('Rendering durak game...');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
    const activeGamePanel = document.getElementById('activeGamePanel');
    if (activeGamePanel) {
        activeGamePanel.classList.remove('hidden');
        document.getElementById('activeGameTitle').textContent = '–î—É—Ä–∞–∫';
        document.getElementById('activeGameIcon').textContent = 'üé¥';
    }

    renderDurakGame();
}

function selectPoker() {
    console.log('selectPoker called - starting poker game selection');
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∏–≥—Ä—ã
    window.currentGame = 'poker';
    console.log('Set currentGame to poker, calling showOpponentSelector');
    showOpponentSelector('poker');
}

function selectDurak() {
    console.log('selectDurak called - starting durak game selection');
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∏–≥—Ä—ã
    window.currentGame = 'durak';
    console.log('Set currentGame to durak, calling showOpponentSelector');
    showOpponentSelector('durak');
}

function getCardPower(value) {
    const powers = { '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14 };
    return powers[value] || 0;
}

function createDeck() {
    window.gameState.deck = [];
    const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
    const values = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];

    const getCardPower = (value) => {
        const powers = { '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14 };
        return powers[value] || 0;
    };

    for (let suit of suits) {
        for (let value of values) {
            window.gameState.deck.push({ suit, value, power: getCardPower(value) });
        }
    }
}

function shuffleDeck() {
    for (let i = window.gameState.deck.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [window.gameState.deck[i], window.gameState.deck[j]] = [window.gameState.deck[j], window.gameState.deck[i]];
    }
}

function setTrumpSuit() {
    if (window.gameState.deck.length > 0) {
        window.gameState.trumpSuit = window.gameState.deck[window.gameState.deck.length - 1].suit;
    }
}

function dealPokerCards() {
    window.gameState.playerHand = [];
    window.gameState.opponentHand = [];

    for (let i = 0; i < 5; i++) {
        window.gameState.playerHand.push(window.gameState.deck.pop());
        window.gameState.opponentHand.push(window.gameState.deck.pop());
    }
}

function dealDurakCards() {
    console.log('dealDurakCards called');
    window.gameState.playerHand = [];
    window.gameState.opponentHand = [];

    console.log('Deck length before dealing:', window.gameState.deck.length);

    for (let i = 0; i < 6; i++) {
        if (window.gameState.deck.length > 0) {
            window.gameState.playerHand.push(window.gameState.deck.pop());
        }
        if (window.gameState.deck.length > 0) {
            window.gameState.opponentHand.push(window.gameState.deck.pop());
        }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º (—É –∫–æ–≥–æ —Å–∞–º—ã–π –º–ª–∞–¥—à–∏–π –∫–æ–∑—ã—Ä—å)
    determineFirstPlayer();

    console.log('Player hand:', window.gameState.playerHand);
    console.log('Opponent hand:', window.gameState.opponentHand);
    console.log('First attacker:', window.gameState.currentAttacker);
}

function determineFirstPlayer() {
    const trumpSuit = window.gameState.trumpSuit;

    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–∑—ã—Ä–∏ —É –∏–≥—Ä–æ–∫–∞
    const playerTrumps = window.gameState.playerHand.filter(card => card.suit === trumpSuit);
    const opponentTrumps = window.gameState.opponentHand.filter(card => card.suit === trumpSuit);

    let playerLowestTrump = null;
    let opponentLowestTrump = null;

    if (playerTrumps.length > 0) {
        playerLowestTrump = playerTrumps.reduce((lowest, card) =>
            card.power < lowest.power ? card : lowest
        );
    }

    if (opponentTrumps.length > 0) {
        opponentLowestTrump = opponentTrumps.reduce((lowest, card) =>
            card.power < lowest.power ? card : lowest
        );
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
    if (playerLowestTrump && opponentLowestTrump) {
        // –£ –æ–±–æ–∏—Ö –µ—Å—Ç—å –∫–æ–∑—ã—Ä–∏ - —Ö–æ–¥–∏—Ç —Ç–æ—Ç, —É –∫–æ–≥–æ –º–µ–Ω—å—à–µ
        if (playerLowestTrump.power < opponentLowestTrump.power) {
            window.gameState.currentAttacker = 'player';
            window.gameState.gamePhase = 'attack';
        } else {
            window.gameState.currentAttacker = 'bot';
            window.gameState.gamePhase = 'defend';
        }
    } else if (playerLowestTrump) {
        // –¢–æ–ª—å–∫–æ —É –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å –∫–æ–∑—ã—Ä–∏ - –æ–Ω —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
        window.gameState.currentAttacker = 'player';
        window.gameState.gamePhase = 'attack';
    } else if (opponentLowestTrump) {
        // –¢–æ–ª—å–∫–æ —É –±–æ—Ç–∞ –µ—Å—Ç—å –∫–æ–∑—ã—Ä–∏ - –æ–Ω —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
        window.gameState.currentAttacker = 'bot';
        window.gameState.gamePhase = 'defend';
    } else {
        // –ù–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –∫–æ–∑—ã—Ä–µ–π - –∏–≥—Ä–æ–∫ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        window.gameState.currentAttacker = 'player';
        window.gameState.gamePhase = 'attack';
    }
}

function renderPokerGame() {
    console.log('renderPokerGame called');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
    const activeGamePanel = document.getElementById('activeGamePanel');
    if (activeGamePanel) {
        activeGamePanel.classList.remove('hidden');
        activeGamePanel.style.display = 'block';
        document.getElementById('activeGameTitle').textContent = '–ü–æ–∫–µ—Ä';
        document.getElementById('activeGameIcon').textContent = '';
    }

    const gamePanel = document.getElementById('activeGameContent');
    if (!gamePanel) return;

    let html = '<div class="poker-game">';

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–ø–µ—Ä–Ω–∏–∫–µ
    if (window.currentOpponent) {
        html += '<div class="game-opponent-info">';
        html += '<div class="opponent-avatar-small">' + window.currentOpponent.emoji + '</div>';
        html += '<div class="opponent-name-small">' + window.currentOpponent.name + '</div>';
        html += '<div class="opponent-type">' + (window.currentOpponent.type === 'bot' ? '–ë–æ—Ç' : '–ò–≥—Ä–æ–∫') + '</div>';
        html += '</div>';
    }

    html += '<h3> –ü–æ–∫–µ—Ä</h3>';
    html += '<div class="game-info">';
    html += '<div>–†–∞—É–Ω–¥: <strong>' + window.gameState.round + '</strong></div>';
    html += '<div>–í–∞—à —Å—á—ë—Ç: ' + window.gameState.playerScore + '</div>';
    html += '<div>–°—á—ë—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: ' + window.gameState.opponentScore + '</div>';
    html += '</div>';

    // –ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–≤–≤–µ—Ä—Ö—É)
    html += '<div class="opponent-cards">';
    html += '<h4>–ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:</h4>';
    html += '<div class="cards-hand opponent-hand">';
    for (let i = 0; i < window.gameState.opponentHand.length; i++) {
        if (window.gameState.gamePhase === 'waiting' || window.gameState.gamePhase === 'finished') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            const card = window.gameState.opponentHand[i];
            const suitClass = getSuitClass(card.suit);
            html += '<div class="card ' + suitClass + ' revealed" data-index="' + i + '">';
            html += '<div class="card-value">' + card.value + '</div>';
            html += '<div class="card-suit">' + card.suit + '</div>';
            html += '</div>';
        } else {
            // –í —Ñ–∞–∑–µ –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã
            html += '<div class="card card-back">üÇ†</div>';
        }
    }
    html += '</div>';
    html += '</div>';

    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å (–¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∏–ª–∏ –æ–±–º–µ–Ω–∞)
    html += '<div class="poker-center">';
    if (window.gameState.gamePhase === 'finished') {
        const winner = window.gameState.winner;
        html += '<div class="game-result">';
        if (winner === 'player') {
            html += '<div style="color: #28a745; font-size: 24px; font-weight: bold;">üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∏–≥—Ä—É!</div>';
        } else if (winner === 'opponent') {
            html += '<div style="color: #dc3545; font-size: 24px; font-weight: bold;">üòû –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª –∏–≥—Ä—É!</div>';
        } else {
            html += '<div style="color: #ffc107; font-size: 24px; font-weight: bold;">ü§ù –ù–∏—á—å—è –≤ –∏–≥—Ä–µ!</div>';
        }
        html += '<div style="margin-top: 10px;">–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ü–µ—Ä–≤—ã–π, –∫—Ç–æ –Ω–∞–±—Ä–∞–ª 10 –æ—á–∫–æ–≤, –ø–æ–±–µ–∂–¥–∞–µ—Ç!</div>';
        html += '</div>';
    } else if (window.gameState.gamePhase === 'waiting') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–æ–ª —Å –∫–∞—Ä—Ç–∞–º–∏
        html += '<div class="poker-table">';
        html += '<div class="table-title">–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π</div>';

        // –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ
        html += '<div class="table-player-cards">';
        html += '<div class="player-label">–í–∞—à–∏ –∫–∞—Ä—Ç—ã:</div>';
        html += '<div class="table-cards-row">';
        for (let i = 0; i < window.gameState.playerHand.length; i++) {
            const card = window.gameState.playerHand[i];
            const suitClass = getSuitClass(card.suit);
            html += '<div class="card ' + suitClass + ' on-table" data-index="' + i + '">';
            html += '<div class="card-value">' + card.value + '</div>';
            html += '<div class="card-suit">' + card.suit + '</div>';
            html += '</div>';
        }
        html += '</div>';
        html += '</div>';

        // –ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ
        html += '<div class="table-opponent-cards">';
        html += '<div class="opponent-label">–ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:</div>';
        html += '<div class="table-cards-row">';
        for (let i = 0; i < window.gameState.opponentHand.length; i++) {
            const card = window.gameState.opponentHand[i];
            const suitClass = getSuitClass(card.suit);
            html += '<div class="card ' + suitClass + ' on-table" data-index="' + i + '">';
            html += '<div class="card-value">' + card.value + '</div>';
            html += '<div class="card-suit">' + card.suit + '</div>';
            html += '</div>';
        }
        html += '</div>';
        html += '</div>';

        html += '</div>';

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        html += '<div class="poker-status">–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...</div>';
    } else if (window.gameState.gamePhase === 'exchange') {
        html += '<div class="poker-status">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—ã –¥–ª—è –æ–±–º–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é</div>';
    }
    html += '</div>';

    // –í–∞—à–∏ –∫–∞—Ä—Ç—ã (–≤–Ω–∏–∑—É)
    html += '<div class="player-cards">';
    html += '<h4>–í–∞—à–∏ –∫–∞—Ä—Ç—ã:</h4>';
    html += '<div class="cards-hand player-hand">';
    for (let i = 0; i < window.gameState.playerHand.length; i++) {
        const card = window.gameState.playerHand[i];
        const suitClass = getSuitClass(card.suit);
        const isSelected = card.selected ? ' selected' : '';
        html += '<div class="card ' + suitClass + isSelected + '" data-index="' + i + '">';
        html += '<div class="card-value">' + card.value + '</div>';
        html += '<div class="card-suit">' + card.suit + '</div>';
        html += '</div>';
    }
    html += '</div>';
    html += '</div>';

    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    html += '<div class="poker-controls">';
    if (window.gameState.gamePhase === 'finished') {
        html += '<button onclick="startNewPokerGame()" class="action-btn">üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞</button>';
    } else if (window.gameState.gamePhase === 'exchange') {
        html += '<button onclick="exchangeCards()" class="action-btn">–û–±–º–µ–Ω—è—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ</button>';
        html += '<button onclick="checkPokerHand()" class="action-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é</button>';
        html += '<button onclick="newPokerRound()" class="action-btn">–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥</button>';
    } else if (window.gameState.gamePhase === 'waiting') {
        // –§–∞–∑–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ - –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã
        html += '<button disabled class="action-btn" style="opacity: 0.5;">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...</button>';
    }
    html += '<button onclick="backToMenu()" class="back-btn">–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é</button>';
    html += '</div>';

    html += '</div>';
    gamePanel.innerHTML = html;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç
    addPokerCardHandlers();
}

function renderDurakGame() {
    console.log('renderDurakGame called');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –∏ —Å–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    const activeGamePanel = document.getElementById('activeGamePanel');
    const gameContainer = document.getElementById('gameContainer');

    if (activeGamePanel) {
        activeGamePanel.classList.remove('hidden');
        activeGamePanel.style.display = 'block';
        document.getElementById('activeGameTitle').textContent = '–î—É—Ä–∞–∫';
        document.getElementById('activeGameIcon').textContent = 'üé¥';
    }

    const gamePanel = document.getElementById('activeGameContent');
    console.log('gamePanel for durak:', gamePanel);
    if (!gamePanel) {
        console.error('activeGameContent not found!');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ gameState –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!window.gameState) {
        console.error('gameState not initialized');
        return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!window.gameState.opponentHand) window.gameState.opponentHand = [];
    if (!window.gameState.playerHand) window.gameState.playerHand = [];
    if (!window.gameState.attackingCards) window.gameState.attackingCards = [];
    if (!window.gameState.defendingCards) window.gameState.defendingCards = [];

    console.log('gameState:', window.gameState);
    console.log('playerHand length:', window.gameState.playerHand.length);
    console.log('opponentHand length:', window.gameState.opponentHand.length);
    console.log('–§–∞–∑–∞ –∏–≥—Ä—ã:', window.gameState.gamePhase, '–ê—Ç–∞–∫—É—é—â–∏–π:', window.gameState.currentAttacker);

    let html = '<div class="cards-menu">';
    if (window.currentOpponent) {
        html += '<div class="game-opponent-info">';
        html += '<div class="opponent-avatar-small">' + window.currentOpponent.emoji + '</div>';
        html += '<div class="opponent-name-small">' + window.currentOpponent.name + '</div>';
        html += '<div class="opponent-type">' + (window.currentOpponent.type === 'bot' ? '–ë–æ—Ç' : '–ò–≥—Ä–æ–∫') + '</div>';
        html += '</div>';
    }

    html += '<h3>üé¥ –î—É—Ä–∞–∫</h3>';
    html += '<div class="game-info">';
    html += '<div>–ö–æ–∑—ã—Ä—å: <span class="trump-suit ' + (window.gameState.trumpSuit ? getSuitClass(window.gameState.trumpSuit) : '') + '">' + (window.gameState.trumpSuit || '?') + '</span></div>';
    html += '<div>–ö–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ: ' + (window.gameState.deck ? window.gameState.deck.length : 0) + '</div>';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ç–æ —Å–µ–π—á–∞—Å –∞—Ç–∞–∫—É–µ—Ç
    const currentPhase = window.gameState.gamePhase === 'attack' ? '–ê—Ç–∞–∫–∞' : '–ó–∞—â–∏—Ç–∞';
    const currentAttacker = window.gameState.currentAttacker === 'player' ? '–í—ã' : '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫';
    html += '<div>–§–∞–∑–∞: ' + currentPhase + ' (' + currentAttacker + ')</div>';
    html += '</div>';

    // –ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–≤–≤–µ—Ä—Ö—É)
    html += '<div class="opponent-cards">';
    html += '<h4>–ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (' + window.gameState.opponentHand.length + '):</h4>';
    html += '<div class="cards-hand opponent-hand">';
    for (let i = 0; i < window.gameState.opponentHand.length; i++) {
        html += '<div class="card card-back">üÇ†</div>';
    }
    html += '</div>';
    html += '</div>';

    // –í–∞—à–∏ –∫–∞—Ä—Ç—ã (–≤–Ω–∏–∑—É)
    html += '<div class="player-cards">';
    html += '<h4>–í–∞—à–∏ –∫–∞—Ä—Ç—ã:</h4>';
    html += '<div class="cards-hand player-hand">';
    for (let i = 0; i < window.gameState.playerHand.length; i++) {
        const card = window.gameState.playerHand[i];
        if (card && card.suit && card.value) {
            const suitClass = getSuitClass(card.suit);
            html += '<div class="card ' + suitClass + '" data-index="' + i + '" onclick="playDurakCard(' + i + ')">';
            html += '<div class="card-value">' + card.value + '</div>';
            html += '<div class="card-suit">' + card.suit + '</div>';
            html += '</div>';
        }
    }
    html += '</div>';
    html += '</div>';

    // –°—Ç–æ–ª (–ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ)
    html += '<div class="durak-table">';
    html += '<h4>–°—Ç–æ–ª:</h4>';
    html += '<div class="table-cards">';
    for (let i = 0; i < window.gameState.attackingCards.length; i++) {
        const attackCard = window.gameState.attackingCards[i];
        const defendCard = window.gameState.defendingCards[i];

        html += '<div class="card-pair">';
        html += '<div class="card ' + getSuitClass(attackCard.suit) + ' attacking">';
        html += '<div class="card-value">' + attackCard.value + '</div>';
        html += '<div class="card-suit">' + attackCard.suit + '</div>';
        html += '</div>';

        if (defendCard) {
            html += '<div class="card ' + getSuitClass(defendCard.suit) + ' defending">';
            html += '<div class="card-value">' + defendCard.value + '</div>';
            html += '<div class="card-suit">' + defendCard.suit + '</div>';
            html += '</div>';
        }
        html += '</div>';
    }
    html += '</div>';
    html += '</div>';

    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    html += '<div class="durak-controls">';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã –∏–≥—Ä—ã
    if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
        // –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç, –∏–≥—Ä–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è
        html += '<button onclick="takeDurakCards()" class="action-btn">–í–∑—è—Ç—å –∫–∞—Ä—Ç—ã</button>';
        html += '<button onclick="passDurakTurn()" class="action-btn">–ü–∞—Å (–≤–∑—è—Ç—å)</button>';
    }

    if (window.gameState.gamePhase === 'attack' && window.gameState.currentAttacker === 'player') {
        // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç - –º–æ–∂–µ—Ç –ø–∞—Å–æ–≤–∞—Ç—å (–∑–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ç–∞–∫—É)
        if (window.gameState.attackingCards.length > 0) {
            html += '<button onclick="passDurakTurn()" class="action-btn">–ü–∞—Å (–∑–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ç–∞–∫—É)</button>';
        }
    }

    if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'player') {
        // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫–æ–≤–∞–ª, –±–æ—Ç –æ—Ç–±–∏–ª—Å—è, –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å –∏–ª–∏ –ø–∞—Å–æ–≤–∞—Ç—å
        const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);
        if (allDefended && window.gameState.attackingCards.length > 0) {
            html += '<button onclick="passDurakTurn()" class="action-btn">–ü–∞—Å (–æ—Ç–±–æ–π)</button>';
        }
    }

    if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
        // –ë–æ—Ç –∞—Ç–∞–∫–æ–≤–∞–ª, –∏–≥—Ä–æ–∫ –æ—Ç–±–∏–ª—Å—è, —Ç–µ–ø–µ—Ä—å –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–∞—Å–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–±–æ—è
        const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);
        if (allDefended && window.gameState.attackingCards.length > 0) {
            html += '<button onclick="passDurakTurn()" class="action-btn">–ü–∞—Å (–æ—Ç–±–æ–π)</button>';
        }
    }

    html += '<button onclick="newDurakRound()" class="action-btn">–ù–æ–≤–∞—è –∏–≥—Ä–∞</button>';
    html += '<button onclick="closeGame()" class="back-btn">–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é</button>';
    html += '</div>';

    html += '</div>';

    try {
        gamePanel.innerHTML = html;
        console.log('Durak HTML set successfully');
    } catch (e) {
        console.error('Error setting durak HTML:', e);
    }
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥—É—Ä–∞–∫–∞
function testDurak() {
    console.log('testDurak called');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –∫–∞–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    window.currentOpponent = {
        name: '–£–º–Ω—ã–π –ë–æ—Ç',
        emoji: 'ü§ñ',
        type: 'bot'
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    startDurak();
}

function getSuitClass(suit) {
    switch (suit) {
        case '‚ô•': return 'hearts';
        case '‚ô¶': return 'diamonds';
        case '‚ô£': return 'clubs';
        case '‚ô†': return 'spades';
        default: return '';
    }
}

function addPokerCardHandlers() {
    const cards = document.querySelectorAll('.player-cards .card');
    cards.forEach(card => {
        card.addEventListener('click', function () {
            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —É –≤—Å–µ—Ö –∫–∞—Ä—Ç
            cards.forEach(c => c.classList.remove('selected'));

            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —ç—Ç–æ–π –∫–∞—Ä—Ç—ã
            this.classList.toggle('selected');
        });
    });
}

function exchangeCards() {
    const selectedCards = document.querySelectorAll('.player-cards .card.selected');
    if (selectedCards.length === 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        const statusElement = document.querySelector('.poker-status');
        if (statusElement) {
            statusElement.innerHTML = '<div style="color: #dc3545;">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞</div>';
        }
        return;
    }

    // –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
    const selectedCard = selectedCards[0];
    const index = parseInt(selectedCard.dataset.index);

    if (window.socket && window.roomId && window.currentOpponent?.type === 'player') {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã
        window.socket.emit('game-move', {
            roomId: window.roomId,
            gameType: 'poker',
            move: {
                action: 'exchange',
                cardIndex: index,
                playerId: window.socket.id
            }
        });

        // –õ–æ–∫–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
        if (window.gameState.deck.length > 0) {
            window.gameState.playerHand[index] = window.gameState.deck.pop();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–º–µ–Ω–µ
            const statusElement = document.querySelector('.poker-status');
            if (statusElement) {
                statusElement.innerHTML = '<div style="color: #28a745;">–ö–∞—Ä—Ç–∞ –æ–±–º–µ–Ω—è–Ω–∞! –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é.</div>';
            }

            renderPokerGame();
        }
    } else {
        // –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º
        if (window.gameState.deck.length > 0) {
            window.gameState.playerHand[index] = window.gameState.deck.pop();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–º–µ–Ω–µ
            const statusElement = document.querySelector('.poker-status');
            if (statusElement) {
                statusElement.innerHTML = '<div style="color: #28a745;">–ö–∞—Ä—Ç–∞ –æ–±–º–µ–Ω—è–Ω–∞! –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é.</div>';
            }

            renderPokerGame();
        } else {
            const statusElement = document.querySelector('.poker-status');
            if (statusElement) {
                statusElement.innerHTML = '<div style="color: #dc3545;">–í –∫–æ–ª–æ–¥–µ –Ω–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –æ–±–º–µ–Ω–∞</div>';
            }
        }
    }
}

function checkPokerHand() {
    console.log('checkPokerHand called');

    if (window.socket && window.roomId && window.currentOpponent?.type === 'player') {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã
        window.socket.emit('game-move', {
            roomId: window.roomId,
            gameType: 'poker',
            move: {
                action: 'check',
                playerId: window.socket.id
            }
        });

        // –õ–æ–∫–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∞–∑–µ –æ–∂–∏–¥–∞–Ω–∏—è
        window.gameState.gamePhase = 'waiting';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const statusElement = document.querySelector('.poker-status');
        if (statusElement) {
            statusElement.innerHTML = '<div style="color: #ffc107;">–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...</div>';
        }

        renderPokerGame();
    } else {
        // –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é
        window.gameState.gamePhase = 'waiting';
        renderPokerGame();

        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        setTimeout(() => {
            comparePokerHands();
        }, 2000);
    }
}

function comparePokerHands() {
    console.log('comparePokerHands called');

    // –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ - —Å—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—Ä—Ç
    const playerScore = window.gameState.playerHand.reduce((sum, card) => sum + getCardPower(card.value), 0);
    const opponentScore = window.gameState.opponentHand.reduce((sum, card) => sum + getCardPower(card.value), 0);

    console.log('Player score:', playerScore, 'Opponent score:', opponentScore);

    let winner;
    if (playerScore > opponentScore) {
        winner = 'player';
        window.gameState.playerScore++;
    } else if (opponentScore > playerScore) {
        winner = 'opponent';
        window.gameState.opponentScore++;
    } else {
        winner = 'draw';
    }

    window.gameState.winner = winner;
    window.gameState.gamePhase = 'finished';

    renderPokerGame();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const statusElement = document.querySelector('.poker-status');
    if (statusElement) {
        if (winner === 'player') {
            statusElement.innerHTML = '<div style="color: #28a745; font-size: 18px; font-weight: bold;">üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Ä–∞—É–Ω–¥!</div>';
        } else if (winner === 'opponent') {
            statusElement.innerHTML = '<div style="color: #dc3545; font-size: 18px; font-weight: bold;">üòû –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª —Ä–∞—É–Ω–¥!</div>';
        } else {
            statusElement.innerHTML = '<div style="color: #ffc107; font-size: 18px; font-weight: bold;">ü§ù –ù–∏—á—å—è –≤ —Ä–∞—É–Ω–¥–µ!</div>';
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
    if (window.gameState.playerScore >= 10 || window.gameState.opponentScore >= 10) {
        // –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
        setTimeout(() => {
            showNotification('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! ' + (window.gameState.playerScore > window.gameState.opponentScore ? '–í—ã –ø–æ–±–µ–¥–∏–ª–∏!' : '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ–±–µ–¥–∏–ª!'), 'info');
        }, 2000);
    }
}

function newPokerRound() {
    console.log('newPokerRound called');

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    window.gameState.round++;
    window.gameState.gamePhase = 'exchange';
    window.gameState.winner = null;

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É –∏ —Ä–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
    createDeck();
    shuffleDeck();
    dealPokerCards();

    renderPokerGame();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const statusElement = document.querySelector('.poker-status');
    if (statusElement) {
        statusElement.innerHTML = '<div style="color: #28a745;">–†–∞—É–Ω–¥ ' + window.gameState.round + ' –Ω–∞—á–∞—Ç!</div>';
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥—É—Ä–∞–∫–∞
function playDurakCard(cardIndex) {
    console.log('playDurakCard called with index:', cardIndex);

    if (!window.gameState || !window.gameState.playerHand || cardIndex >= window.gameState.playerHand.length) {
        return;
    }

    const card = window.gameState.playerHand[cardIndex];
    if (!card) return;

    console.log('Playing card:', card);

    if (window.socket && window.roomId && window.currentOpponent?.type === 'player') {
        // –°–µ—Ç–µ–≤–∞—è –∏–≥—Ä–∞
        let action = 'play';
        if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
            action = 'defend';
        } else if (window.gameState.gamePhase === 'attack' && window.gameState.currentAttacker === 'player') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã –¥–ª—è –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—è
            const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);
            if (allDefended && window.gameState.attackingCards.length > 0) {
                action = 'throw';
            } else {
                action = 'play';
            }
        }

        window.socket.emit('game-move', {
            roomId: window.roomId,
            gameType: 'durak',
            move: {
                action: action,
                card: { suit: card.suit, value: card.value },
                cardIndex: cardIndex,
                playerId: window.socket.id
            }
        });
    } else {
        // –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º
        makeDurakMove(card, cardIndex);
    }
}

function makeDurakMove(card, cardIndex) {
    console.log('makeDurakMove:', card, cardIndex);

    if (window.gameState.gamePhase === 'attack' && window.gameState.currentAttacker === 'player') {
        // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
        if (window.gameState.attackingCards.length === 0) {
            // –ü–µ—Ä–≤–∞—è –∞—Ç–∞–∫–∞
            window.gameState.playerHand.splice(cardIndex, 1);
            window.gameState.attackingCards.push(card);
            window.gameState.gamePhase = 'defend';
            console.log('Player attacked with:', card);
        } else {
            // –ü–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç
            window.gameState.playerHand.splice(cardIndex, 1);
            window.gameState.attackingCards.push(card);
            console.log('Player threw card:', card);
        }
    } else if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
        // –ò–≥—Ä–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è –æ—Ç –±–æ—Ç–∞
        const undefendedIndex = window.gameState.attackingCards.findIndex((_, index) => !window.gameState.defendingCards[index]);
        if (undefendedIndex !== -1) {
            window.gameState.playerHand.splice(cardIndex, 1);
            window.gameState.defendingCards[undefendedIndex] = card;
            console.log('Player defended with:', card);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã
            const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);
            if (allDefended) {
                // –í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã - –æ—á–∏—â–∞–µ–º —Å—Ç–æ–ª –∏ –º–µ–Ω—è–µ–º –∞—Ç–∞–∫—É—é—â–µ–≥–æ
                window.gameState.attackingCards = [];
                window.gameState.defendingCards = [];
                window.gameState.currentAttacker = 'bot'; // –¢–µ–ø–µ—Ä—å –±–æ—Ç –∞—Ç–∞–∫—É–µ—Ç
                window.gameState.gamePhase = 'attack';

                // –î–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã
                refillDurakHands();

                // –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç
                setTimeout(() => {
                    makeDurakBotAttack();
                }, 1000);
            }
        }
    }

    renderDurakGame();
}

function takeDurakCards() {
    console.log('takeDurakCards called');

    if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
        // –ò–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞
        window.gameState.playerHand.push(...window.gameState.attackingCards);
        window.gameState.playerHand.push(...window.gameState.defendingCards);
        window.gameState.attackingCards = [];
        window.gameState.defendingCards = [];

        // –ú–µ–Ω—è–µ–º –∞—Ç–∞–∫—É—é—â–µ–≥–æ
        window.gameState.currentAttacker = 'bot';
        window.gameState.gamePhase = 'attack';

        // –î–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã
        refillDurakHands();

        // –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç
        setTimeout(() => {
            makeDurakBotAttack();
        }, 1000);

        renderDurakGame();
    }
}

function passDurakTurn() {
    console.log('passDurakTurn called');

    if (window.gameState.gamePhase === 'attack' && window.gameState.currentAttacker === 'player') {
        // –ò–≥—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∞—Ç–∞–∫—É
        if (window.gameState.attackingCards.length > 0) {
            window.gameState.attackingCards = [];
            window.gameState.defendingCards = [];
            window.gameState.currentAttacker = 'bot';
            window.gameState.gamePhase = 'attack';
            refillDurakHands();

            // –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç
            setTimeout(() => {
                makeDurakBotAttack();
            }, 1000);
        }
    } else if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
        // –ò–≥—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–±–∏—Ç—å—Å—è –∏ –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã
        takeDurakCards();
    } else if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'player') {
        // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫–æ–≤–∞–ª, –≤—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã - –æ—Ç–±–æ–π
        window.gameState.attackingCards = [];
        window.gameState.defendingCards = [];
        window.gameState.currentAttacker = 'bot';
        window.gameState.gamePhase = 'attack';
        refillDurakHands();

        // –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç
        setTimeout(() => {
            makeDurakBotAttack();
        }, 1000);
    }

    renderDurakGame();
}

function refillDurakHands() {
    console.log('refillDurakHands called');

    // –î–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã –¥–æ 6 —É –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    while (window.gameState.playerHand.length < 6 && window.gameState.deck.length > 0) {
        window.gameState.playerHand.push(window.gameState.deck.pop());
    }

    while (window.gameState.opponentHand.length < 6 && window.gameState.deck.length > 0) {
        window.gameState.opponentHand.push(window.gameState.deck.pop());
    }
}

function newDurakRound() {
    console.log('newDurakRound called');

    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –¥—É—Ä–∞–∫–∞
    startDurak();
}

function makeDurakBotAttack() {
    console.log('makeDurakBotAttack called');

    if (window.gameState.gamePhase !== 'attack' || window.gameState.currentAttacker !== 'bot' || window.gameState.opponentHand.length === 0) {
        return;
    }

    // –ë–æ—Ç –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è –∞—Ç–∞–∫–∏
    const attackCard = window.gameState.opponentHand[Math.floor(Math.random() * window.gameState.opponentHand.length)];

    // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ –±–æ—Ç–∞
    const cardIndex = window.gameState.opponentHand.findIndex(card =>
        card.suit === attackCard.suit && card.value === attackCard.value
    );
    if (cardIndex !== -1) {
        window.gameState.opponentHand.splice(cardIndex, 1);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª
    window.gameState.attackingCards.push(attackCard);
    window.gameState.gamePhase = 'defend';

    console.log('Bot attacked with:', attackCard);
    renderDurakGame();

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, –∑–∞—Ç–µ–º –±–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞—Ç–∞–∫—É
    setTimeout(() => {
        if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
            // –ë–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞—Ç–∞–∫—É, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ—Ç–±–∏–ª—Å—è
            const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);
            if (allDefended && window.gameState.opponentHand.length > 0) {
                // –ë–æ—Ç –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å –∫–∞—Ä—Ç—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ç–∞–∫—É
                if (Math.random() < 0.3) { // 30% —à–∞–Ω—Å –ø–æ–¥–∫–∏–Ω—É—Ç—å
                    makeDurakBotAttack();
                }
            }
        }
    }, 1500);
}

function backToMenu() {
    console.log('backToMenu called');

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    window.gameState = null;
    window.currentOpponent = null;

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –∏–≥—Ä
    initCards();
}

function startNewPokerGame() {
    console.log('startNewPokerGame called');
    if (window.gameManager && window.gameManager.currentGame &&
        window.gameManager.currentGame.startNewGame) {
        console.log('Calling startNewGame on current game');
        window.gameManager.currentGame.startNewGame();
    } else {
        console.error('No current game to start new poker game');
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function updateRoomPlayers() {
    // –§—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    console.log('updateRoomPlayers called');
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ onclick-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö HTML
try {
    // –§—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º legacy —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    window.initChess = function() {
        if (window.initNetworkChess) {
            window.initNetworkChess();
        } else {
            // –†–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –µ—Å–ª–∏ –º–æ–¥—É–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
            console.log('Using fallback chess initialization');
            initSimpleChess();
        }
    };

// –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
function overrideLegacyFunctions() {
    console.log('Overriding legacy functions with new implementations...');

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º selectPoker –∏ selectDurak –∏–∑ legacy-functions.js
    if (window.selectPoker && window.selectPoker.toString().includes('gameManager.startGame')) {
        console.log('Overriding legacy selectPoker function');
        window.selectPoker = selectPoker;
    } else {
        console.log('No legacy selectPoker function found or already overridden');
    }

    if (window.selectDurak && window.selectDurak.toString().includes('gameManager.startGame')) {
        console.log('Overriding legacy selectDurak function');
        window.selectDurak = selectDurak;
    } else {
        console.log('No legacy selectDurak function found or already overridden');
    }

    console.log('Legacy functions override completed - selectPoker:', typeof window.selectPoker, 'selectDurak:', typeof window.selectDurak);
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º selectPoker —Ñ—É–Ω–∫—Ü–∏—é
function selectPoker() {
    if (window.gameManager && window.currentOpponent?.type === 'player') {
        // –°–µ—Ç–µ–≤–∞—è –∏–≥—Ä–∞
        console.log('Starting network poker game');
        const game = window.gameManager.startGame('poker', window.currentOpponent);
        if (game) {
            game.isNetworkGame = true;
            console.log('Network poker game initialized');
        }
    } else {
        // –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞
        console.log('Starting local poker game');
        window.gameManager.startGame('poker');
    }
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º selectDurak —Ñ—É–Ω–∫—Ü–∏—é
function selectDurak() {
    if (window.gameManager && window.currentOpponent?.type === 'player') {
        // –°–µ—Ç–µ–≤–∞—è –∏–≥—Ä–∞
        console.log('Starting network durak game');
        const game = window.gameManager.startGame('durak', window.currentOpponent);
        if (game) {
            game.isNetworkGame = true;
            console.log('Network durak game initialized');
        }
    } else {
        // –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞
        console.log('Starting local durak game');
        window.gameManager.startGame('durak');
    }
}

    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–∞–º–∏
    window.handleGameStateUpdate = handleGameStateUpdate;
    window.initializeGameInvitations = initializeGameInvitations;
    window.showOpponentSelector = showOpponentSelector;
    window.selectBot = selectBot;
    window.selectPoker = selectPoker;
    window.selectDurak = selectDurak;

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏
    window.updateParticipantsList = updateParticipantsList;

    // –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    window.initSimpleChess = initSimpleChess;
    window.initSimpleTicTacToe = initSimpleTicTacToe;
    window.handleSimpleTicTacToeClick = window.handleSimpleTicTacToeClick;
    window.handleSimpleChessClick = window.handleSimpleChessClick;
    window.updateSimpleChessBoard = updateSimpleChessBoard;

    // –ù–æ–≤—ã–µ —à–∞—Ö–º–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    window.handleChessClick = handleChessClick;
    window.makeChessAIMove = makeChessAIMove;
    window.updateChessBoard = updateChessBoard;
    window.highlightPossibleMoves = highlightPossibleMoves;
    window.updateChessStatus = updateChessStatus;

    // –§—É–Ω–∫—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –∏–≥—Ä
    window.backToMenu = backToMenu;
    window.checkPokerHand = checkPokerHand;
    window.comparePokerHands = comparePokerHands;
    window.newPokerRound = newPokerRound;
    window.playDurakCard = playDurakCard;
    window.takeDurakCards = takeDurakCards;
    window.passDurakTurn = passDurakTurn;
    window.newDurakRound = newDurakRound;
    window.makeDurakBotAttack = makeDurakBotAttack;
    window.startNewPokerGame = startNewPokerGame;
    window.testDurak = testDurak;

    console.log('‚úÖ games.js: Functions exported to global scope');
} catch (e) {
    console.warn('Error exporting functions to global scope:', e);
}
