// ===== MODULAR GAME SYSTEM =====
// –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª games.js —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É

// ===== LEGACY FUNCTIONS =====
// –°–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
function loadGameModules() {
    return new Promise((resolve, reject) => {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        const modules = [
            './js/modules/legacy/legacy-functions.js', // –ó–∞–≥—Ä—É–∂–∞–µ–º legacy —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
            './js/modules/index.js' // –ó–∞–≥—Ä—É–∂–∞–µ–º index.js –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        ];

        let loadedCount = 0;
        const totalModules = modules.length;

        function loadModule(src) {
            const script = document.createElement('script');
            script.src = src;
            
            // Legacy functions –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞–∫ –º–æ–¥—É–ª–∏
            if (src.includes('legacy-functions.js')) {
                // –û–±—ã—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è legacy —Ñ—É–Ω–∫—Ü–∏–π
            } else {
                script.type = 'module';
            }
            
            script.onload = () => {
                loadedCount++;
                console.log(`Loaded module ${loadedCount}/${totalModules}: ${src}`);
                if (loadedCount === totalModules) {
                    console.log('All game modules loaded successfully!');
                    resolve();
                }
            };
            script.onerror = (e) => {
                console.error('Failed to load module:', src, e);
                reject(new Error(`Failed to load ${src}`));
            };
            document.head.appendChild(script);
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        modules.forEach(loadModule);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π
loadGameModules().then(() => {
    console.log('üéÆ Game system initialized successfully');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    if (window.initializeGameSystem) {
        window.initializeGameSystem();
    }
}).catch((error) => {
    console.error('Failed to load game modules:', error);
});

// –§—É–Ω–∫—Ü–∏–∏-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
// –û–Ω–∏ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –∏–≥—Ä—ã
function initializeGameInvitations() {
    if (!window.socket) return;

    console.log('üéÆ Initializing game invitations...');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    window.socket.on('game-invitation', (data) => {
        console.log('üì® Received game invitation:', data);
        showGameInvitation(data);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    window.socket.on('invitation-declined', (data) => {
        console.log('‚ùå Invitation declined by:', data.playerId);
        showNotification('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', 'warning');
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    window.socket.on('game-invitation-response', (data) => {
        console.log('üì¨ Game invitation response:', data);
        handleInvitationResponse(data);
    });

    console.log('‚úÖ Game invitations initialized');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
function handleGameStateUpdate(data) {
        console.log('üéØ FULL GAME STATE UPDATE:', data);

        if (data.gameType === 'poker' || data.gameType === 'durak') {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            if (data.state) {
                window.gameState = { ...window.gameState, ...data.state };
                console.log('Updated game state:', window.gameState);

                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–≥—Ä—É
                if (data.gameType === 'poker') {
                    renderPokerGame();
                } else if (data.gameType === 'durak') {
                    renderDurakGame();
                }

                showNotification('–ò–≥—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 'info');
            }
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –∏–≥—Ä
    if (window.socket) {
        window.socket.on('game-closed', () => {
            console.log('Received game-closed event');
            closeGame();
        });

        console.log('‚úÖ games.js: All event handlers registered!');
    }

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function () {
    console.log('üéÆ games.js: DOM loaded, initializing...');
    initializeGameInvitations();
});

// –¢–∞–∫–∂–µ –ø—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
if (document.readyState === 'loading') {
    // DOM –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –∂–¥–µ–º —Å–æ–±—ã—Ç–∏—è
} else {
    // DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    console.log('üéÆ games.js: DOM already loaded, initializing...');
    initializeGameInvitations();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const activeGameClosed = localStorage.getItem('wt_active_game_closed') === 'true';
    console.log('Active game was closed by user:', activeGameClosed);

    // –°–∫—Ä—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞
    if (activeGameClosed) {
        const panel = document.getElementById('activeGamePanel');
        if (panel) {
            panel.classList.add('hidden');
            panel.style.display = 'none';
            console.log('Hiding active game panel on page load');
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–≥—Ä
    const panel = document.getElementById('gamesPanel');
    if (panel) {
        try {
            const isMobile = window.innerWidth <= 767;
            const saved = localStorage.getItem('wt_games_collapsed');

            // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–µ—Ä–Ω—É—Ç–æ, –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ
            const shouldCollapse = isMobile ? (saved !== 'false') : (saved === 'true');

            if (shouldCollapse) {
                panel.classList.add('collapsed');
                const container = document.getElementById('gameContainer');
                if (container) container.style.display = 'none';
                const button = panel.querySelector('.toggle-panel');
                if (button) {
                    button.textContent = '+';
                    button.title = '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å';
                }
            }
        } catch (e) { }
    }
});


// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
function showOpponentSelector(gameType) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay opponent-selector';
    modal.setAttribute('aria-hidden', 'false');
    modal.style.display = 'flex';

    let gameIcon = '';
    let gameName = '';
    switch (gameType) {
        case 'chess': gameIcon = '‚ôüÔ∏è'; gameName = '–®–∞—Ö–º–∞—Ç—ã'; break;
        case 'tictactoe': gameIcon = '‚≠ï'; gameName = '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏'; break;
        case 'poker': gameIcon = 'üÉè'; gameName = '–ü–æ–∫–µ—Ä'; break;
        case 'cards': gameIcon = 'üÉè'; gameName = '–ö–∞—Ä—Ç—ã'; break;
    }

    let html = '<div class="modal-content opponent-modal">';
    html += '<div class="modal-header">';
    html += '<h3>' + gameIcon + ' –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –¥–ª—è ' + gameName + '</h3>';
    html += '<button class="secondary icon-btn" onclick="closeOpponentSelector()">‚úï</button>';
    html += '</div>';

    html += '<div class="opponent-sections">';

    // –°–µ–∫—Ü–∏—è —Å –±–æ—Ç–∞–º–∏
    html += '<div class="opponent-section">';
    html += '<h4>ü§ñ –ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º</h4>';
    html += '<div class="bot-options">';

    // –†–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –±–æ—Ç–æ–≤
    const botLevels = [
        { level: 'easy', name: '–õ–µ–≥–∫–∏–π', emoji: 'üê£', description: '–î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö' },
        { level: 'medium', name: '–°—Ä–µ–¥–Ω–∏–π', emoji: 'üòê', description: '–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞' },
        { level: 'hard', name: '–°–ª–æ–∂–Ω—ã–π', emoji: 'üí™', description: '–î–ª—è –æ–ø—ã—Ç–Ω—ã—Ö' }
    ];

    botLevels.forEach(bot => {
        html += '<div class="opponent-option bot-option" onclick="selectBotLevel(\'' + gameType + '\', \'' + bot.level + '\')">';
        html += '<div class="opponent-avatar">' + bot.emoji + '</div>';
        html += '<div class="opponent-info">';
        html += '<div class="opponent-name">' + bot.name + ' –±–æ—Ç</div>';
        html += '<div class="opponent-status">' + bot.description + '</div>';
        html += '</div>';
        html += '</div>';
    });

    html += '</div>';
    html += '</div>';

    // –°–µ–∫—Ü–∏—è —Å –∏–≥—Ä–æ–∫–∞–º–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ
    html += '<div class="opponent-section">';
    html += '<h4>üë• –ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ</h4>';
    html += '<div class="opponent-list">';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏
    const otherPlayers = window.roomPlayers ? window.roomPlayers.filter(p => p.id !== (window.socket?.id || 'self')) : [];

    if (otherPlayers.length > 0) {
        otherPlayers.forEach(player => {
            const isInGame = false; // TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ –∏–≥—Ä–µ
            html += '<div class="opponent-option player-option ' + (isInGame ? 'busy' : 'available') + '" onclick="invitePlayer(\'' + player.id + '\', \'' + gameType + '\')">';
            html += '<div class="opponent-avatar">' + (player.emoji || 'üë§') + '</div>';
            html += '<div class="opponent-info">';
            html += '<div class="opponent-name">' + (player.name || '–ò–≥—Ä–æ–∫') + '</div>';
            html += '<div class="opponent-status">' + (isInGame ? '–í –∏–≥—Ä–µ' : '–ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ') + '</div>';
            html += '</div>';
            html += '<div class="opponent-status-indicator ' + (isInGame ? 'busy' : 'online') + '"></div>';
            html += '</div>';
        });
    } else {
        html += '<div class="no-players">';
        html += '<div class="no-players-icon">üë§‚ùì</div>';
        html += '<div class="no-players-text">–í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤</div>';
        html += '<div class="no-players-subtext">–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏–ª–∏ –∏–≥—Ä–∞–π—Ç–µ —Å –±–æ—Ç–æ–º!</div>';
        html += '</div>';
    }

    html += '</div>';
    html += '</div>';

    html += '</div>'; // –ó–∞–∫—Ä—ã–≤–∞–µ–º opponent-sections
    html += '</div>';

    modal.innerHTML = html;
    document.body.appendChild(modal);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        modal.style.opacity = '1';
        modal.querySelector('.modal-content').style.transform = 'scale(1)';
    }, 10);
}

function closeOpponentSelector() {
    const modal = document.querySelector('.opponent-selector');
    if (modal) {
        modal.style.opacity = '0';
        modal.querySelector('.modal-content').style.transform = 'scale(0.8)';
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
}

function selectBot(gameType) {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º —Å—Ä–µ–¥–Ω–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    selectBotLevel(gameType, 'medium');
}

function selectBotLevel(gameType, level) {
    let botEmoji = 'ü§ñ';
    let botName = '–ë–æ—Ç';

    switch (level) {
        case 'easy':
            botEmoji = 'üê£';
            botName = '–õ–µ–≥–∫–∏–π –±–æ—Ç';
            break;
        case 'medium':
            botEmoji = 'üòê';
            botName = '–°—Ä–µ–¥–Ω–∏–π –±–æ—Ç';
            break;
        case 'hard':
            botEmoji = 'üí™';
            botName = '–°–ª–æ–∂–Ω—ã–π –±–æ—Ç';
            break;
    }

    window.currentOpponent = {
        type: 'bot',
        level: level,
        name: botName,
        emoji: botEmoji
    };

    closeOpponentSelector();
    startGameWithOpponent(gameType);
}

function invitePlayer(playerId, gameType) {
    if (window.socket && window.roomId) {
        window.socket.emit('send-game-invitation', {
            roomId: window.roomId,
            targetPlayerId: playerId,
            gameType: gameType,
            senderName: window.userEmoji || '–ò–≥—Ä–æ–∫'
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        showNotification('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...', 'info');
        closeOpponentSelector();
    }
}

function showGameInvitation(data) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay game-invitation';
    modal.setAttribute('aria-hidden', 'false');
    modal.style.display = 'flex';

    let gameIcon = '';
    let gameName = '';
    switch (data.gameType) {
        case 'chess': gameIcon = '‚ôüÔ∏è'; gameName = '–®–∞—Ö–º–∞—Ç—ã'; break;
        case 'tictactoe': gameIcon = '‚≠ï'; gameName = '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏'; break;
        case 'poker': gameIcon = 'üÉè'; gameName = '–ü–æ–∫–µ—Ä'; break;
        case 'cards': gameIcon = 'üÉè'; gameName = '–ö–∞—Ä—Ç—ã'; break;
    }

    let html = '<div class="modal-content invitation-modal">';
    html += '<div class="modal-header">';
    html += '<h3>' + gameIcon + ' –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∏–≥—Ä—É</h3>';
    html += '</div>';
    html += '<div class="invitation-content">';
    html += '<div class="invitation-message">';
    html += '<div class="inviter">' + (data.senderEmoji || 'üë§') + ' ' + (data.senderName || '–ò–≥—Ä–æ–∫') + '</div>';
    html += '<div class="game-invite">–ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å —Å—ã–≥—Ä–∞—Ç—å –≤ <strong>' + gameName + '</strong></div>';
    html += '</div>';
    html += '<div class="invitation-actions">';
    html += '<button class="action-btn accept-btn" onclick="acceptInvitation(\'' + data.gameType + '\', \'' + data.senderId + '\')">‚úÖ –ü—Ä–∏–Ω—è—Ç—å</button>';
    html += '<button class="back-btn decline-btn" onclick="declineInvitation(\'' + data.senderId + '\')">‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>';
    html += '</div>';
    html += '</div>';
    html += '</div>';

    modal.innerHTML = html;
    document.body.appendChild(modal);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        modal.style.opacity = '1';
        modal.querySelector('.modal-content').style.transform = 'scale(1)';
    }, 10);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (document.querySelector('.game-invitation')) {
            declineInvitation(data.senderId);
        }
    }, 30000);
}

function acceptInvitation(gameType, senderId) {
    console.log('üéØ ACCEPTING invitation:', { gameType, senderId });
    if (window.socket && window.roomId) {
        window.socket.emit('game-invitation-response', {
            roomId: window.roomId,
            senderId: senderId,
            accepted: true,
            gameType: gameType
        });
        console.log('üì§ Sent game-invitation-response');
    }

    // –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
    const sender = window.roomPlayers.find(p => p.id === senderId);
    window.currentOpponent = {
        type: 'player',
        id: senderId,
        name: sender?.name || '–ò–≥—Ä–æ–∫',
        emoji: sender?.emoji || 'üë§'
    };

    closeInvitationModal();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø –∏–≥—Ä—ã, –Ω–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—ë —Å—Ä–∞–∑—É
    window.expectedGameType = gameType;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
    showNotification('–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...', 'info');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —É –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    console.log('üöÄ Starting game for invitation accepter');
    setTimeout(() => {
        startGameWithOpponent(gameType);
    }, 500);
}

function declineInvitation(senderId) {
    if (window.socket && window.roomId) {
        window.socket.emit('game-invitation-response', {
            roomId: window.roomId,
            senderId: senderId,
            accepted: false
        });
    }
    closeInvitationModal();
}

function closeInvitationModal() {
    const modal = document.querySelector('.game-invitation');
    if (modal) {
        modal.style.opacity = '0';
        modal.querySelector('.modal-content').style.transform = 'scale(0.8)';
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
}

function handleInvitationResponse(data) {
    console.log('üéâ HANDLING invitation response:', data);
    if (data.accepted) {
        console.log('‚úÖ Invitation ACCEPTED');
        const opponent = window.roomPlayers.find(p => p.id === data.responderId);
        window.currentOpponent = {
            type: 'player',
            id: data.responderId,
            name: opponent?.name || '–ò–≥—Ä–æ–∫',
            emoji: opponent?.emoji || 'üë§'
        };

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        console.log('üöÄ Starting game for invitation sender');
        startGameWithOpponent(data.gameType);

        showNotification('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É.', 'success');
    } else {
        console.log('‚ùå Invitation DECLINED');
        showNotification('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.', 'warning');
    }
}

function startGameWithOpponent(gameType) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–∫—Ä—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é
    try { localStorage.removeItem('wt_active_game_closed'); } catch (e) { }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    closeOpponentSelector();
    closeInvitationModal();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–≥—Ä—ã
    const panel = document.getElementById('activeGamePanel');
    if (!panel) return;
    const icon = document.getElementById('activeGameIcon');
    const title = document.getElementById('activeGameTitle');
    if (icon && title) {
        if (gameType === 'chess') { icon.textContent = '‚ôüÔ∏è'; title.textContent = '–®–∞—Ö–º–∞—Ç—ã'; }
        else if (gameType === 'tictactoe') { icon.textContent = '‚≠ï'; title.textContent = '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏'; }
        else if (gameType === 'cards') { icon.textContent = 'üÉè'; title.textContent = '–ö–∞—Ä—Ç—ã'; }
    }
    panel.classList.remove('hidden');
    panel.scrollIntoView({ behavior: 'smooth', block: 'nearest' });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    switch (gameType) {
        case 'chess':
            initNetworkChess();
            break;
        case 'tictactoe':
            initNetworkTicTacToe();
            break;
        case 'poker':
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–µ—Ä–∞
            if (!window.gameState) {
                window.gameState = {
                    gameType: 'poker',
                    gameMode: 'poker',
                    deck: [],
                    playerHand: [],
                    opponentHand: [],
                    playerScore: 0,
                    opponentScore: 0,
                    currentPlayer: 'player',
                    round: 1,
                    gamePhase: 'exchange',
                    players: [window.socket?.id, window.currentOpponent?.id]
                };
            }
            initNetworkPoker();
            break;
        case 'durak':
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥—É—Ä–∞–∫–∞
            if (!window.gameState) {
                window.gameState = {
                    gameType: 'durak',
                    gameMode: 'durak',
                    deck: [],
                    playerHand: [],
                    opponentHand: [],
                    attackingCards: [],
                    defendingCards: [],
                    trumpSuit: null,
                    gamePhase: 'attack',
                    currentAttacker: 'player',
                    players: [window.socket?.id, window.currentOpponent?.id]
                };
            }
            initNetworkDurak();
            break;
        case 'cards':
            initCards();
            break;
    }
}

function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;

    document.body.appendChild(notification);

    setTimeout(() => {
        notification.classList.add('show');
    }, 10);

    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 3000);
}

function updateParticipantsList() {
    const participantsList = document.getElementById('participantsList');
    const participantCount = document.getElementById('participantCount');

    if (!participantsList || !participantCount) return;

    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
    participantsList.innerHTML = '';

    if (!window.roomPlayers || window.roomPlayers.length === 0) {
        // –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participantsList.innerHTML = `
            <div class="no-participants">
                <div class="no-participants-icon">üë§</div>
                <div class="no-participants-text">–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</div>
            </div>
        `;
        if (participantCount) participantCount.textContent = '(0)';
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (participantCount) {
        participantCount.textContent = `(${window.roomPlayers.length})`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    window.roomPlayers.forEach(player => {
        const participantDiv = document.createElement('div');
        participantDiv.className = 'participant-item';

        participantDiv.innerHTML = `
            <div class="participant-avatar">${player.emoji || 'üë§'}</div>
            <div class="participant-info">
                <div class="participant-name">${player.name || '–ò–≥—Ä–æ–∫'}</div>
                <div class="participant-status">${player.id === window.socket?.id ? '–í—ã' : '–í —Å–µ—Ç–∏'}</div>
            </div>
        `;

        participantsList.appendChild(participantDiv);
    });
}

// Game Functions
function openGame(game) {
    console.log('openGame called with:', game);

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –∏–≥—Ä - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    if (game === 'cards') {
        console.log('Opening cards menu');
        initCards();
        return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ, –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    if (window.roomId && window.socket) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ (–∏—Å–∫–ª—é—á–∞—è —Å–µ–±—è)
        const otherPlayers = window.roomPlayers.filter(p => p.id !== (window.socket?.id || 'self'));

        if (otherPlayers.length === 0) {
            // –í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –±–æ—Ç–∞
            console.log('No other players in room, auto-selecting bot');
            window.currentOpponent = { type: 'bot', name: '–ë–æ—Ç', emoji: 'ü§ñ' };
            showNotification('–í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤. –ò–≥—Ä–∞–µ–º —Å –±–æ—Ç–æ–º! ü§ñ', 'info');
            startGameDirectly(game);
            return;
        } else {
            // –í –∫–æ–º–Ω–∞—Ç–µ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
            console.log('Other players found in room, showing opponent selector');
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
            updateRoomPlayers();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
            setTimeout(() => {
                showOpponentSelector(game);
            }, 100);
            return;
        }
    }

    // –ï—Å–ª–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –Ω–∞–ø—Ä—è–º—É—é
    if (window.currentOpponent) {
        startGameDirectly(game);
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
    updateRoomPlayers();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
    setTimeout(() => {
        showOpponentSelector(game);
    }, 100);
}

function startNetworkGame(game) {
    console.log('Starting network game:', game);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–∫—Ä—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é
    try { localStorage.removeItem('wt_active_game_closed'); } catch (e) { }

    window.currentGame = game;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    window.gameState = {
        gameType: game,
        players: [],
        currentPlayer: 0,
        gameStarted: false
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ
    if (window.socket && window.roomId) {
        window.socket.emit('start-game', {
            roomId: window.roomId,
            gameType: game
        });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–≥—Ä—ã
    const panel = document.getElementById('activeGamePanel');
    if (panel) {
        const icon = document.getElementById('activeGameIcon');
        const title = document.getElementById('activeGameTitle');
        if (icon && title) {
            if (game === 'chess') { icon.textContent = '‚ôüÔ∏è'; title.textContent = '–®–∞—Ö–º–∞—Ç—ã (—Å–µ—Ç–µ–≤–∞—è)'; }
            else if (game === 'tictactoe') { icon.textContent = '‚≠ï'; title.textContent = '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ (—Å–µ—Ç–µ–≤–∞—è)'; }
            else if (game === 'cards') { icon.textContent = 'üÉè'; title.textContent = '–ö–∞—Ä—Ç—ã (—Å–µ—Ç–µ–≤–∞—è)'; }
        }
        panel.classList.remove('hidden');
        panel.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
    const container = document.getElementById('gameContainer');
    if (container) {
        container.innerHTML = `
            <div class="game-waiting">
                <h3>–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...</h3>
                <p>–î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ —Å–º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ</p>
                <div class="game-controls">
                    <button onclick="closeGame()">–û—Ç–º–µ–Ω–∞</button>
                </div>
            </div>
        `;
    }
}

function startGameDirectly(game) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–∫—Ä—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é
    try { localStorage.removeItem('wt_active_game_closed'); } catch (e) { }

    window.currentGame = game;
    const panel = document.getElementById('activeGamePanel');
    if (!panel) return;

    if (container) {
        container.innerHTML = `
            <div class="game-waiting">
                <h3>–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...</h3>
                <p>–î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ —Å–º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ</p>
                window.currentGame = game;
        const panel = document.getElementById('activeGamePanel');
        if (!panel) return;

        const icon = document.getElementById('activeGameIcon');
        const title = document.getElementById('activeGameTitle');
        if (icon && title) {
            if (game === 'chess') { icon.textContent = '‚ôüÔ∏è'; title.textContent = '–®–∞—Ö–º–∞—Ç—ã'; }
            else if (game === 'tictactoe') { icon.textContent = '‚≠ï'; title.textContent = '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏'; }
            else if (game === 'cards') { icon.textContent = 'üÉè'; title.textContent = '–ö–∞—Ä—Ç—ã'; }
        }
        panel.classList.remove('hidden');
        panel.scrollIntoView({ behavior: 'smooth', block: 'nearest' });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        if (window.socket && window.roomId && window.currentOpponent?.type === 'player') {
            window.socket.emit('game-start', {
                roomId: window.roomId,
                gameType: game,
                opponentId: window.currentOpponent.id
            });
        } else {
            // –ï—Å–ª–∏ –∏–≥—Ä–∞–µ–º —Å –±–æ—Ç–æ–º –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            switch (game) {
                case 'chess':
                    if (window.initNetworkChess) window.initNetworkChess();
                    break;
                case 'tictactoe':
                    if (window.initNetworkTicTacToe) window.initNetworkTicTacToe();
                    break;
                case 'poker':
                    if (window.selectPoker) window.selectPoker();
                    break;
                case 'durak':
                    if (window.selectDurak) window.selectDurak();
                    break;
                case 'cards':
                    initCards();
                    break;
            }
            case 'cards':
                initCards();
                break;
        }
    }
}

function closeGame() {
    console.log('closeGame() called - closing active game');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É
    try { localStorage.setItem('wt_active_game_closed', 'true'); } catch (e) { }

    // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
    const panel = document.getElementById('activeGamePanel');
    if (panel) {
        console.log('Hiding active game panel');
        panel.classList.add('hidden');
        panel.style.display = 'none'; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è
    } else {
        console.log('Active game panel not found');
    }

    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    window.gameState = null;
    window.currentOpponent = null;
    window.currentGame = null;

    // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
    const activeGameContent = document.getElementById('activeGameContent');
    if (activeGameContent) {
        console.log('Clearing active game content');
        activeGameContent.innerHTML = '';
        activeGameContent.style.display = 'none'; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∏–≥—Ä –≤ gameContainer
    const container = document.getElementById('gameContainer');
    if (container) {
        console.log('Restoring game menu');
        container.style.display = ''; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.innerHTML = `
            <h2>üéÆ –ò–≥—Ä—ã</h2>
            <p>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞:</p>

            <div class="games-grid">
                <div class="game-card" onclick="openGame('tictactoe')">
                    <div class="game-icon">‚≠ï</div>
                    <div class="game-title">–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏</div>
                    <div class="game-description">–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ 3x3</div>
                </div>

                <div class="game-card" onclick="openGame('chess')">
                    <div class="game-icon">‚ôüÔ∏è</div>
                    <div class="game-title">–®–∞—Ö–º–∞—Ç—ã</div>
                    <div class="game-description">–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∞—è –∏–≥—Ä–∞</div>
                </div>

                <div class="game-card" onclick="openGame('cards')">
                    <div class="game-icon">üÉè</div>
                    <div class="game-title">–ö–∞—Ä—Ç–æ—á–Ω—ã–µ –∏–≥—Ä—ã</div>
                    <div class="game-description">–ü–æ–∫–µ—Ä –∏ –î—É—Ä–∞–∫</div>
                </div>
            </div>
        `;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–≥—Ä, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–∫—Ä—ã—Ç–∞
    const gamesPanel = document.getElementById('gamesPanel');
    if (gamesPanel && gamesPanel.classList.contains('collapsed')) {
        gamesPanel.classList.remove('collapsed');
        const gameContainer = document.getElementById('gameContainer');
        if (gameContainer) {
            gameContainer.style.display = '';
        }
    }

// Chess Game
// Cards Game - –ü–æ–∫–µ—Ä –∏ –î—É—Ä–∞–∫
function initCards() {
    console.log('initCards called!');
    console.trace('initCards call stack');

    const container = document.getElementById('activeGameContent');
    if (!container) return;

    let html = '';

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–ø–µ—Ä–Ω–∏–∫–µ
    if (window.currentOpponent) {
        html += '<div class="game-opponent-info">';
        html += '<div class="opponent-avatar-small">' + window.currentOpponent.emoji + '</div>';
        html += '<div class="opponent-name-small">' + window.currentOpponent.name + '</div>';
        html += '<div class="opponent-type">' + (window.currentOpponent.type === 'bot' ? '–ë–æ—Ç' : '–ò–≥—Ä–æ–∫') + '</div>';
        html += '</div>';
    }

    html += '<div class="cards-status">–ò–≥—Ä–∞ –≤ –∫–∞—Ä—Ç—ã</div>';
    html += '<div class="cards-container">';
    html += '<div class="cards-player-hand" id="playerHand"></div>';
    html += '<div class="cards-opponent-hand" id="opponentHand"></div>';
    html += '<div class="cards-table" id="cardsTable"></div>';
    html += '</div>';
    html += '<div class="cards-controls">';
    html += '<button onclick="closeGame()" class="back-btn">–ó–∞–∫—Ä—ã—Ç—å</button>';
    html += '</div>';

    container.innerHTML = html;
    container.style.display = 'block'; // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∏–¥–∏–º–æ
    console.log('HTML set to container');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É –≤ –∫–∞—Ä—Ç—ã
    window.gameState = {
        gameType: 'cards',
        playerHand: [],
        opponentHand: [],
        deck: [],
        table: [],
        gameOver: false
    };

    // –ù–∞–±–æ—Ä –∫–∞—Ä—Ç
    const suits = ['‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è', '‚ô†Ô∏è'];
    const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É
    for (let suit of suits) {
        for (let value of values) {
            window.gameState.deck.push({ suit, value });
        }
    }

    // –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
    for (let i = 0; i < 5; i++) {
        window.gameState.playerHand.push(window.gameState.deck.pop());
        window.gameState.opponentHand.push(window.gameState.deck.pop());
    }

    renderCardsGame();
}

function renderCardsGame() {
    const playerHandElement = document.getElementById('playerHand');
    const opponentHandElement = document.getElementById('opponentHand');
    const tableElement = document.getElementById('cardsTable');

    if (playerHandElement && opponentHandElement && tableElement) {
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä—É–∫—É –∏–≥—Ä–æ–∫–∞
        let playerHandHtml = '';
        window.gameState.playerHand.forEach((card, index) => {
            playerHandHtml += `<div class="card" data-index="${index}">${card.value}${card.suit}</div>`;
        });
        playerHandElement.innerHTML = playerHandHtml;

        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä—É–∫—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        let opponentHandHtml = '';
        window.gameState.opponentHand.forEach((card, index) => {
            opponentHandHtml += `<div class="card" data-index="${index}">${card.value}${card.suit}</div>`;
        });
        opponentHandElement.innerHTML = opponentHandHtml;

        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ
        let tableHtml = '';
        window.gameState.table.forEach((card, index) => {
            tableHtml += `<div class="card" data-index="${index}">${card.value}${card.suit}</div>`;
        });
        tableElement.innerHTML = tableHtml;
    }
}

function handleNetworkPokerMove(move) {
    const { action, cardIndex, playerId } = move;

    console.log('üéØ HANDLING poker move:', { action, cardIndex, playerId, currentPlayer: window.socket?.id });

    if (action === 'exchange' && cardIndex !== undefined) {
        // –ò–≥—Ä–æ–∫ –æ–±–º–µ–Ω—è–ª –∫–∞—Ä—Ç—É
        console.log('Player exchanged card at index:', cardIndex);

        // –î–ª—è —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        // –°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (window.gameState.deck && window.gameState.deck.length > 0) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—å—è —ç—Ç–æ —Ä—É–∫–∞
            const isCurrentPlayer = playerId === window.socket?.id;

            if (isCurrentPlayer) {
                // –≠—Ç–æ –Ω–∞—à —Ö–æ–¥ - –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à—É —Ä—É–∫—É
                window.gameState.playerHand[cardIndex] = window.gameState.deck.pop();
                console.log('Updated our hand');
            } else {
                // –≠—Ç–æ —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º —Ä—É–∫—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
                window.gameState.opponentHand[cardIndex] = window.gameState.deck.pop();
                console.log('Updated opponent hand');
            }

            renderPokerGame();
            showNotification(`–ò–≥—Ä–æ–∫ –æ–±–º–µ–Ω—è–ª –∫–∞—Ä—Ç—É`, 'info');
        } else {
            console.warn('No cards left in deck for exchange');
        }
    } else if (action === 'check') {
        // –ò–≥—Ä–æ–∫ –ø—Ä–æ–≤–µ—Ä–∏–ª –∫–æ–º–±–∏–Ω–∞—Ü–∏—é - –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        console.log('Player checked hand - should trigger result comparison');

        // –î–ª—è —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã –∂–¥–µ–º, –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É
        // –°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        showNotification('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π...', 'info');
    }
}

function handleNetworkCardsMove(move) {
    const { action, card, playerId, cardIndex } = move;

    console.log('üéØ HANDLING cards move:', { action, card, playerId, cardIndex, currentPlayer: window.socket?.id });

    if (action === 'play' && card) {
        // –ò–≥—Ä–æ–∫ —Å—ã–≥—Ä–∞–ª –∫–∞—Ä—Ç—É
        console.log('Player played card:', card);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á–µ–π —ç—Ç–æ —Ö–æ–¥
        const isCurrentPlayer = playerId === window.socket?.id;

        if (isCurrentPlayer) {
            // –≠—Ç–æ –Ω–∞—à —Ö–æ–¥ - —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ –Ω–∞—à–µ–π —Ä—É–∫–∏
            const index = window.gameState.playerHand.findIndex(c =>
                c.suit === card.suit && c.value === card.value
            );
            if (index !== -1) {
                window.gameState.playerHand.splice(index, 1);
            }
        } else {
            // –≠—Ç–æ —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ - —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            const index = window.gameState.opponentHand.findIndex(c =>
                c.suit === card.suit && c.value === card.value
            );
            if (index !== -1) {
                window.gameState.opponentHand.splice(index, 1);
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª
        window.gameState.attackingCards.push(card);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–∑—É –∏–≥—Ä—ã
        window.gameState.gamePhase = 'defend';

        renderDurakGame();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const playerName = isCurrentPlayer ? '–í—ã' : '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫';
        showNotification(`${playerName} —Å—ã–≥—Ä–∞–ª–∏ ${card.value}${card.suit}`, 'info');

    } else if (action === 'defend' && card) {
        // –ò–≥—Ä–æ–∫ –æ—Ç–±–∏–ª—Å—è –∫–∞—Ä—Ç–æ–π
        console.log('Player defended with card:', card);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á–µ–π —ç—Ç–æ —Ö–æ–¥
        const isCurrentPlayer = playerId === window.socket?.id;

        if (isCurrentPlayer) {
            // –≠—Ç–æ –Ω–∞—à —Ö–æ–¥ - —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ –Ω–∞—à–µ–π —Ä—É–∫–∏
            const index = window.gameState.playerHand.findIndex(c =>
                c.suit === card.suit && c.value === card.value
            );
            if (index !== -1) {
                window.gameState.playerHand.splice(index, 1);
            }
        } else {
            // –≠—Ç–æ —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ - —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            const index = window.gameState.opponentHand.findIndex(c =>
                c.suit === card.suit && c.value === card.value
            );
            if (index !== -1) {
                window.gameState.opponentHand.splice(index, 1);
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ defendingCards
        const lastAttackIndex = window.gameState.attackingCards.length - 1;
        window.gameState.defendingCards[lastAttackIndex] = card;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã
        const allDefended = window.gameState.attackingCards.length === window.gameState.defendingCards.length;

        if (allDefended) {
            // –í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã - –æ—á–∏—â–∞–µ–º —Å—Ç–æ–ª –∏ –º–µ–Ω—è–µ–º –∞—Ç–∞–∫—É—é—â–µ–≥–æ
            window.gameState.attackingCards = [];
            window.gameState.defendingCards = [];
            window.gameState.currentAttacker = window.gameState.currentAttacker === 'player' ? 'opponent' : 'player';
            window.gameState.gamePhase = 'attack';

            // –î–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã
            refillDurakHands();
        }

        renderDurakGame();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const playerName = isCurrentPlayer ? '–í—ã' : '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫';
        showNotification(`${playerName} –æ—Ç–±–∏–ª–∏—Å—å ${card.value}${card.suit}`, 'info');

    } else if (action === 'take') {
        // –ò–≥—Ä–æ–∫ –≤–∑—è–ª –∫–∞—Ä—Ç—ã
        console.log('Player took cards');

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á–µ–π —ç—Ç–æ —Ö–æ–¥
        const isCurrentPlayer = playerId === window.socket?.id;

        if (isCurrentPlayer) {
            // –ú—ã –≤–∑—è–ª–∏ –∫–∞—Ä—Ç—ã
            window.gameState.playerHand.push(...window.gameState.attackingCards);
            window.gameState.playerHand.push(...window.gameState.defendingCards);
        } else {
            // –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–∑—è–ª –∫–∞—Ä—Ç—ã
            window.gameState.opponentHand.push(...window.gameState.attackingCards);
            window.gameState.opponentHand.push(...window.gameState.defendingCards);
        }

        // –û—á–∏—â–∞–µ–º —Å—Ç–æ–ª
        window.gameState.attackingCards = [];
        window.gameState.defendingCards = [];

        // –ú–µ–Ω—è–µ–º –∞—Ç–∞–∫—É—é—â–µ–≥–æ
        window.gameState.currentAttacker = window.gameState.currentAttacker === 'player' ? 'opponent' : 'player';
        window.gameState.gamePhase = 'attack';

        // –î–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã
        refillDurakHands();

        renderDurakGame();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const playerName = isCurrentPlayer ? '–í—ã' : '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫';
        showNotification(`${playerName} –≤–∑—è–ª–∏ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞`, 'info');

    } else if (action === 'pass') {
        // –ò–≥—Ä–æ–∫ –ø–∞—Å—É–µ—Ç
        console.log('Player passed');

        // –õ–æ–≥–∏–∫–∞ –ø–∞—Å–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã
        if (window.gameState.gamePhase === 'attack') {
            // –ê—Ç–∞–∫—É—é—â–∏–π –ø–∞—Å—É–µ—Ç - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥
            window.gameState.attackingCards = [];
            window.gameState.defendingCards = [];
            window.gameState.currentAttacker = window.gameState.currentAttacker === 'player' ? 'opponent' : 'player';
            window.gameState.gamePhase = 'attack';
            refillDurakHands();
        } else if (window.gameState.gamePhase === 'defend') {
            // –ó–∞—â–∏—â–∞—é—â–∏–π—Å—è –ø–∞—Å—É–µ—Ç - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥
            window.gameState.attackingCards = [];
            window.gameState.defendingCards = [];
            window.gameState.currentAttacker = window.gameState.currentAttacker === 'player' ? 'opponent' : 'player';
            window.gameState.gamePhase = 'attack';
            refillDurakHands();
        }

        renderDurakGame();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const playerName = playerId === window.socket?.id ? '–í—ã' : '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫';
        showNotification(`${playerName} –ø–∞—Å–æ–≤–∞–ª–∏`, 'info');
    }
}

function makeBotMove() {
    if (window.gameState.gameOver) return;

    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ –¥–ª—è –∫—Ä–µ—Å—Ç–∏–∫–æ–≤-–Ω–æ–ª–∏–∫–æ–≤
    const availableMoves = [];
    for (let row = 0; row < 3; row++) {
        for (let col = 0; col < 3; col++) {
            if (window.gameState.board[row][col] === '') {
                availableMoves.push({ row, col });
            }
        }
    }

    if (availableMoves.length > 0) {
        // –ë–æ—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–∏–≥—Ä–∞—Ç—å –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞
        let bestMove = findBestMove() || availableMoves[Math.floor(Math.random() * availableMoves.length)];

        window.gameState.board[bestMove.row][bestMove.col] = window.gameState.currentPlayer;
        window.gameState.currentPlayer = window.gameState.currentPlayer === 'X' ? 'O' : 'X';

        checkTicTacToeWinner();
        renderTicTacToeBoard();
    }
}

function startNewPokerGame() {
    console.log('startNewPokerGame called');

    // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    window.gameState = {
        gameMode: 'poker',
        deck: [],
        playerHand: [],
        opponentHand: [],
        playerScore: 0,
        opponentScore: 0,
        currentPlayer: 'player',
        round: 1,
        gamePhase: 'exchange',
        winner: null
    };

    createDeck();
    shuffleDeck();
    dealPokerCards();
    renderPokerGame();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification('üéÆ –ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞ –≤ –ø–æ–∫–µ—Ä!', 'info');
}

// Cards Game - –ü–æ–∫–µ—Ä –∏ –î—É—Ä–∞–∫
function initCards() {
    console.log('initCards called'); // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –º–µ–Ω—é –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –∏–≥—Ä
    window.gameState = {
        gameMode: 'menu', // 'menu', 'poker', 'durak'
        deck: [],
        playerHand: [],
        opponentHand: [],
        attackingCards: [],
        defendingCards: [],
        trumpSuit: null,
        gamePhase: 'attack',
        currentAttacker: 'player'
    };

    renderCardsMenu();
}

function renderCardsMenu() {
    console.log('renderCardsMenu called'); // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    const activeGamePanel = document.getElementById('activeGamePanel');
    console.log('activeGamePanel found:', !!activeGamePanel);
    if (activeGamePanel) {
        activeGamePanel.classList.remove('hidden');
        activeGamePanel.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
        document.getElementById('activeGameTitle').textContent = '–ö–∞—Ä—Ç–æ—á–Ω—ã–µ –∏–≥—Ä—ã';
        document.getElementById('activeGameIcon').textContent = 'üÉè';
    }

    const gamePanel = document.getElementById('activeGameContent');
    console.log('gamePanel (activeGameContent) found:', !!gamePanel);
    if (!gamePanel) {
        console.error('activeGameContent not found!');
        return;
    }

    gamePanel.style.display = 'block'; // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∏–¥–∏–º–æ

    let html = '<div class="cards-menu">';

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–ø–µ—Ä–Ω–∏–∫–µ
    if (window.currentOpponent) {
        html += '<div class="game-opponent-info">';
        html += '<div class="opponent-avatar-small">' + window.currentOpponent.emoji + '</div>';
        html += '<div class="opponent-name-small">' + window.currentOpponent.name + '</div>';
        html += '<div class="opponent-type">' + (window.currentOpponent.type === 'bot' ? '–ë–æ—Ç' : '–ò–≥—Ä–æ–∫') + '</div>';
        html += '</div>';
    }

    html += '<h3>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:</h3>';
    html += '<div class="game-selection">';
    html += '<button class="game-mode-btn" onclick="selectPoker()">üÉè –ü–æ–∫–µ—Ä</button>';
    html += '<button class="game-mode-btn" onclick="selectDurak()">üé¥ –î—É—Ä–∞–∫</button>';
    html += '</div>';
    html += '<div class="game-rules">';
    html += '<div class="rules-section">';
    html += '<h4>–ü—Ä–∞–≤–∏–ª–∞ –ü–æ–∫–µ—Ä–∞:</h4>';
    html += '<ul>';
    html += '<li>–ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç 5 –∫–∞—Ä—Ç</li>';
    html += '<li>–¶–µ–ª—å: —Å–æ–±—Ä–∞—Ç—å –ª—É—á—à—É—é –ø–æ–∫–µ—Ä–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é</li>';
    html += '<li>–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é): –ø–∞—Ä–∞, –¥–≤–µ –ø–∞—Ä—ã, —Ç—Ä–æ–π–∫–∞, —Å—Ç—Ä–∏—Ç, —Ñ–ª–µ—à, —Ñ—É–ª-—Ö–∞—É—Å, –∫–∞—Ä–µ, —Å—Ç—Ä–∏—Ç-—Ñ–ª–µ—à</li>';
    html += '<li>–ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –¥–æ 3 –∫–∞—Ä—Ç –∑–∞ —Ä–∞–∑</li>';
    html += '</ul>';
    html += '</div>';
    html += '<div class="rules-section">';
    html += '<h4>–ü—Ä–∞–≤–∏–ª–∞ –î—É—Ä–∞–∫–∞:</h4>';
    html += '<ul>';
    html += '<li>–ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç 6 –∫–∞—Ä—Ç, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–æ–∑—ã—Ä–Ω–∞—è –º–∞—Å—Ç—å</li>';
    html += '<li>–¶–µ–ª—å: –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö –∫–∞—Ä—Ç –ø–µ—Ä–≤—ã–º</li>';
    html += '<li>–ê—Ç–∞–∫—É—é—â–∏–π –∫–ª–∞–¥—ë—Ç –∫–∞—Ä—Ç—É, –∑–∞—â–∏—â–∞—é—â–∏–π—Å—è –¥–æ–ª–∂–µ–Ω –ø–æ–±–∏—Ç—å –µ—ë</li>';
    html += '<li>–ë–∏—Ç—å –º–æ–∂–Ω–æ —Å—Ç–∞—Ä—à–µ–π –∫–∞—Ä—Ç–æ–π —Ç–æ–π –∂–µ –º–∞—Å—Ç–∏ –∏–ª–∏ –∫–æ–∑—ã—Ä–µ–º</li>';
    html += '<li>–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –ø–æ–±–∏—Ç—å - –∑–∞–±–∏—Ä–∞–µ—à—å –≤—Å–µ –∫–∞—Ä—Ç—ã</li>';
    html += '</ul>';
    html += '</div>';
    html += '</div>';
    html += '<button onclick="closeGame()" class="close-btn">–ó–∞–∫—Ä—ã—Ç—å</button>';
    html += '</div>';

    gamePanel.innerHTML = html;
    console.log('HTML set to gamePanel'); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ HTML —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
}

function startPoker() {
    console.log('startPoker called');

    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–æ–∫–µ—Ä–∞
    window.gameState = {
        gameMode: 'poker',
        deck: [],
        playerHand: [],
        opponentHand: [],
        playerScore: window.gameState?.playerScore || 0,
        opponentScore: window.gameState?.opponentScore || 0,
        currentPlayer: 'player',
        round: window.gameState?.round || 1,
        gamePhase: 'exchange', // 'exchange' –∏–ª–∏ 'finished'
        winner: null
    };

    createDeck();
    shuffleDeck();
    dealPokerCards();
    renderPokerGame();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∏–≥—Ä—ã
    const activeGamePanel = document.getElementById('activeGamePanel');
    if (activeGamePanel) {
        document.getElementById('activeGameTitle').textContent = '–ü–æ–∫–µ—Ä';
        document.getElementById('activeGameIcon').textContent = 'üÉè';
    }
}

function startDurak() {
    console.log('startDurak called'); // –û—Ç–ª–∞–¥–∫–∞

    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –¥—É—Ä–∞–∫–∞
    window.gameState = {
        gameMode: 'durak',
        deck: [],
        playerHand: [],
        opponentHand: [],
        attackingCards: [],
        defendingCards: [],
        trumpSuit: null,
        gamePhase: 'attack',
        currentAttacker: 'player'
    };

    console.log('Creating deck...'); // –û—Ç–ª–∞–¥–∫–∞
    createDeck();
    console.log('Shuffling deck...'); // –û—Ç–ª–∞–¥–∫–∞
    shuffleDeck();
    console.log('Setting trump suit...'); // –û—Ç–ª–∞–¥–∫–∞
    setTrumpSuit();
    console.log('Dealing durak cards...'); // –û—Ç–ª–∞–¥–∫–∞
    dealDurakCards();
    console.log('Rendering durak game...'); // –û—Ç–ª–∞–¥–∫–∞

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
    const activeGamePanel = document.getElementById('activeGamePanel');
    if (activeGamePanel) {
        activeGamePanel.classList.remove('hidden');
        document.getElementById('activeGameTitle').textContent = '–î—É—Ä–∞–∫';
        document.getElementById('activeGameIcon').textContent = 'üé¥';
    }

    renderDurakGame();
}

function selectDurak() {
    console.log('selectDurak called');
    showOpponentSelector('durak');
}

function selectPoker() {
    console.log('selectPoker called');
    showOpponentSelector('poker');
}

function getCardPower(value) {
    const powers = { '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14 };
    return powers[value] || 0;
}

function createDeck() {
    window.gameState.deck = [];
    const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
    const values = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']; // –î—É—Ä–∞–∫ –∏–≥—Ä–∞–µ—Ç—Å—è —Å 36 –∫–∞—Ä—Ç–∞–º–∏

    const getCardPower = (value) => {
        const powers = { '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14 };
        return powers[value] || 0;
    };

    for (let suit of suits) {
        for (let value of values) {
            window.gameState.deck.push({ suit, value, power: getCardPower(value) });
        }
    }
}

function shuffleDeck() {
    for (let i = window.gameState.deck.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [window.gameState.deck[i], window.gameState.deck[j]] = [window.gameState.deck[j], window.gameState.deck[i]];
    }
}

function setTrumpSuit() {
    if (window.gameState.deck.length > 0) {
        window.gameState.trumpSuit = window.gameState.deck[window.gameState.deck.length - 1].suit;
    }
}

function dealPokerCards() {
    window.gameState.playerHand = [];
    window.gameState.opponentHand = [];

    for (let i = 0; i < 5; i++) {
        window.gameState.playerHand.push(window.gameState.deck.pop());
        window.gameState.opponentHand.push(window.gameState.deck.pop());
    }
}

function dealDurakCards() {
    console.log('dealDurakCards called'); // –û—Ç–ª–∞–¥–∫–∞
    window.gameState.playerHand = [];
    window.gameState.opponentHand = [];

    console.log('Deck length before dealing:', window.gameState.deck.length); // –û—Ç–ª–∞–¥–∫–∞

    for (let i = 0; i < 6; i++) {
        if (window.gameState.deck.length > 0) {
            window.gameState.playerHand.push(window.gameState.deck.pop());
        }
        if (window.gameState.deck.length > 0) {
            window.gameState.opponentHand.push(window.gameState.deck.pop());
        }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º (—É –∫–æ–≥–æ —Å–∞–º—ã–π –º–ª–∞–¥—à–∏–π –∫–æ–∑—ã—Ä—å)
    determineFirstPlayer();

    console.log('Player hand:', window.gameState.playerHand); // –û—Ç–ª–∞–¥–∫–∞
    console.log('Opponent hand:', window.gameState.opponentHand); // –û—Ç–ª–∞–¥–∫–∞
    console.log('First attacker:', window.gameState.currentAttacker); // –û—Ç–ª–∞–¥–∫–∞
}

function determineFirstPlayer() {
    const trumpSuit = window.gameState.trumpSuit;

    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–∑—ã—Ä–∏ —É –∏–≥—Ä–æ–∫–∞
    const playerTrumps = window.gameState.playerHand.filter(card => card.suit === trumpSuit);
    const opponentTrumps = window.gameState.opponentHand.filter(card => card.suit === trumpSuit);

    let playerLowestTrump = null;
    let opponentLowestTrump = null;

    if (playerTrumps.length > 0) {
        playerLowestTrump = playerTrumps.reduce((lowest, card) =>
            card.power < lowest.power ? card : lowest
        );
    }

    if (opponentTrumps.length > 0) {
        opponentLowestTrump = opponentTrumps.reduce((lowest, card) =>
            card.power < lowest.power ? card : lowest
        );
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
    if (playerLowestTrump && opponentLowestTrump) {
        // –£ –æ–±–æ–∏—Ö –µ—Å—Ç—å –∫–æ–∑—ã—Ä–∏ - —Ö–æ–¥–∏—Ç —Ç–æ—Ç, —É –∫–æ–≥–æ –º–µ–Ω—å—à–µ
        if (playerLowestTrump.power < opponentLowestTrump.power) {
            window.gameState.currentAttacker = 'player';
            window.gameState.gamePhase = 'attack';
        } else {
            window.gameState.currentAttacker = 'bot';
            window.gameState.gamePhase = 'defend'; // –ò–≥—Ä–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è
            // –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç –ø–µ—Ä–≤—ã–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∏–≥—Ä—ã –æ—Ç–∫—Ä—ã—Ç–∞
            const activeGamePanel = document.getElementById('activeGamePanel');
            if (activeGamePanel && !activeGamePanel.classList.contains('hidden')) {
                setTimeout(() => {
                    makeDurakBotAttack();
                }, 1000);
            }
        }
    } else if (playerLowestTrump) {
        // –¢–æ–ª—å–∫–æ —É –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å –∫–æ–∑—ã—Ä–∏ - –æ–Ω —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
        window.gameState.currentAttacker = 'player';
        window.gameState.gamePhase = 'attack';
    } else if (opponentLowestTrump) {
        // –¢–æ–ª—å–∫–æ —É –±–æ—Ç–∞ –µ—Å—Ç—å –∫–æ–∑—ã—Ä–∏ - –æ–Ω —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
        window.gameState.currentAttacker = 'bot';
        window.gameState.gamePhase = 'defend';
        // –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç –ø–µ—Ä–≤—ã–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∏–≥—Ä—ã –æ—Ç–∫—Ä—ã—Ç–∞
        const activeGamePanel = document.getElementById('activeGamePanel');
        if (activeGamePanel && !activeGamePanel.classList.contains('hidden')) {
            setTimeout(() => {
                makeDurakBotAttack();
            }, 1000);
        }
    } else {
        // –ù–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –∫–æ–∑—ã—Ä–µ–π - –∏–≥—Ä–æ–∫ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        window.gameState.currentAttacker = 'player';
        window.gameState.gamePhase = 'attack';
    }
}

function renderPokerGame() {
    console.log('renderPokerGame called');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
    const activeGamePanel = document.getElementById('activeGamePanel');
    if (activeGamePanel) {
        activeGamePanel.classList.remove('hidden');
        activeGamePanel.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
        document.getElementById('activeGameTitle').textContent = '–ü–æ–∫–µ—Ä';
        document.getElementById('activeGameIcon').textContent = 'üÉè';
    }

    const gamePanel = document.getElementById('activeGameContent');
    if (!gamePanel) return;

    let html = '<div class="poker-game">';

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–ø–µ—Ä–Ω–∏–∫–µ
    if (window.currentOpponent) {
        html += '<div class="game-opponent-info">';
        html += '<div class="opponent-avatar-small">' + window.currentOpponent.emoji + '</div>';
        html += '<div class="opponent-name-small">' + window.currentOpponent.name + '</div>';
        html += '<div class="opponent-type">' + (window.currentOpponent.type === 'bot' ? '–ë–æ—Ç' : '–ò–≥—Ä–æ–∫') + '</div>';
        html += '</div>';
    }

    html += '<h3>üÉè –ü–æ–∫–µ—Ä</h3>';
    html += '<div class="game-info">';
    html += '<div>–†–∞—É–Ω–¥: <strong>' + window.gameState.round + '</strong></div>';
    html += '<div>–í–∞—à —Å—á—ë—Ç: ' + window.gameState.playerScore + '</div>';
    html += '<div>–°—á—ë—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: ' + window.gameState.opponentScore + '</div>';
    html += '</div>';

    // –ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–≤–≤–µ—Ä—Ö—É)
    html += '<div class="opponent-cards">';
    html += '<h4>–ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:</h4>';
    html += '<div class="cards-hand opponent-hand">';
    for (let i = 0; i < window.gameState.opponentHand.length; i++) {
        if (window.gameState.gamePhase === 'waiting' || window.gameState.gamePhase === 'finished') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            const card = window.gameState.opponentHand[i];
            const suitClass = getSuitClass(card.suit);
            html += '<div class="card ' + suitClass + ' revealed" data-index="' + i + '">';
            html += '<div class="card-value">' + card.value + '</div>';
            html += '<div class="card-suit">' + card.suit + '</div>';
            html += '</div>';
        } else {
            // –í —Ñ–∞–∑–µ –æ–±–º–µ–Ω–∞ –∫–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã
            html += '<div class="card card-back">üÇ†</div>';
        }
    }
    html += '</div>';
    html += '</div>';

    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å (–¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∏–ª–∏ –æ–±–º–µ–Ω–∞)
    html += '<div class="poker-center">';
    if (window.gameState.gamePhase === 'finished') {
        const winner = window.gameState.winner;
        html += '<div class="game-result">';
        if (winner === 'player') {
            html += '<div style="color: #28a745; font-size: 24px; font-weight: bold;">üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∏–≥—Ä—É!</div>';
        } else if (winner === 'opponent') {
            html += '<div style="color: #dc3545; font-size: 24px; font-weight: bold;">üòû –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª –∏–≥—Ä—É!</div>';
        } else {
            html += '<div style="color: #ffc107; font-size: 24px; font-weight: bold;">ü§ù –ù–∏—á—å—è –≤ –∏–≥—Ä–µ!</div>';
        }
        html += '<div style="margin-top: 10px;">–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ü–µ—Ä–≤—ã–π, –∫—Ç–æ –Ω–∞–±—Ä–∞–ª 10 –æ—á–∫–æ–≤, –ø–æ–±–µ–∂–¥–∞–µ—Ç!</div>';
        html += '</div>';
    } else if (window.gameState.gamePhase === 'waiting') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–æ–ª —Å –∫–∞—Ä—Ç–∞–º–∏
        html += '<div class="poker-table">';
        html += '<div class="table-title">–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π</div>';

        // –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ
        html += '<div class="table-player-cards">';
        html += '<div class="player-label">–í–∞—à–∏ –∫–∞—Ä—Ç—ã:</div>';
        html += '<div class="table-cards-row">';
        for (let i = 0; i < window.gameState.playerHand.length; i++) {
            const card = window.gameState.playerHand[i];
            const suitClass = getSuitClass(card.suit);
            html += '<div class="card ' + suitClass + ' on-table" data-index="' + i + '">';
            html += '<div class="card-value">' + card.value + '</div>';
            html += '<div class="card-suit">' + card.suit + '</div>';
            html += '</div>';
        }
        html += '</div>';
        html += '</div>';

        // –ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–∞ —Å—Ç–æ–ª–µ
        html += '<div class="table-opponent-cards">';
        html += '<div class="opponent-label">–ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:</div>';
        html += '<div class="table-cards-row">';
        for (let i = 0; i < window.gameState.opponentHand.length; i++) {
            const card = window.gameState.opponentHand[i];
            const suitClass = getSuitClass(card.suit);
            html += '<div class="card ' + suitClass + ' on-table" data-index="' + i + '">';
            html += '<div class="card-value">' + card.value + '</div>';
            html += '<div class="card-suit">' + card.suit + '</div>';
            html += '</div>';
        }
        html += '</div>';
        html += '</div>';

        html += '</div>';

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        html += '<div class="poker-status">–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...</div>';
    } else if (window.gameState.gamePhase === 'exchange') {
        html += '<div class="poker-status">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—ã –¥–ª—è –æ–±–º–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é</div>';
    }
    html += '</div>';

    // –í–∞—à–∏ –∫–∞—Ä—Ç—ã (–≤–Ω–∏–∑—É)
    html += '<div class="player-cards">';
    html += '<h4>–í–∞—à–∏ –∫–∞—Ä—Ç—ã:</h4>';
    html += '<div class="cards-hand player-hand">';
    for (let i = 0; i < window.gameState.playerHand.length; i++) {
        const card = window.gameState.playerHand[i];
        const suitClass = getSuitClass(card.suit);
        const isSelected = card.selected ? ' selected' : '';
        html += '<div class="card ' + suitClass + isSelected + '" data-index="' + i + '">';
        html += '<div class="card-value">' + card.value + '</div>';
        html += '<div class="card-suit">' + card.suit + '</div>';
        html += '</div>';
    }
    html += '</div>';
    html += '</div>';

    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    html += '<div class="poker-controls">';
    if (window.gameState.gamePhase === 'finished') {
        html += '<button onclick="startNewPokerGame()" class="action-btn">üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞</button>';
    } else if (window.gameState.gamePhase === 'exchange') {
        html += '<button onclick="exchangeCards()" class="action-btn">–û–±–º–µ–Ω—è—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ</button>';
        html += '<button onclick="checkPokerHand()" class="action-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é</button>';
        html += '<button onclick="newPokerRound()" class="action-btn">–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥</button>';
    } else if (window.gameState.gamePhase === 'waiting') {
        // –§–∞–∑–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ - –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã
        html += '<button disabled class="action-btn" style="opacity: 0.5;">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...</button>';
    }
    html += '<button onclick="backToMenu()" class="back-btn">–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é</button>';
    html += '</div>';

    html += '</div>';
    gamePanel.innerHTML = html;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç
    addPokerCardHandlers();
}

function renderDurakGame() {
    console.log('renderDurakGame called'); // –û—Ç–ª–∞–¥–∫–∞

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –∏ —Å–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    const activeGamePanel = document.getElementById('activeGamePanel');
    const gameContainer = document.getElementById('gameContainer');

    if (activeGamePanel) {
        activeGamePanel.classList.remove('hidden');
        activeGamePanel.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
        document.getElementById('activeGameTitle').textContent = '–î—É—Ä–∞–∫';
        document.getElementById('activeGameIcon').textContent = 'üé¥';
    }

    const gamePanel = document.getElementById('activeGameContent');
    console.log('gamePanel for durak:', gamePanel); // –û—Ç–ª–∞–¥–∫–∞
    if (!gamePanel) {
        console.error('activeGameContent not found!');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ gameState –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!window.gameState) {
        console.error('gameState not initialized');
        return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!window.gameState.opponentHand) window.gameState.opponentHand = [];
    if (!window.gameState.playerHand) window.gameState.playerHand = [];
    if (!window.gameState.attackingCards) window.gameState.attackingCards = [];
    if (!window.gameState.defendingCards) window.gameState.defendingCards = [];

    console.log('gameState:', window.gameState); // –û—Ç–ª–∞–¥–∫–∞
    console.log('playerHand length:', window.gameState.playerHand.length);
    console.log('opponentHand length:', window.gameState.opponentHand.length);
    console.log('–§–∞–∑–∞ –∏–≥—Ä—ã:', window.gameState.gamePhase, '–ê—Ç–∞–∫—É—é—â–∏–π:', window.gameState.currentAttacker);
    console.log('–ê—Ç–∞–∫—É—é—â–∏–µ –∫–∞—Ä—Ç—ã:', window.gameState.attackingCards);
    console.log('–ó–∞—â–∏—â–∞—é—â–∏–µ –∫–∞—Ä—Ç—ã:', window.gameState.defendingCards);

    let html = '<div class="cards-menu">';
    if (window.currentOpponent) {
        html += '<div class="game-opponent-info">';
        html += '<div class="opponent-avatar-small">' + window.currentOpponent.emoji + '</div>';
        html += '<div class="opponent-name-small">' + window.currentOpponent.name + '</div>';
        html += '<div class="opponent-type">' + (window.currentOpponent.type === 'bot' ? '–ë–æ—Ç' : '–ò–≥—Ä–æ–∫') + '</div>';
        html += '</div>';
    }

    html += '<h3>üé¥ –î—É—Ä–∞–∫</h3>';
    html += '<div class="game-info">';
    html += '<div>–ö–æ–∑—ã—Ä—å: <span class="trump-suit ' + (window.gameState.trumpSuit ? getSuitClass(window.gameState.trumpSuit) : '') + '">' + (window.gameState.trumpSuit || '?') + '</span></div>';
    html += '<div>–ö–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ: ' + (window.gameState.deck ? window.gameState.deck.length : 0) + '</div>';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ç–æ —Å–µ–π—á–∞—Å –∞—Ç–∞–∫—É–µ—Ç
    const currentPhase = window.gameState.gamePhase === 'attack' ? '–ê—Ç–∞–∫–∞' : '–ó–∞—â–∏—Ç–∞';
    const currentAttacker = window.gameState.currentAttacker === 'player' ? '–í—ã' : '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫';
    html += '<div>–§–∞–∑–∞: ' + currentPhase + ' (' + currentAttacker + ')</div>';
    html += '</div>';

    // –ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–≤–≤–µ—Ä—Ö—É)
    html += '<div class="opponent-cards">';
    html += '<h4>–ö–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (' + window.gameState.opponentHand.length + '):</h4>';
    html += '<div class="cards-hand opponent-hand">';
    for (let i = 0; i < window.gameState.opponentHand.length; i++) {
        html += '<div class="card card-back">üÇ†</div>';
    }
    html += '</div>';
    html += '</div>';

    // –í–∞—à–∏ –∫–∞—Ä—Ç—ã (–≤–Ω–∏–∑—É)
    html += '<div class="player-cards">';
    html += '<h4>–í–∞—à–∏ –∫–∞—Ä—Ç—ã:</h4>';
    html += '<div class="cards-hand player-hand">';
    for (let i = 0; i < window.gameState.playerHand.length; i++) {
        const card = window.gameState.playerHand[i];
        if (card && card.suit && card.value) {
            const suitClass = getSuitClass(card.suit);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏–≥—Ä–∞—Ç—å —ç—Ç–æ–π –∫–∞—Ä—Ç–æ–π
            let canPlay = false;
            try {
                if (window.gameState.gamePhase === 'attack' && window.gameState.currentAttacker === 'player') {
                    // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
                    if (window.gameState.attackingCards.length === 0) {
                        canPlay = true; // –ü–µ—Ä–≤–∞—è –∞—Ç–∞–∫–∞ - –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π
                    } else {
                        canPlay = canAttackOrThrowCard && canAttackOrThrowCard(card);
                    }
                } else if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'player') {
                    // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫–æ–≤–∞–ª, –±–æ—Ç –∑–∞—â–∏—â–∞–µ—Ç—Å—è, –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã
                    const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);
                    if (allDefended) {
                        canPlay = canAttackOrThrowCard && canAttackOrThrowCard(card);
                    }
                } else if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
                    // –ò–≥—Ä–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è –æ—Ç –±–æ—Ç–∞
                    const undefendedCards = window.gameState.attackingCards.filter((_, index) => !window.gameState.defendingCards[index]);
                    canPlay = undefendedCards.some(attackCard => canDefendCard && canDefendCard(card, attackCard));
                } else if (window.gameState.gamePhase === 'attack' && window.gameState.currentAttacker === 'bot') {
                    // –ë–æ—Ç –∞—Ç–∞–∫–æ–≤–∞–ª, –Ω–æ –µ—â–µ –Ω–µ –≤—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã - –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å
                    const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);
                    if (allDefended) {
                        canPlay = canAttackOrThrowCard && canAttackOrThrowCard(card);
                    }
                }
            } catch (e) {
                console.error('Error checking if card can be played:', e);
                canPlay = true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏–≥—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ–π
            }

            const playableClass = canPlay ? ' playable' : '';
            html += '<div class="card ' + suitClass + playableClass + '" data-index="' + i + '" onclick="playDurakCard(' + i + ')">';
            html += '<div class="card-value">' + card.value + '</div>';
            html += '<div class="card-suit">' + card.suit + '</div>';
            html += '</div>';
        }
    }
    html += '</div>';
    html += '</div>';

    // –°—Ç–æ–ª (–ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ)
    html += '<div class="durak-table">';
    html += '<h4>–°—Ç–æ–ª:</h4>';
    html += '<div class="table-cards">';
    for (let i = 0; i < window.gameState.attackingCards.length; i++) {
        const attackCard = window.gameState.attackingCards[i];
        const defendCard = window.gameState.defendingCards[i];

        html += '<div class="card-pair">';
        html += '<div class="card ' + getSuitClass(attackCard.suit) + ' attacking">';
        html += '<div class="card-value">' + attackCard.value + '</div>';
        html += '<div class="card-suit">' + attackCard.suit + '</div>';
        html += '</div>';

        if (defendCard) {
            html += '<div class="card ' + getSuitClass(defendCard.suit) + ' defending">';
            html += '<div class="card-value">' + defendCard.value + '</div>';
            html += '<div class="card-suit">' + defendCard.suit + '</div>';
            html += '</div>';
        }
        html += '</div>';
    }
    html += '</div>';
    html += '</div>';

    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    html += '<div class="durak-controls">';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã –∏–≥—Ä—ã
    if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
        // –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç, –∏–≥—Ä–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è
        html += '<button onclick="takeDurakCards()" class="action-btn">–í–∑—è—Ç—å –∫–∞—Ä—Ç—ã</button>';
        html += '<button onclick="passDurakTurn()" class="action-btn">–ü–∞—Å (–≤–∑—è—Ç—å)</button>';
    }

    if (window.gameState.gamePhase === 'attack' && window.gameState.currentAttacker === 'player') {
        // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç - –º–æ–∂–µ—Ç –ø–∞—Å–æ–≤–∞—Ç—å (–∑–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ç–∞–∫—É)
        if (window.gameState.attackingCards.length > 0) {
            html += '<button onclick="passDurakTurn()" class="action-btn">–ü–∞—Å (–∑–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ç–∞–∫—É)</button>';
        }
    }

    if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'player') {
        // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫–æ–≤–∞–ª, –±–æ—Ç –æ—Ç–±–∏–ª—Å—è, –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å –∏–ª–∏ –ø–∞—Å–æ–≤–∞—Ç—å
        const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);
        if (allDefended && window.gameState.attackingCards.length > 0) {
            html += '<button onclick="passDurakTurn()" class="action-btn">–ü–∞—Å (–æ—Ç–±–æ–π)</button>';
        }
    }

    if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
        // –ë–æ—Ç –∞—Ç–∞–∫–æ–≤–∞–ª, –∏–≥—Ä–æ–∫ –æ—Ç–±–∏–ª—Å—è, —Ç–µ–ø–µ—Ä—å –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–∞—Å–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–±–æ—è
        const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);
        if (allDefended && window.gameState.attackingCards.length > 0) {
            html += '<button onclick="passDurakTurn()" class="action-btn">–ü–∞—Å (–æ—Ç–±–æ–π)</button>';
        }
    }

    html += '<button onclick="newDurakRound()" class="action-btn">–ù–æ–≤–∞—è –∏–≥—Ä–∞</button>';
    html += '<button onclick="closeGame()" class="back-btn">–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é</button>';
    html += '</div>';

    html += '</div>';

    try {
        gamePanel.innerHTML = html;
        console.log('Durak HTML set successfully');
    } catch (e) {
        console.error('Error setting durak HTML:', e);
    }
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥—É—Ä–∞–∫–∞
function testDurak() {
    console.log('testDurak called');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –∫–∞–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    window.currentOpponent = {
        name: '–£–º–Ω—ã–π –ë–æ—Ç',
        emoji: 'ü§ñ',
        type: 'bot'
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    startDurak();
}

function getSuitClass(suit) {
    switch (suit) {
        case '‚ô•': return 'hearts';
        case '‚ô¶': return 'diamonds';
        case '‚ô£': return 'clubs';
        case '‚ô†': return 'spades';
        default: return '';
    }
}

function addPokerCardHandlers() {
    const cards = document.querySelectorAll('.player-cards .card');
    cards.forEach(card => {
        card.addEventListener('click', function () {
            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —É –≤—Å–µ—Ö –∫–∞—Ä—Ç
            cards.forEach(c => c.classList.remove('selected'));

            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —ç—Ç–æ–π –∫–∞—Ä—Ç—ã
            this.classList.toggle('selected');
        });
    });
}

function exchangeCards() {
    const selectedCards = document.querySelectorAll('.player-cards .card.selected');
    if (selectedCards.length === 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        const statusElement = document.querySelector('.poker-status');
        if (statusElement) {
            statusElement.innerHTML = '<div style="color: #dc3545;">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞</div>';
        }
        return;
    }

    // –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
    const selectedCard = selectedCards[0];
    const index = parseInt(selectedCard.dataset.index);

    if (window.socket && window.roomId && window.currentOpponent?.type === 'player') {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã
        window.socket.emit('game-move', {
            roomId: window.roomId,
            gameType: 'poker',
            move: {
                action: 'exchange',
                cardIndex: index,
                playerId: window.socket.id
            }
        });

        // –õ–æ–∫–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
        if (window.gameState.deck.length > 0) {
            window.gameState.playerHand[index] = window.gameState.deck.pop();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–º–µ–Ω–µ
            const statusElement = document.querySelector('.poker-status');
            if (statusElement) {
                statusElement.innerHTML = '<div style="color: #28a745;">–ö–∞—Ä—Ç–∞ –æ–±–º–µ–Ω—è–Ω–∞! –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é.</div>';
            }

            renderPokerGame();
        }
    } else {
        // –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º
        if (window.gameState.deck.length > 0) {
            window.gameState.playerHand[index] = window.gameState.deck.pop();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–º–µ–Ω–µ
            const statusElement = document.querySelector('.poker-status');
            if (statusElement) {
                statusElement.innerHTML = '<div style="color: #28a745;">–ö–∞—Ä—Ç–∞ –æ–±–º–µ–Ω—è–Ω–∞! –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é.</div>';
            }

            renderPokerGame();
        } else {
            const statusElement = document.querySelector('.poker-status');
            if (statusElement) {
                statusElement.innerHTML = '<div style="color: #dc3545;">–í –∫–æ–ª–æ–¥–µ –Ω–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –æ–±–º–µ–Ω–∞</div>';
            }
        }
    }
}

function getPokerCombination(hand) {
    const values = hand.map(card => card.power).sort((a, b) => a - b);
    const suits = hand.map(card => card.suit);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    const isFlush = suits.every(suit => suit === suits[0]);
    const isStraight = values.every((val, i) => i === 0 || val === values[i - 1] + 1);

    const valueCounts = {};
    values.forEach(val => valueCounts[val] = (valueCounts[val] || 0) + 1);
    const counts = Object.values(valueCounts).sort((a, b) => b - a);

    if (isFlush && isStraight) return { name: '–°—Ç—Ä–∏—Ç-—Ñ–ª–µ—à', rank: 8 };
    if (counts[0] === 4) return { name: '–ö–∞—Ä–µ', rank: 7 };
    if (counts[0] === 3 && counts[1] === 2) return { name: '–§—É–ª-—Ö–∞—É—Å', rank: 6 };
    if (isFlush) return { name: '–§–ª–µ—à', rank: 5 };
    if (isStraight) return { name: '–°—Ç—Ä–∏—Ç', rank: 4 };
    if (counts[0] === 3) return { name: '–¢—Ä–æ–π–∫–∞', rank: 3 };
    if (counts[0] === 2 && counts[1] === 2) return { name: '–î–≤–µ –ø–∞—Ä—ã', rank: 2 };
    if (counts[0] === 2) return { name: '–ü–∞—Ä–∞', rank: 1 };
    return { name: '–°—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞', rank: 0 };
}

function checkPokerHand() {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, –µ—Å–ª–∏ –∏–≥—Ä–∞–µ–º —Å –∏–≥—Ä–æ–∫–æ–º
    if (window.socket && window.roomId && window.currentOpponent?.type === 'player') {
        window.socket.emit('game-move', {
            roomId: window.roomId,
            gameType: 'poker',
            move: {
                action: 'check'
            }
        });
    }

{{ ... }}
    const combination = getPokerCombination(window.gameState.playerHand);

    // –ï—Å–ª–∏ –∏–≥—Ä–∞–µ–º —Å –±–æ—Ç–æ–º, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –¥–ª—è –±–æ—Ç–∞
    let opponentCombination;
    if (window.currentOpponent?.type === 'bot') {
        // –ë–æ—Ç —Ç–æ–∂–µ –º–æ–∂–µ—Ç –æ–±–º–µ–Ω—è—Ç—å –∫–∞—Ä—Ç—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        makePokerBotMove();
        opponentCombination = getPokerCombination(window.gameState.opponentHand);
    } else {
        opponentCombination = getPokerCombination(window.gameState.opponentHand);
    }

    let result = '';
    if (combination.rank > opponentCombination.rank) {
        result = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Ä–∞—É–Ω–¥!';
        window.gameState.playerScore++;
    } else if (combination.rank < opponentCombination.rank) {
        result = '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª —Ä–∞—É–Ω–¥!';
        window.gameState.opponentScore++;
    } else {
        result = '–ù–∏—á—å—è –≤ —Ä–∞—É–Ω–¥–µ!';
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
    const WINNING_SCORE = 10;
    if (window.gameState.playerScore >= WINNING_SCORE) {
        window.gameState.gamePhase = 'finished';
        window.gameState.winner = 'player';

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        if (window.socket && window.roomId && window.currentOpponent?.type === 'player') {
            window.socket.emit('game-ended', {
                roomId: window.roomId,
                winner: 'player',
                gameType: 'poker'
            });
        }
    } else if (window.gameState.opponentScore >= WINNING_SCORE) {
        window.gameState.gamePhase = 'finished';
        window.gameState.winner = 'opponent';

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        if (window.socket && window.roomId && window.currentOpponent?.type === 'player') {
            window.socket.emit('game-ended', {
                roomId: window.roomId,
                winner: 'opponent',
                gameType: 'poker'
            });
        }
    } else {
        // –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–∑—É –æ–∂–∏–¥–∞–Ω–∏—è
        window.gameState.gamePhase = 'waiting';
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–æ–ª —Å –∫–∞—Ä—Ç–∞–º–∏
    renderPokerGame();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    window.gameState.lastResult = {
        combination,
        opponentCombination,
        result
    };

    // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    setTimeout(() => {
        showPokerResult();
    }, 2000);
}

function showPokerResult() {
    if (!window.gameState.lastResult) return;

    const { combination, opponentCombination, result } = window.gameState.lastResult;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    const statusElement = document.querySelector('.poker-status');
    if (statusElement) {
        if (window.gameState.gamePhase === 'finished') {
            // –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            statusElement.innerHTML = `
                <div style="margin-bottom: 10px;"><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞ ${window.gameState.round}:</strong></div>
                <div>–í–∞—à–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: <span style="color: var(--accent-primary);">${combination.name}</span></div>
                <div>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: <span style="color: var(--accent-primary);">${opponentCombination.name}</span></div>
                <div style="margin-top: 20px; font-size: 32px; font-weight: bold; color: ${result.includes('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏') ? '#28a745' : result.includes('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª') ? '#dc3545' : '#ffc107'};">${result.includes('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏') ? '–ü–û–ë–ï–î–ê!' : result.includes('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª') ? '–ü–û–†–ê–ñ–ï–ù–ò–ï!' : '–ù–ò–ß–¨–Ø!'}</div>
                <div style="margin-top: 10px; color: #666;">–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...</div>
            `;

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                newPokerRound();
            }, 3000);
        } else {
            // –û–±—ã—á–Ω—ã–π —Ä–∞—É–Ω–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∂–¥–µ–º –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞
            statusElement.innerHTML = `
                <div style="margin-bottom: 10px;"><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—É–Ω–¥–∞ ${window.gameState.round}:</strong></div>
                <div>–í–∞—à–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: <span style="color: var(--accent-primary);">${combination.name}</span></div>
                <div>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: <span style="color: var(--accent-primary);">${opponentCombination.name}</span></div>
                <div style="margin-top: 20px; font-size: 32px; font-weight: bold; color: ${result.includes('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏') ? '#28a745' : result.includes('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª') ? '#dc3545' : '#ffc107'};">${result.includes('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏') ? '–ü–û–ë–ï–î–ê!' : result.includes('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª') ? '–ü–û–†–ê–ñ–ï–ù–ò–ï!' : '–ù–ò–ß–¨–Ø!'}</div>
                <div style="margin-top: 10px; color: #666;">–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...</div>
            `;

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                newPokerRound();
            }, 3000);
        }
    }

    // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º renderPokerGame() –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
}

function makePokerBotMove() {
    if (window.currentOpponent?.type !== 'bot') return;

    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∫–µ—Ä–∞: –æ–±–º–µ–Ω–∏–≤–∞–µ—Ç —Å–ª–∞–±—ã–µ –∫–∞—Ä—Ç—ã
    const hand = window.gameState.opponentHand;
    const combination = getPokerCombination(hand);

    // –ï—Å–ª–∏ —É –±–æ—Ç–∞ —É–∂–µ —Ö–æ—Ä–æ—à–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è (–ø–∞—Ä–∞ –∏–ª–∏ –ª—É—á—à–µ), –Ω–µ –º–µ–Ω—è–µ—Ç –∫–∞—Ä—Ç—ã
    if (combination.rank >= 2) return;

    // –ò–Ω–∞—á–µ –º–µ–Ω—è–µ—Ç 1-3 —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç—ã
    const cardsToChange = Math.floor(Math.random() * 3) + 1;
    const changedIndices = [];

    for (let i = 0; i < cardsToChange; i++) {
        let randomIndex;
        do {
            randomIndex = Math.floor(Math.random() * hand.length);
        } while (changedIndices.includes(randomIndex));

        changedIndices.push(randomIndex);

        if (window.gameState.deck.length > 0) {
            window.gameState.opponentHand[randomIndex] = window.gameState.deck.pop();
        }
    }
}

function newPokerRound() {
    if (window.gameState.gamePhase === 'finished') {
        // –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        startNewPokerGame();
        return;
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–∞—É–Ω–¥–æ–≤
    window.gameState.round++;
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∞–∑—É –∫ –æ–±–º–µ–Ω—É –∫–∞—Ä—Ç
    window.gameState.gamePhase = 'exchange';

    createDeck();
    shuffleDeck();
    dealPokerCards();
    renderPokerGame();
}

function playDurakCard(cardIndex) {
    const card = window.gameState.playerHand[cardIndex];
    console.log('–ò–≥—Ä–∞–µ–º –∫–∞—Ä—Ç–æ–π:', card, '–§–∞–∑–∞:', window.gameState.gamePhase, '–ê—Ç–∞–∫—É—é—â–∏–π:', window.gameState.currentAttacker);

    if (!card) {
        console.error('–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É:', cardIndex);
        return;
    }

    if (window.gameState.gamePhase === 'attack' && window.gameState.currentAttacker === 'player') {
        // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
        if (window.gameState.attackingCards.length === 0) {
            // –ü–µ—Ä–≤–∞—è –∞—Ç–∞–∫–∞ - –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π
            if (window.socket && window.roomId && window.currentOpponent?.type === 'player') {
                // –°–µ—Ç–µ–≤–∞—è –∏–≥—Ä–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                window.socket.emit('game-move', {
                    roomId: window.roomId,
                    gameType: 'durak',
                    move: {
                        action: 'play',
                        card: card,
                        playerId: window.socket.id,
                        cardIndex: cardIndex
                    }
                });
            }

            window.gameState.attackingCards.push(card);
            window.gameState.playerHand.splice(cardIndex, 1);
            window.gameState.gamePhase = 'defend';
            console.log('–ü–µ—Ä–≤–∞—è –∞—Ç–∞–∫–∞ –∫–∞—Ä—Ç–æ–π:', card);

            renderDurakGame();

            // –ë–æ—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—â–∏—Ç–∏—Ç—å—Å—è
            if (window.currentOpponent?.type === 'bot') {
                setTimeout(() => {
                    makeDurakBotDefense();
                }, 1000);
            }
        } else {
            // –ü–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã —Ç–æ–≥–æ –∂–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ —á—Ç–æ —É–∂–µ –Ω–∞ —Å—Ç–æ–ª–µ
            if (canAttackOrThrowCard(card)) {
                if (window.socket && window.roomId && window.currentOpponent?.type === 'player') {
                    // –°–µ—Ç–µ–≤–∞—è –∏–≥—Ä–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                    window.socket.emit('game-move', {
                        roomId: window.roomId,
                        gameType: 'durak',
                        move: {
                            action: 'play',
                            card: card,
                            playerId: window.socket.id,
                            cardIndex: cardIndex
                        }
                    });
                }

                window.gameState.attackingCards.push(card);
                window.gameState.playerHand.splice(cardIndex, 1);
                console.log('–ü–æ–¥–∫–∏–¥—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É:', card);

                renderDurakGame();

                // –ë–æ—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—â–∏—Ç–∏—Ç—å—Å—è –æ—Ç –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã
                if (window.currentOpponent?.type === 'bot') {
                    setTimeout(() => {
                        makeDurakBotDefense();
                    }, 1000);
                }
            } else {
                alert('–ù–µ–ª—å–∑—è –ø–æ–¥–∫–∏–Ω—É—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É! –ú–æ–∂–Ω–æ –ø–æ–¥–∫–∏–¥—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã —Ç–æ–≥–æ –∂–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞, —á—Ç–æ —É–∂–µ –ª–µ–∂–∞—Ç –Ω–∞ —Å—Ç–æ–ª–µ.');
            }
        }
    } else if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
        // –ò–≥—Ä–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è –æ—Ç –∞—Ç–∞–∫–∏ –±–æ—Ç–∞
        const undefendedCards = window.gameState.attackingCards.filter((_, index) => !window.gameState.defendingCards[index]);

        if (undefendedCards.length === 0) {
            alert('–í—Å–µ –∫–∞—Ä—Ç—ã —É–∂–µ –æ—Ç–±–∏—Ç—ã!');
            return;
        }

        // –ò—â–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–æ—Ç–±–∏—Ç—É—é –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ—Ç–±–∏—Ç—å —ç—Ç–æ–π –∫–∞—Ä—Ç–æ–π
        let defendedIndex = -1;
        for (let i = 0; i < window.gameState.attackingCards.length; i++) {
            if (!window.gameState.defendingCards[i]) {
                const attackCard = window.gameState.attackingCards[i];
                if (canDefendCard(card, attackCard)) {
                    defendedIndex = i;
                    break;
                }
            }
        }

        if (defendedIndex !== -1) {
            // –û—Ç–±–∏–≤–∞–µ–º—Å—è
            if (window.socket && window.roomId && window.currentOpponent?.type === 'player') {
                // –°–µ—Ç–µ–≤–∞—è –∏–≥—Ä–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                window.socket.emit('game-move', {
                    roomId: window.roomId,
                    gameType: 'durak',
                    move: {
                        action: 'defend',
                        card: card,
                        playerId: window.socket.id,
                        cardIndex: cardIndex
                    }
                });
            }

            window.gameState.defendingCards[defendedIndex] = card;
            window.gameState.playerHand.splice(cardIndex, 1);
            console.log('–û—Ç–±–∏–≤–∞–µ–º—Å—è –∫–∞—Ä—Ç–æ–π:', card, '–æ—Ç –∫–∞—Ä—Ç—ã:', window.gameState.attackingCards[defendedIndex]);

            renderDurakGame();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã
            const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);

            if (allDefended) {
                // –í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã - —Ç–µ–ø–µ—Ä—å –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å –∏–ª–∏ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–∞—Å–æ–≤–∞—Ç—å
                console.log('–í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã, –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å, –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–∞—Å–æ–≤–∞—Ç—å');
                if (window.currentOpponent?.type === 'bot') {
                    setTimeout(() => {
                        makeDurakBotThrow();
                    }, 1000);
                }
            } else {
                // –ï—Å—Ç—å –µ—â–µ –Ω–µ–æ—Ç–±–∏—Ç—ã–µ –∫–∞—Ä—Ç—ã, –±–æ—Ç –¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—â–∞—Ç—å—Å—è
                if (window.currentOpponent?.type === 'bot') {
                    setTimeout(() => {
                        makeDurakBotDefense();
                    }, 1000);
                }
            }
        } else {
            alert('–≠—Ç–æ–π –∫–∞—Ä—Ç–æ–π –Ω–µ–ª—å–∑—è –æ—Ç–±–∏—Ç—å—Å—è –æ—Ç –∞—Ç–∞–∫—É—é—â–∏—Ö –∫–∞—Ä—Ç!');
        }
    } else if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'player') {
        // –ë–æ—Ç –∞—Ç–∞–∫–æ–≤–∞–ª, –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å –∫–∞—Ä—Ç—ã
        console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–∏–Ω—É—Ç—å –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –æ—Ç–±–æ—è –±–æ—Ç–∞');
        console.log('–í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã?', window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]));
        console.log('–ú–æ–∂–Ω–æ –ø–æ–¥–∫–∏–Ω—É—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É?', canAttackOrThrowCard(card));

        if (canAttackOrThrowCard(card)) {
            if (window.socket && window.roomId && window.currentOpponent?.type === 'player') {
                // –°–µ—Ç–µ–≤–∞—è –∏–≥—Ä–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                window.socket.emit('game-move', {
                    roomId: window.roomId,
                    gameType: 'durak',
                    move: {
                        action: 'play',
                        card: card,
                        playerId: window.socket.id,
                        cardIndex: cardIndex
                    }
                });
            }

            window.gameState.attackingCards.push(card);
            window.gameState.playerHand.splice(cardIndex, 1);
            console.log('–ò–≥—Ä–æ–∫ –ø–æ–¥–∫–∏–¥—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –æ—Ç–±–æ—è –±–æ—Ç–∞:', card);

            renderDurakGame();

            // –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—Ç–∏—Ç—å—Å—è –æ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç–æ–π –∫–∞—Ä—Ç—ã
            if (window.currentOpponent?.type === 'bot') {
                setTimeout(() => {
                    makeDurakBotDefense();
                }, 1000);
            }
        } else {
            alert('–ù–µ–ª—å–∑—è –ø–æ–¥–∫–∏–Ω—É—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É! –ú–æ–∂–Ω–æ –ø–æ–¥–∫–∏–¥—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã —Ç–æ–≥–æ –∂–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞, —á—Ç–æ —É–∂–µ –ª–µ–∂–∞—Ç –Ω–∞ —Å—Ç–æ–ª–µ.');
        }
    } else if (window.gameState.gamePhase === 'attack' && window.gameState.currentAttacker === 'bot') {
        // –ë–æ—Ç –∞—Ç–∞–∫–æ–≤–∞–ª, –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å –µ—Å–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã
        const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);

        if (allDefended && canAttackOrThrowCard(card)) {
            if (window.socket && window.roomId && window.currentOpponent?.type === 'player') {
                // –°–µ—Ç–µ–≤–∞—è –∏–≥—Ä–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                window.socket.emit('game-move', {
                    roomId: window.roomId,
                    gameType: 'durak',
                    move: {
                        action: 'play',
                        card: card,
                        playerId: window.socket.id,
                        cardIndex: cardIndex
                    }
                });
            }

            window.gameState.attackingCards.push(card);
            window.gameState.playerHand.splice(cardIndex, 1);
            window.gameState.gamePhase = 'defend';
            console.log('–ò–≥—Ä–æ–∫ –ø–æ–¥–∫–∏–¥—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –æ—Ç–±–æ—è:', card);

            renderDurakGame();

            // –ë–æ—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—â–∏—Ç–∏—Ç—å—Å—è –æ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç–æ–π –∫–∞—Ä—Ç—ã
            if (window.currentOpponent?.type === 'bot') {
                setTimeout(() => {
                    makeDurakBotDefense();
                }, 1000);
            }
        } else if (!allDefended) {
            alert('–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ç–±–∏—Ç—å –≤—Å–µ –∞—Ç–∞–∫—É—é—â–∏–µ –∫–∞—Ä—Ç—ã!');
        } else {
            alert('–ù–µ–ª—å–∑—è –ø–æ–¥–∫–∏–Ω—É—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É! –ú–æ–∂–Ω–æ –ø–æ–¥–∫–∏–¥—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã —Ç–æ–≥–æ –∂–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞, —á—Ç–æ —É–∂–µ –ª–µ–∂–∞—Ç –Ω–∞ —Å—Ç–æ–ª–µ.');
        }
    } else {
        console.log('–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥ –∏–ª–∏ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è —Ñ–∞–∑–∞ –∏–≥—Ä—ã');
    }
}

function makeDurakBotDefense() {
    if (window.currentOpponent?.type !== 'bot') return;

    console.log('–ë–æ—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—â–∏—Ç–∏—Ç—å—Å—è');
    console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ–ª–∞:', {
        attackingCards: window.gameState.attackingCards,
        defendingCards: window.gameState.defendingCards,
        gamePhase: window.gameState.gamePhase,
        currentAttacker: window.gameState.currentAttacker
    });

    const analyzer = window.durakAnalyzer;
    const analysis = analyzer.analyzeGameState();

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ–æ—Ç–±–∏—Ç—ã–µ –∫–∞—Ä—Ç—ã
    const undefendedCards = analysis.undefendedCards;
    console.log('–ù–µ–æ—Ç–±–∏—Ç—ã–µ –∫–∞—Ä—Ç—ã:', undefendedCards);

    if (undefendedCards.length === 0) {
        console.log('–í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—é');
        // –í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã, –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å
        if (window.currentOpponent?.type === 'bot') {
            setTimeout(() => {
                makeDurakBotThrow();
            }, 1000);
        }
        return;
    }

    const cardToDefend = undefendedCards[0];
    console.log('–ó–∞—â–∏—â–∞–µ–º—Å—è –æ—Ç –∫–∞—Ä—Ç—ã:', cardToDefend);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞—â–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã
    const bestDefenseCard = analyzer.getBestDefenseCard(cardToDefend);
    console.log('–õ—É—á—à–∞—è –∑–∞—â–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞:', bestDefenseCard);

    // –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç
    const riskScore = analyzer.evaluateRisk();
    const shouldDefend = bestDefenseCard && (riskScore < 8 || Math.random() < 0.85);
    console.log('–†–∏—Å–∫:', riskScore, '–ó–∞—â–∏—â–∞—Ç—å—Å—è:', shouldDefend);

    if (shouldDefend) {
        const cardIndex = window.gameState.opponentHand.indexOf(bestDefenseCard);
        if (cardIndex !== -1) {
            window.gameState.defendingCards.push(bestDefenseCard);
            window.gameState.opponentHand.splice(cardIndex, 1);

            console.log(`–ë–æ—Ç –∑–∞—â–∏—â–∞–µ—Ç—Å—è –∫–∞—Ä—Ç–æ–π: ${bestDefenseCard.value}${bestDefenseCard.suit} –æ—Ç ${cardToDefend.value}${cardToDefend.suit}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã
            if (window.gameState.attackingCards.length === window.gameState.defendingCards.length) {
                // –í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã, –Ω–æ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å
                // –§–∞–∑–∞ –æ—Å—Ç–∞–µ—Ç—Å—è 'defend', –Ω–æ —Ç–µ–ø–µ—Ä—å –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–¥—ã–≤–∞—Ç—å
                console.log('–í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã, –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å –∏–ª–∏ –ø–∞—Å–æ–≤–∞—Ç—å');
                // –ù–ï –æ—á–∏—â–∞–µ–º —Å—Ç–æ–ª –∏ –ù–ï –º–µ–Ω—è–µ–º –∞—Ç–∞–∫—É—é—â–µ–≥–æ - –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å
                // –ù–ï –¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–±–æ–π - —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–∞—Å"
            } else {
                // –ï—â–µ –µ—Å—Ç—å –Ω–µ–æ—Ç–±–∏—Ç—ã–µ –∫–∞—Ä—Ç—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞—â–∏—Ç—É
                console.log('–û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–æ—Ç–±–∏—Ç—ã–µ –∫–∞—Ä—Ç—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞—â–∏—Ç—É');
            }

            renderDurakGame();
            return;
        }
    }

    // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –∏–ª–∏ –Ω–µ —Ö–æ—á–µ—Ç –∑–∞—â–∏—â–∞—Ç—å—Å—è, –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã
    console.log(`–ë–æ—Ç –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã (—Ä–∏—Å–∫: ${riskScore})`);
    takeDurakCardsBot();
}

function makeDurakBotThrow() {
    if (window.currentOpponent?.type !== 'bot') return;

    // –ë–æ—Ç –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–¥—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ù–ï –∑–∞—â–∏—â–∞–µ—Ç—Å—è
    // –ï—Å–ª–∏ currentAttacker === 'player', —Ç–æ –±–æ—Ç –∑–∞—â–∏—â–∞–µ—Ç—Å—è –∏ –ù–ï –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–¥—ã–≤–∞—Ç—å
    if (window.gameState.currentAttacker === 'player') {
        console.log('–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–¥—ã–≤–∞—Ç—å - –æ–Ω –∑–∞—â–∏—â–∞–µ—Ç—Å—è');
        return;
    }

    console.log('–ë–æ—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–∏–Ω—É—Ç—å –∫–∞—Ä—Ç—ã (–±–æ—Ç –∞—Ç–∞–∫—É–µ—Ç)');
    console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ–ª–∞:', {
        attackingCards: window.gameState.attackingCards,
        defendingCards: window.gameState.defendingCards,
        botHand: window.gameState.opponentHand
    });

    const analyzer = window.durakAnalyzer;
    const analysis = analyzer.analyzeGameState();

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—è
    const throwableCards = analyzer.getThrowableCards();
    console.log('–ö–∞—Ä—Ç—ã –¥–ª—è –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—è:', throwableCards);

    // –ë–æ—Ç –ø–æ–¥–∫–∏–¥—ã–≤–∞–µ—Ç —Å —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    if (throwableCards.length > 0) {
        const playerHandSize = window.gameState.playerHand.length;
        const botHandSize = window.gameState.opponentHand.length;

        // –ü–æ–¥–∫–∏–¥—ã–≤–∞–µ–º —á–∞—â–µ –µ—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –º–∞–ª–æ –∫–∞—Ä—Ç
        const throwProbability = playerHandSize <= 3 ? 0.9 :
            playerHandSize <= 5 ? 0.7 : 0.4; // –£–º–µ–Ω—å—à–∏–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å

        console.log('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—è:', throwProbability);

        if (Math.random() < throwProbability) {
            // –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é —Å–ª–∞–±—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ä—Ç—É
            const cardToThrow = throwableCards.reduce((weakest, card) =>
                card.power < weakest.power ? card : weakest
            );

            const cardIndex = window.gameState.opponentHand.indexOf(cardToThrow);
            if (cardIndex !== -1) {
                window.gameState.attackingCards.push(cardToThrow);
                window.gameState.opponentHand.splice(cardIndex, 1);
                window.gameState.gamePhase = 'defend';

                console.log(`–ë–æ—Ç –ø–æ–¥–∫–∏–¥—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É: ${cardToThrow.value}${cardToThrow.suit}`);
                renderDurakGame();
                return;
            }
        } else {
            console.log('–ë–æ—Ç —Ä–µ—à–∏–ª –Ω–µ –ø–æ–¥–∫–∏–¥—ã–≤–∞—Ç—å –∫–∞—Ä—Ç—ã (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)');
        }
    } else {
        console.log('–£ –±–æ—Ç–∞ –Ω–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—è - –ø–∞—Å—É–µ—Ç');
    }

    // –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–∏–¥—ã–≤–∞–µ—Ç, –∂–¥–µ–º –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞
    console.log('–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–∏–¥—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã - –∂–¥–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞');

    // –ù–ï –¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–±–æ–π - –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å "–ü–∞—Å"
    // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–≥—Ä—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–∞—Å (–æ—Ç–±–æ–π)"
    renderDurakGame();
}

// ===== –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –î–£–†–ê–ö–ê –î–õ–Ø –ë–û–¢–ê =====

class DurakBotAnalyzer {
    constructor() {
        this.trumpSuit = null;
        this.gameState = null;
    }

    // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    analyzeGameState() {
        this.trumpSuit = window.gameState.trumpSuit;
        this.gameState = window.gameState;

        return {
            tableCards: this.getTableCards(),
            undefendedCards: this.getUndefendedCards(),
            botHand: this.analyzeBotHand(),
            gamePhase: this.gameState.gamePhase,
            currentAttacker: this.gameState.currentAttacker,
            canThrow: this.canThrowCards(),
            trumpsOnTable: this.getTrumpsOnTable()
        };
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ
    getTableCards() {
        return [
            ...this.gameState.attackingCards,
            ...this.gameState.defendingCards
        ];
    }

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–æ—Ç–±–∏—Ç—ã–µ –∫–∞—Ä—Ç—ã
    getUndefendedCards() {
        return this.gameState.attackingCards.filter((_, index) =>
            !this.gameState.defendingCards[index]
        );
    }

    // –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç –±–æ—Ç–∞
    analyzeBotHand() {
        const hand = this.gameState.opponentHand;

        return {
            cards: hand,
            trumps: hand.filter(card => card.suit === this.trumpSuit),
            nonTrumps: hand.filter(card => card.suit !== this.trumpSuit),
            lowCards: hand.filter(card => card.power <= 8),
            highCards: hand.filter(card => card.power >= 12),
            cardsByValue: this.groupCardsByValue(hand)
        };
    }

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç –ø–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤—É
    groupCardsByValue(cards) {
        const groups = {};
        cards.forEach(card => {
            if (!groups[card.value]) {
                groups[card.value] = [];
            }
            groups[card.value].push(card);
        });
        return groups;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—è
    canThrowCards() {
        const tableCards = this.getTableCards();
        if (tableCards.length === 0) return false;

        const botHand = this.gameState.opponentHand;
        return botHand.some(card =>
            tableCards.some(tableCard => tableCard.value === card.value)
        );
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–∑—ã—Ä–∏ –Ω–∞ —Å—Ç–æ–ª–µ
    getTrumpsOnTable() {
        return this.getTableCards().filter(card => card.suit === this.trumpSuit);
    }

    // –ù–∞–π—Ç–∏ –ª—É—á—à—É—é –∫–∞—Ä—Ç—É –¥–ª—è –∞—Ç–∞–∫–∏
    getBestAttackCard() {
        const analysis = this.analyzeBotHand();

        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–ª–∞–±—ã–µ –Ω–µ–∫–æ–∑—ã—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã
        if (analysis.nonTrumps.length > 0) {
            const weakNonTrumps = analysis.nonTrumps.filter(card => card.power <= 10);
            if (weakNonTrumps.length > 0) {
                return weakNonTrumps.reduce((weakest, card) =>
                    card.power < weakest.power ? card : weakest
                );
            }
            return analysis.nonTrumps.reduce((weakest, card) =>
                card.power < weakest.power ? card : weakest
            );
        }

        // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∫–æ–∑—ã—Ä–∏, –±–µ—Ä–µ–º —Å–∞–º—ã–π —Å–ª–∞–±—ã–π
        if (analysis.trumps.length > 0) {
            return analysis.trumps.reduce((weakest, card) =>
                card.power < weakest.power ? card : weakest
            );
        }

        return null;
    }

    // –ù–∞–π—Ç–∏ –ª—É—á—à—É—é –∫–∞—Ä—Ç—É –¥–ª—è –∑–∞—â–∏—Ç—ã
    getBestDefenseCard(attackCard) {
        const botHand = this.gameState.opponentHand;
        const possibleDefenses = botHand.filter(card =>
            this.canDefend(card, attackCard)
        );

        if (possibleDefenses.length === 0) return null;

        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—â–∏—Ç—ã:
        // 1. –ù–µ–∫–æ–∑—ã—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ç–æ–π –∂–µ –º–∞—Å—Ç–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è)
        // 2. –°–ª–∞–±—ã–π –∫–æ–∑—ã—Ä—å (–µ—Å–ª–∏ –∞—Ç–∞–∫–∞ –Ω–µ –∫–æ–∑—ã—Ä–µ–º)
        // 3. –°–∏–ª—å–Ω—ã–π –∫–æ–∑—ã—Ä—å (–µ—Å–ª–∏ –∞—Ç–∞–∫–∞ –∫–æ–∑—ã—Ä–µ–º)

        const sameSuitDefenses = possibleDefenses.filter(card =>
            card.suit === attackCard.suit && card.suit !== this.trumpSuit
        );

        if (sameSuitDefenses.length > 0) {
            return sameSuitDefenses.reduce((weakest, card) =>
                card.power < weakest.power ? card : weakest
            );
        }

        const trumpDefenses = possibleDefenses.filter(card =>
            card.suit === this.trumpSuit
        );

        if (trumpDefenses.length > 0) {
            return trumpDefenses.reduce((weakest, card) =>
                card.power < weakest.power ? card : weakest
            );
        }

        return possibleDefenses.reduce((weakest, card) =>
            card.power < weakest.power ? card : weakest
        );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞—â–∏—Ç—ã
    canDefend(defenseCard, attackCard) {
        // –ö–∞—Ä—Ç–∞ —Ç–æ–π –∂–µ –º–∞—Å—Ç–∏ –∏ –±–æ–ª—å—à–µ –ø–æ —Å–∏–ª–µ
        if (defenseCard.suit === attackCard.suit && defenseCard.power > attackCard.power) {
            return true;
        }

        // –ö–æ–∑—ã—Ä—å –±—å–µ—Ç –Ω–µ–∫–æ–∑—ã—Ä—å
        if (defenseCard.suit === this.trumpSuit && attackCard.suit !== this.trumpSuit) {
            return true;
        }

        // –ö–æ–∑—ã—Ä—å –±—å–µ—Ç –∫–æ–∑—ã—Ä—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ
        if (defenseCard.suit === this.trumpSuit &&
            attackCard.suit === this.trumpSuit &&
            defenseCard.power > attackCard.power) {
            return true;
        }

        return false;
    }

    // –ù–∞–π—Ç–∏ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—è
    getThrowableCards() {
        const tableCards = this.getTableCards();
        const botHand = this.gameState.opponentHand;

        return botHand.filter(card =>
            tableCards.some(tableCard => tableCard.value === card.value)
        );
    }

    // –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç
    evaluateRisk() {
        const undefended = this.getUndefendedCards();
        const analysis = this.analyzeBotHand();

        let riskScore = 0;

        // –†–∏—Å–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–µ–æ—Ç–±–∏—Ç—ã—Ö –∫–∞—Ä—Ç
        riskScore += undefended.length * 2;

        // –†–∏—Å–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ –º–Ω–æ–≥–æ –∫–æ–∑—ã—Ä–µ–π –Ω–∞ —Å—Ç–æ–ª–µ
        riskScore += this.getTrumpsOnTable().length * 3;

        // –†–∏—Å–∫ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –µ—Å–ª–∏ —É –±–æ—Ç–∞ –º–Ω–æ–≥–æ –∫–∞—Ä—Ç
        riskScore -= Math.max(0, analysis.cards.length - 8);

        return riskScore;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
window.durakAnalyzer = new DurakBotAnalyzer();

// ===== –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê =====

function makeDurakBotAttack() {
    if (window.currentOpponent?.type !== 'bot') return;

    const analyzer = window.durakAnalyzer;
    const analysis = analyzer.analyzeGameState();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
    const bestCard = analyzer.getBestAttackCard();

    if (bestCard) {
        const cardIndex = window.gameState.opponentHand.indexOf(bestCard);
        if (cardIndex !== -1) {
            window.gameState.attackingCards.push(bestCard);
            window.gameState.opponentHand.splice(cardIndex, 1);
            window.gameState.gamePhase = 'defend';
            window.gameState.currentAttacker = 'bot';

            console.log(`–ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç –∫–∞—Ä—Ç–æ–π: ${bestCard.value}${bestCard.suit}`);
            renderDurakGame();
        }
    }
}

function refillDurakHands() {
    // –î–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã –¥–æ 6 (–∏–ª–∏ —Å–∫–æ–ª—å–∫–æ –µ—Å—Ç—å –≤ –∫–æ–ª–æ–¥–µ)
    // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∏—Ä–∞–µ—Ç –∞—Ç–∞–∫—É—é—â–∏–π, –ø–æ—Ç–æ–º –∑–∞—â–∏—â–∞—é—â–∏–π—Å—è
    const attackerFirst = window.gameState.currentAttacker === 'player';

    if (attackerFirst) {
        // –ò–≥—Ä–æ–∫ –¥–æ–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤—ã–º
        while (window.gameState.playerHand.length < 6 && window.gameState.deck.length > 0) {
            window.gameState.playerHand.push(window.gameState.deck.pop());
        }
        while (window.gameState.opponentHand.length < 6 && window.gameState.deck.length > 0) {
            window.gameState.opponentHand.push(window.gameState.deck.pop());
        }
    } else {
        // –ë–æ—Ç –¥–æ–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤—ã–º
        while (window.gameState.opponentHand.length < 6 && window.gameState.deck.length > 0) {
            window.gameState.opponentHand.push(window.gameState.deck.pop());
        }
        while (window.gameState.playerHand.length < 6 && window.gameState.deck.length > 0) {
            window.gameState.playerHand.push(window.gameState.deck.pop());
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    checkDurakGameEnd();
}

function checkDurakGameEnd() {
    const playerHasCards = window.gameState.playerHand.length > 0;
    const botHasCards = window.gameState.opponentHand.length > 0;
    const deckHasCards = window.gameState.deck.length > 0;

    // –ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ —É –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ—Ç –∫–∞—Ä—Ç –∏ –∫–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞
    if (!deckHasCards) {
        if (!playerHasCards && botHasCards) {
            setTimeout(() => {
                alert('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!');
                newDurakRound();
            }, 500);
        } else if (!botHasCards && playerHasCards) {
            setTimeout(() => {
                alert('üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª.');
                newDurakRound();
            }, 500);
        } else if (!playerHasCards && !botHasCards) {
            setTimeout(() => {
                alert('ü§ù –ù–∏—á—å—è! –£ –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫–∞—Ä—Ç—ã.');
                newDurakRound();
            }, 500);
        }
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –±–æ—Ç–∞
function validateBotAction(action, card, targetCard = null) {
    const analyzer = window.durakAnalyzer;

    switch (action) {
        case 'attack':
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å —ç—Ç–æ–π –∫–∞—Ä—Ç–æ–π
            if (window.gameState.attackingCards.length === 0) {
                return true; // –ü–µ—Ä–≤–∞—è –∞—Ç–∞–∫–∞ - –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π
            }
            // –ü–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã —Ç–æ–≥–æ –∂–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞
            const tableCards = [...window.gameState.attackingCards, ...window.gameState.defendingCards];
            return tableCards.some(tableCard => tableCard.value === card.value);

        case 'defend':
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –∑–∞—â–∏—Ç–∏—Ç—å—Å—è —ç—Ç–æ–π –∫–∞—Ä—Ç–æ–π
            if (!targetCard) return false;
            return analyzer.canDefend(card, targetCard);

        case 'throw':
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É
            const allTableCards = [...window.gameState.attackingCards, ...window.gameState.defendingCards];
            return allTableCards.some(tableCard => tableCard.value === card.value);

        default:
            return false;
    }
}

function takeDurakCardsBot() {
    // –ë–æ—Ç –±–µ—Ä–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞
    window.gameState.attackingCards.forEach(card => {
        window.gameState.opponentHand.push(card);
    });
    window.gameState.defendingCards.forEach(card => {
        window.gameState.opponentHand.push(card);
    });

    window.gameState.attackingCards = [];
    window.gameState.defendingCards = [];
    window.gameState.gamePhase = 'attack';
    window.gameState.currentAttacker = 'player'; // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –≤–∑—è–ª –∫–∞—Ä—Ç—ã

    renderDurakGame();
}

function canDefendCard(defendCard, attackCard) {
    // –ú–æ–∂–Ω–æ –±–∏—Ç—å –∫–∞—Ä—Ç–æ–π —Ç–æ–π –∂–µ –º–∞—Å—Ç–∏, –Ω–æ –±–æ–ª—å—à–µ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞
    if (defendCard.suit === attackCard.suit && defendCard.power > attackCard.power) {
        return true;
    }

    // –ú–æ–∂–Ω–æ –±–∏—Ç—å –∫–æ–∑—ã—Ä–µ–º, –µ—Å–ª–∏ –∞—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –∫–æ–∑—ã—Ä—å
    if (defendCard.suit === window.gameState.trumpSuit && attackCard.suit !== window.gameState.trumpSuit) {
        return true;
    }

    // –ö–æ–∑—ã—Ä—å –º–æ–∂–Ω–æ –±–∏—Ç—å —Ç–æ–ª—å–∫–æ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—à–∏–º –∫–æ–∑—ã—Ä–µ–º
    if (defendCard.suit === window.gameState.trumpSuit &&
        attackCard.suit === window.gameState.trumpSuit &&
        defendCard.power > attackCard.power) {
        return true;
    }

    return false;
}

function playDurakCard(cardIndex) {
    const card = window.gameState.playerHand[cardIndex];
    console.log('–ò–≥—Ä–∞–µ–º –∫–∞—Ä—Ç–æ–π:', card, '–§–∞–∑–∞:', window.gameState.gamePhase, '–ê—Ç–∞–∫—É—é—â–∏–π:', window.gameState.currentAttacker);

    if (!card) {
        console.error('–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É:', cardIndex);
        return;
    }

    if (window.gameState.gamePhase === 'attack' && window.gameState.currentAttacker === 'player') {
        // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
        if (window.gameState.attackingCards.length === 0) {
            // –ü–µ—Ä–≤–∞—è –∞—Ç–∞–∫–∞ - –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π
            window.gameState.attackingCards.push(card);
            window.gameState.playerHand.splice(cardIndex, 1);
            window.gameState.gamePhase = 'defend';
            // currentAttacker –æ—Å—Ç–∞–µ—Ç—Å—è 'player' - –æ–Ω –∞—Ç–∞–∫—É–µ—Ç, –±–æ—Ç –∑–∞—â–∏—â–∞–µ—Ç—Å—è
            console.log('–ü–µ—Ä–≤–∞—è –∞—Ç–∞–∫–∞ –∫–∞—Ä—Ç–æ–π:', card);

            renderDurakGame();

            // –ë–æ—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—â–∏—Ç–∏—Ç—å—Å—è
            if (window.currentOpponent?.type === 'bot') {
                setTimeout(() => {
                    makeDurakBotDefense();
                }, 1000);
            }
        } else {
            // –ü–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã —Ç–æ–≥–æ –∂–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ —á—Ç–æ —É–∂–µ –Ω–∞ —Å—Ç–æ–ª–µ
            if (canAttackOrThrowCard(card)) {
                window.gameState.attackingCards.push(card);
                window.gameState.playerHand.splice(cardIndex, 1);
                console.log('–ü–æ–¥–∫–∏–¥—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É:', card);

                renderDurakGame();

                // –ë–æ—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—â–∏—Ç–∏—Ç—å—Å—è –æ—Ç –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã
                if (window.currentOpponent?.type === 'bot') {
                    setTimeout(() => {
                        makeDurakBotDefense();
                    }, 1000);
                }
            } else {
                alert('–ù–µ–ª—å–∑—è –ø–æ–¥–∫–∏–Ω—É—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É! –ú–æ–∂–Ω–æ –ø–æ–¥–∫–∏–¥—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã —Ç–æ–≥–æ –∂–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞, —á—Ç–æ —É–∂–µ –ª–µ–∂–∞—Ç –Ω–∞ —Å—Ç–æ–ª–µ.');
            }
        }
    } else if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
        // –ò–≥—Ä–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è –æ—Ç –∞—Ç–∞–∫–∏ –±–æ—Ç–∞
        const undefendedCards = window.gameState.attackingCards.filter((_, index) => !window.gameState.defendingCards[index]);

        if (undefendedCards.length === 0) {
            alert('–í—Å–µ –∫–∞—Ä—Ç—ã —É–∂–µ –æ—Ç–±–∏—Ç—ã!');
            return;
        }

        // –ò—â–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–æ—Ç–±–∏—Ç—É—é –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ—Ç–±–∏—Ç—å —ç—Ç–æ–π –∫–∞—Ä—Ç–æ–π
        let defendedIndex = -1;
        for (let i = 0; i < window.gameState.attackingCards.length; i++) {
            if (!window.gameState.defendingCards[i]) {
                const attackCard = window.gameState.attackingCards[i];
                if (canDefendCard(card, attackCard)) {
                    defendedIndex = i;
                    break;
                }
            }
        }

        if (defendedIndex !== -1) {
            // –û—Ç–±–∏–≤–∞–µ–º—Å—è
            window.gameState.defendingCards[defendedIndex] = card;
            window.gameState.playerHand.splice(cardIndex, 1);
            console.log('–û—Ç–±–∏–≤–∞–µ–º—Å—è –∫–∞—Ä—Ç–æ–π:', card, '–æ—Ç –∫–∞—Ä—Ç—ã:', window.gameState.attackingCards[defendedIndex]);

            renderDurakGame();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã
            const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);

            if (allDefended) {
                // –í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã, —Ç–µ–ø–µ—Ä—å –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å –∏–ª–∏ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–∞—Å–æ–≤–∞—Ç—å
                console.log('–í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã, –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å, –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–∞—Å–æ–≤–∞—Ç—å');
                if (window.currentOpponent?.type === 'bot') {
                    setTimeout(() => {
                        makeDurakBotThrow();
                    }, 1000);
                }
            } else {
                // –ï—Å—Ç—å –µ—â–µ –Ω–µ–æ—Ç–±–∏—Ç—ã–µ –∫–∞—Ä—Ç—ã, –±–æ—Ç –¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—â–∞—Ç—å—Å—è
                if (window.currentOpponent?.type === 'bot') {
                    setTimeout(() => {
                        makeDurakBotDefense();
                    }, 1000);
                }
            }
        } else {
            alert('–≠—Ç–æ–π –∫–∞—Ä—Ç–æ–π –Ω–µ–ª—å–∑—è –æ—Ç–±–∏—Ç—å—Å—è –æ—Ç –∞—Ç–∞–∫—É—é—â–∏—Ö –∫–∞—Ä—Ç!');
        }
    } else if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'player') {
        // –ë–æ—Ç –æ—Ç–±–∏–ª—Å—è –æ—Ç –∏–≥—Ä–æ–∫–∞, –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å –∫–∞—Ä—Ç—ã
        console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–∏–Ω—É—Ç—å –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –æ—Ç–±–æ—è –±–æ—Ç–∞');
        console.log('–í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã?', window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]));
        console.log('–ú–æ–∂–Ω–æ –ø–æ–¥–∫–∏–Ω—É—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É?', canAttackOrThrowCard(card));

        if (canAttackOrThrowCard(card)) {
            window.gameState.attackingCards.push(card);
            window.gameState.playerHand.splice(cardIndex, 1);
            console.log('–ò–≥—Ä–æ–∫ –ø–æ–¥–∫–∏–¥—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –æ—Ç–±–æ—è –±–æ—Ç–∞:', card);

            renderDurakGame();

            // –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∑–∞—â–∏—Ç–∏—Ç—å—Å—è –æ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç–æ–π –∫–∞—Ä—Ç—ã
            if (window.currentOpponent?.type === 'bot') {
                setTimeout(() => {
                    makeDurakBotDefense();
                }, 1000);
            }
        } else {
            alert('–ù–µ–ª—å–∑—è –ø–æ–¥–∫–∏–Ω—É—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É! –ú–æ–∂–Ω–æ –ø–æ–¥–∫–∏–¥—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã —Ç–æ–≥–æ –∂–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞, —á—Ç–æ —É–∂–µ –ª–µ–∂–∞—Ç –Ω–∞ —Å—Ç–æ–ª–µ.');
        }
    } else if (window.gameState.gamePhase === 'attack' && window.gameState.currentAttacker === 'bot') {
        // –ë–æ—Ç –∞—Ç–∞–∫–æ–≤–∞–ª, –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å –µ—Å–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã
        const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);

        if (allDefended && canAttackOrThrowCard(card)) {
            window.gameState.attackingCards.push(card);
            window.gameState.playerHand.splice(cardIndex, 1);
            window.gameState.gamePhase = 'defend';
            console.log('–ò–≥—Ä–æ–∫ –ø–æ–¥–∫–∏–¥—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –æ—Ç–±–æ—è:', card);

            renderDurakGame();

            // –ë–æ—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—â–∏—Ç–∏—Ç—å—Å—è –æ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç–æ–π –∫–∞—Ä—Ç—ã
            if (window.currentOpponent?.type === 'bot') {
                setTimeout(() => {
                    makeDurakBotDefense();
                }, 1000);
            }
        } else if (!allDefended) {
            alert('–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ç–±–∏—Ç—å –≤—Å–µ –∞—Ç–∞–∫—É—é—â–∏–µ –∫–∞—Ä—Ç—ã!');
        } else {
            alert('–ù–µ–ª—å–∑—è –ø–æ–¥–∫–∏–Ω—É—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É! –ú–æ–∂–Ω–æ –ø–æ–¥–∫–∏–¥—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã —Ç–æ–≥–æ –∂–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞, —á—Ç–æ —É–∂–µ –ª–µ–∂–∞—Ç –Ω–∞ —Å—Ç–æ–ª–µ.');
        }
    } else {
        console.log('–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥ –∏–ª–∏ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è —Ñ–∞–∑–∞ –∏–≥—Ä—ã');
    }
}

function canAttackOrThrowCard(card) {
    if (window.gameState.attackingCards.length === 0) return true;

    // –ú–æ–∂–Ω–æ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ–π —Ç–æ–≥–æ –∂–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å –Ω–∞ —Å—Ç–æ–ª–µ
    const tableValues = [...window.gameState.attackingCards, ...window.gameState.defendingCards]
        .map(c => c.value);
    return tableValues.includes(card.value);
}

function canDefendWith(defendCard, attackCard) {
    // –ú–æ–∂–Ω–æ –±–∏—Ç—å —Å—Ç–∞—Ä—à–µ–π –∫–∞—Ä—Ç–æ–π —Ç–æ–π –∂–µ –º–∞—Å—Ç–∏ –∏–ª–∏ –∫–æ–∑—ã—Ä–µ–º
    if (defendCard.suit === attackCard.suit) {
        return defendCard.power > attackCard.power;
    }

    // –ö–æ–∑—ã—Ä–µ–º –º–æ–∂–Ω–æ –±–∏—Ç—å –ª—é–±—É—é –Ω–µ–∫–æ–∑—ã—Ä–Ω—É—é –∫–∞—Ä—Ç—É
    if (defendCard.suit === window.gameState.trumpSuit && attackCard.suit !== window.gameState.trumpSuit) {
        return true;
    }

    // –ö–æ–∑—ã—Ä–µ–º –º–æ–∂–Ω–æ –±–∏—Ç—å –º–µ–Ω—å—à–∏–π –∫–æ–∑—ã—Ä—å
    if (defendCard.suit === window.gameState.trumpSuit && attackCard.suit === window.gameState.trumpSuit) {
        return defendCard.power > attackCard.power;
    }

    return false;
}

function defendWithAI() {
    const lastAttackCard = window.gameState.attackingCards[window.gameState.attackingCards.length - 1];
    const defendingCard = window.gameState.opponentHand.find(card => canDefendWith(card, lastAttackCard));

    if (defendingCard) {
        const index = window.gameState.opponentHand.indexOf(defendingCard);
        window.gameState.defendingCards.push(defendingCard);
        window.gameState.opponentHand.splice(index, 1);
        window.gameState.gamePhase = 'attack';

        if (window.gameState.attackingCards.length === window.gameState.defendingCards.length) {
            endDurakRound();
        }
    } else {
        // –ò–ò –±–µ—Ä—ë—Ç –∫–∞—Ä—Ç—ã
        window.gameState.opponentHand.push(...window.gameState.attackingCards);
        window.gameState.attackingCards = [];
        window.gameState.defendingCards = [];
        window.gameState.gamePhase = 'attack';
        drawDurakCards();
    }

    renderDurakGame();
}

function takeDurakCards() {
    console.log('–ò–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞');
    console.log('–ö–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ –ø–µ—Ä–µ–¥ –≤–∑—è—Ç–∏–µ–º:', {
        attackingCards: window.gameState.attackingCards,
        defendingCards: window.gameState.defendingCards
    });
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç —É –∏–≥—Ä–æ–∫–∞ –¥–æ –≤–∑—è—Ç–∏—è:', window.gameState.playerHand.length);

    if (window.socket && window.roomId && window.currentOpponent?.type === 'player') {
        // –°–µ—Ç–µ–≤–∞—è –∏–≥—Ä–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        window.socket.emit('game-move', {
            roomId: window.roomId,
            gameType: 'durak',
            move: {
                action: 'take',
                playerId: window.socket.id
            }
        });
    }

    // –ò–≥—Ä–æ–∫ –±–µ—Ä—ë—Ç –≤—Å–µ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞
    window.gameState.playerHand.push(...window.gameState.attackingCards);
    window.gameState.playerHand.push(...window.gameState.defendingCards);
    window.gameState.attackingCards = [];
    window.gameState.defendingCards = [];

    console.log('–ö–∞—Ä—Ç—ã –≤–∑—è—Ç—ã –∏–≥—Ä–æ–∫–æ–º, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç —É –∏–≥—Ä–æ–∫–∞:', window.gameState.playerHand.length);

    // –¢–æ—Ç –∫—Ç–æ –∞—Ç–∞–∫–æ–≤–∞–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å (–ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –¥—É—Ä–∞–∫–∞)
    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤–∑—è–ª –∫–∞—Ä—Ç—ã, —Ç–æ –∞—Ç–∞–∫—É—é—â–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ
    window.gameState.gamePhase = 'attack';

    // –î–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã
    refillDurakHands();

    renderDurakGame();

    // –ï—Å–ª–∏ –∞—Ç–∞–∫—É–µ—Ç –±–æ—Ç, –¥–µ–ª–∞–µ–º –µ–≥–æ —Ö–æ–¥
    if (window.gameState.currentAttacker === 'bot' && window.currentOpponent?.type === 'bot') {
        setTimeout(() => {
            makeDurakBotAttack();
        }, 1000);
    }
}

function passDurakTurn() {
    console.log('–ü–∞—Å –≤ –¥—É—Ä–∞–∫–µ');
    console.log('–¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞:', window.gameState.gamePhase, '–ê—Ç–∞–∫—É—é—â–∏–π:', window.gameState.currentAttacker);
    console.log('–ö–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ:', {
        attackingCards: window.gameState.attackingCards,
        defendingCards: window.gameState.defendingCards
    });

    if (window.socket && window.roomId && window.currentOpponent?.type === 'player') {
        // –°–µ—Ç–µ–≤–∞—è –∏–≥—Ä–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        window.socket.emit('game-move', {
            roomId: window.roomId,
            gameType: 'durak',
            move: {
                action: 'pass',
                playerId: window.socket.id
            }
        });
    }

    if (window.gameState.gamePhase === 'attack' && window.gameState.currentAttacker === 'player') {
        // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç –∏ –ø–∞—Å—É–µ—Ç - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥ (–æ—Ç–±–æ–π)
        console.log('–ò–≥—Ä–æ–∫ –ø–∞—Å—É–µ—Ç –ø—Ä–∏ –∞—Ç–∞–∫–µ - –æ—Ç–±–æ–π');
        finishDurakRound();
    } else if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'player') {
        // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫–æ–≤–∞–ª, –±–æ—Ç –æ—Ç–±–∏–ª—Å—è, –∏–≥—Ä–æ–∫ –ø–∞—Å—É–µ—Ç (–Ω–µ –ø–æ–¥–∫–∏–¥—ã–≤–∞–µ—Ç) - –æ—Ç–±–æ–π
        console.log('–ò–≥—Ä–æ–∫ –ø–∞—Å—É–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–±–æ—è –±–æ—Ç–∞ - –æ—Ç–±–æ–π');
        finishDurakRound();
    } else if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
        // –ë–æ—Ç –∞—Ç–∞–∫–æ–≤–∞–ª, –∏–≥—Ä–æ–∫ –æ—Ç–±–∏–ª—Å—è, —Ç–µ–ø–µ—Ä—å –∏–≥—Ä–æ–∫ –ø–∞—Å—É–µ—Ç –¥–ª—è –æ—Ç–±–æ—è
        console.log('–ò–≥—Ä–æ–∫ –ø–∞—Å—É–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–±–æ—è - –æ—Ç–±–æ–π');
        finishDurakRound();
    } else {
        console.log('–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –¥–ª—è –ø–∞—Å–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã?');
        // –ï—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è –Ω–µ—è—Å–Ω–∞—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã
        if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
            console.log('–ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç, –∏–≥—Ä–æ–∫ –ø–∞—Å—É–µ—Ç - –±–µ—Ä–µ–º –∫–∞—Ä—Ç—ã');
            takeDurakCards();
        } else {
            console.log('–î—Ä—É–≥–∞—è —Å–∏—Ç—É–∞—Ü–∏—è - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º');
            renderDurakGame();
        }
    }
}

function finishDurakRound() {
    console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞ –¥—É—Ä–∞–∫–∞ (–æ—Ç–±–æ–π)');
    console.log('–ö–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ –ø–µ—Ä–µ–¥ –æ—Ç–±–æ–µ–º:', {
        attackingCards: window.gameState.attackingCards,
        defendingCards: window.gameState.defendingCards
    });

    // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞ (–æ–Ω–∏ —É—Ö–æ–¥—è—Ç –≤ –æ—Ç–±–æ–π)
    window.gameState.attackingCards = [];
    window.gameState.defendingCards = [];

    console.log('–ö–∞—Ä—Ç—ã –æ—á–∏—â–µ–Ω—ã —Å–æ —Å—Ç–æ–ª–∞');
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç —É –∏–≥—Ä–æ–∫–∞:', window.gameState.playerHand.length);
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç —É –±–æ—Ç–∞:', window.gameState.opponentHand.length);

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞—Ç–∞–∫—É—é—â–µ–≥–æ - —Ç–æ—Ç –∫—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–±–∏–ª—Å—è, —Ç–µ–ø–µ—Ä—å –∞—Ç–∞–∫—É–µ—Ç
    if (window.gameState.currentAttacker === 'bot') {
        window.gameState.currentAttacker = 'player';
    } else {
        window.gameState.currentAttacker = 'bot';
    }

    window.gameState.gamePhase = 'attack';

    // –î–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã
    refillDurakHands();

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–≥—Ä—É
    renderDurakGame();

    // –ï—Å–ª–∏ —Ç–µ–ø–µ—Ä—å –∞—Ç–∞–∫—É–µ—Ç –±–æ—Ç, –¥–µ–ª–∞–µ–º –µ–≥–æ —Ö–æ–¥
    if (window.gameState.currentAttacker === 'bot' && window.currentOpponent?.type === 'bot') {
        setTimeout(() => {
            makeDurakBotAttack();
        }, 1000);
    }
}

function endDurakRound() {
    // –í—Å–µ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞ —É–±–∏—Ä–∞—é—Ç—Å—è –∏–∑ –∏–≥—Ä—ã
    window.gameState.attackingCards = [];
    window.gameState.defendingCards = [];
    window.gameState.gamePhase = 'attack';

    drawDurakCards();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
    if (window.gameState.playerHand.length === 0) {
        alert('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!');
        newDurakRound();
    } else if (window.gameState.opponentHand.length === 0) {
        alert('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª!');
        newDurakRound();
    }
}

function drawDurakCards() {
    // –î–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã –¥–æ 6 (–∏–ª–∏ —Å–∫–æ–ª—å–∫–æ –µ—Å—Ç—å –≤ –∫–æ–ª–æ–¥–µ)
    while (window.gameState.playerHand.length < 6 && window.gameState.deck.length > 0) {
        window.gameState.playerHand.push(window.gameState.deck.pop());
    }
    while (window.gameState.opponentHand.length < 6 && window.gameState.deck.length > 0) {
        window.gameState.opponentHand.push(window.gameState.deck.pop());
    }
}

function newDurakRound() {
    window.gameState.gameMode = 'durak';
    createDeck();
    shuffleDeck();
    setTrumpSuit();
    dealDurakCards();
    window.gameState.attackingCards = [];
    window.gameState.defendingCards = [];
    window.gameState.gamePhase = 'attack';
    renderDurakGame();
}

function backToMenu() {
    window.gameState.gameMode = 'menu';
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    closeGame();
}

function handleCardClick(e) {
    if (window.gameState.currentPlayer !== 'player') return;

    const cardIndex = parseInt(e.target.dataset.index);
    const card = window.gameState.playerHand[cardIndex];

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    window.socket.emit('game_event', {
        game: 'cards',
        data: {
            action: 'play',
            card,
            roomId: window.roomId
        }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    window.gameState.tableCards.push(card);
    window.gameState.playerHand.splice(cardIndex, 1);
    window.gameState.currentPlayer = 'opponent';

    // –†–µ–Ω–¥–µ—Ä–∏–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
    if (window.gameState.gameMode === 'poker') {
        renderPokerGame();
    } else if (window.gameState.gameMode === 'durak') {
        renderDurakGame();
    } else {
        renderCardsMenu();
    }

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ö–æ–¥ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)
    setTimeout(() => {
        if (window.gameState.opponentHand.length > 0) {
            const opponentCardIndex = Math.floor(Math.random() * window.gameState.opponentHand.length);
            const opponentCard = window.gameState.opponentHand[opponentCardIndex];

            window.gameState.tableCards.push(opponentCard);
            window.gameState.opponentHand.splice(opponentCardIndex, 1);
            window.gameState.currentPlayer = 'player';

            // –†–µ–Ω–¥–µ—Ä–∏–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
            if (window.gameState.gameMode === 'poker') {
                renderPokerGame();
            } else if (window.gameState.gameMode === 'durak') {
                renderDurakGame();
            } else {
                renderCardsMenu();
            }
        }
    }, 1000);
}

// –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä, –µ—Å–ª–∏ –º–æ–¥—É–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
function initSimpleChess() {
    console.log('Initializing simple chess game');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!window.currentOpponent) {
        window.currentOpponent = { type: 'bot', name: '–ë–æ—Ç', emoji: 'ü§ñ' };
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–≥—Ä—ã
    const panel = document.getElementById('activeGamePanel');
    if (panel) {
        document.getElementById('activeGameTitle').textContent = '–®–∞—Ö–º–∞—Ç—ã';
        document.getElementById('activeGameIcon').textContent = '‚ôüÔ∏è';
        panel.classList.remove('hidden');
        panel.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }

    const container = document.getElementById('activeGameContent');
    if (container) {
        // –°–æ–∑–¥–∞–µ–º —à–∞—Ö–º–∞—Ç–Ω—É—é –¥–æ—Å–∫—É
        let html = '<div class="chess-status">–í–∞—à —Ö–æ–¥ (–±–µ–ª—ã–µ —Ñ–∏–≥—É—Ä—ã)</div>';
        html += '<div class="chess-board">';

        const board = createInitialChessBoard();
        for (let row = 0; row < 8; row++) {
            for (let col = 0; col < 8; col++) {
                const isLight = (row + col) % 2 === 0;
                const cellClass = isLight ? 'light' : 'dark';
                const piece = board[row][col] || '';
                html += `<div class="chess-cell ${cellClass}" data-row="${row}" data-col="${col}">${piece}</div>`;
            }
        }
        html += '</div>';
        html += '<div class="game-controls"><button onclick="closeGame()">–ó–∞–∫—Ä—ã—Ç—å</button></div>';

        container.innerHTML = html;
        container.style.display = 'block';

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∞—Ö–º–∞—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        window.gameState = {
            board: board,
            currentPlayer: 'white',
            selectedSquare: null,
            gameOver: false,
            moveCount: 0
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
        container.querySelectorAll('.chess-cell').forEach(cell => {
            cell.addEventListener('click', () => {
                const row = parseInt(cell.dataset.row);
                const col = parseInt(cell.dataset.col);
                handleSimpleChessClick(row, col);
            });
        });
    }
}

function initSimpleTicTacToe() {
    console.log('Initializing simple tic-tac-toe game');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!window.currentOpponent) {
        window.currentOpponent = { type: 'bot', name: '–ë–æ—Ç', emoji: 'ü§ñ' };
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–≥—Ä—ã
    const panel = document.getElementById('activeGamePanel');
    if (panel) {
        document.getElementById('activeGameTitle').textContent = '–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏';
        document.getElementById('activeGameIcon').textContent = '‚≠ï';
        panel.classList.remove('hidden');
        panel.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }

    const container = document.getElementById('activeGameContent');
    if (container) {
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        let html = '<div class="tic-tac-toe-container">';
        html += '<h3>‚≠ï –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏</h3>';
        html += '<div class="tic-tac-toe-status">–í–∞—à —Ö–æ–¥</div>';
        html += '<div class="tic-tac-toe-board">';

        for (let row = 0; row < 3; row++) {
            for (let col = 0; col < 3; col++) {
                html += `<div class="cell" data-row="${row}" data-col="${col}" onclick="window.handleSimpleTicTacToeClick(${row}, ${col})"></div>`;
            }
        }

        html += '</div>';
        html += '<div class="game-controls"><button onclick="closeGame()">–ó–∞–∫—Ä—ã—Ç—å</button></div>';
        html += '</div>';

        container.innerHTML = html;
        container.style.display = 'block';

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        window.gameState = {
            board: Array(3).fill().map(() => Array(3).fill('')),
            currentPlayer: 'X',
            gameOver: false,
            winner: null
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–µ
window.handleSimpleChessClick = function(row, col) {
    if (window.gameState.gameOver) return;

    const piece = window.gameState.board[row][col];

    // –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    if (window.gameState.selectedSquare &&
        window.gameState.selectedSquare.row === row &&
        window.gameState.selectedSquare.col === col) {
        window.gameState.selectedSquare = null;
        updateSimpleChessBoard();
        return;
    }

    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ñ–∏–≥—É—Ä–∞ –∏–≥—Ä–æ–∫–∞, –≤—ã–¥–µ–ª—è–µ–º –µ—ë
    if (piece && isPlayerPiece(piece, window.gameState.currentPlayer)) {
        window.gameState.selectedSquare = { row, col };
        updateSimpleChessBoard();
        return;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ñ–∏–≥—É—Ä–∞, –ø—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
    if (window.gameState.selectedSquare) {
        const fromRow = window.gameState.selectedSquare.row;
        const fromCol = window.gameState.selectedSquare.col;
        const fromPiece = window.gameState.board[fromRow][fromCol];

        if (isValidSimpleMove(fromPiece, fromRow, fromCol, row, col)) {
            // –î–µ–ª–∞–µ–º —Ö–æ–¥
            window.gameState.board[row][col] = fromPiece;
            window.gameState.board[fromRow][fromCol] = '';
            window.gameState.selectedSquare = null;
            window.gameState.currentPlayer = window.gameState.currentPlayer === 'white' ? 'black' : 'white';
            window.gameState.moveCount++;

            updateSimpleChessBoard();
            updateSimpleChessStatus();

            // –•–æ–¥ –±–æ—Ç–∞
            if (window.currentOpponent?.type === 'bot' && window.gameState.currentPlayer === 'black' && !window.gameState.gameOver) {
                setTimeout(() => {
                    makeSimpleChessBotMove();
                }, 1000);
            }
        }
    }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∏–≥—É—Ä–∞ —Ñ–∏–≥—É—Ä–æ–π –∏–≥—Ä–æ–∫–∞
function isPlayerPiece(piece, player) {
    const whitePieces = ['‚ôî', '‚ôï', '‚ôñ', '‚ôó', '‚ôò', '‚ôô'];
    const blackPieces = ['‚ôö', '‚ôõ', '‚ôú', '‚ôù', '‚ôû', '‚ôüÔ∏è'];

    if (player === 'white') {
        return whitePieces.includes(piece);
    } else {
        return blackPieces.includes(piece);
    }
}

// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ —Ö–æ–¥–∞ (–æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
function isValidSimpleMove(piece, fromRow, fromCol, toRow, toCol) {
    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (fromRow === toRow && fromCol === toCol) return false;

    const targetPiece = window.gameState.board[toRow][toCol];
    const isCapture = targetPiece !== '';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞—Ç–∞–∫—É–µ–º –ª–∏ —Å–≤–æ—é —Ñ–∏–≥—É—Ä—É
    if (isCapture && isPlayerPiece(targetPiece, window.gameState.currentPlayer)) {
        return false;
    }

    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ö–æ–¥–æ–≤
    const rowDiff = Math.abs(toRow - fromRow);
    const colDiff = Math.abs(toCol - fromCol);

    switch (piece) {
        case '‚ôô': // –ë–µ–ª–∞—è –ø–µ—à–∫–∞
            if (colDiff === 0 && !isCapture) {
                return (toRow === fromRow - 1) || (fromRow === 6 && toRow === 4);
            }
            if (colDiff === 1 && isCapture && toRow === fromRow - 1) {
                return true;
            }
            break;

        case '‚ôüÔ∏è': // –ß–µ—Ä–Ω–∞—è –ø–µ—à–∫–∞
            if (colDiff === 0 && !isCapture) {
                return (toRow === fromRow + 1) || (fromRow === 1 && toRow === 3);
            }
            if (colDiff === 1 && isCapture && toRow === fromRow + 1) {
                return true;
            }
            break;

        case '‚ôñ': case '‚ôú': // –õ–∞–¥—å—è
            return (rowDiff === 0 || colDiff === 0);

        case '‚ôó': case '‚ôù': // –°–ª–æ–Ω
            return rowDiff === colDiff;

        case '‚ôò': case '‚ôû': // –ö–æ–Ω—å
            return (rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2);

        case '‚ôï': case '‚ôõ': // –§–µ—Ä–∑—å
            return (rowDiff === 0 || colDiff === 0 || rowDiff === colDiff);

        case '‚ôî': case '‚ôö': // –ö–æ—Ä–æ–ª—å
            return rowDiff <= 1 && colDiff <= 1;
    }

    return false;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏
function updateSimpleChessBoard() {
    for (let row = 0; row < 8; row++) {
        for (let col = 0; col < 8; col++) {
            const cell = document.querySelector(`.chess-cell[data-row="${row}"][data-col="${col}"]`);
            if (cell) {
                const piece = window.gameState.board[row][col] || '';
                cell.textContent = piece;

                // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è
                cell.classList.remove('selected', 'valid-move');

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–ª–µ—Ç–∫–∏
                if (window.gameState.selectedSquare &&
                    window.gameState.selectedSquare.row === row &&
                    window.gameState.selectedSquare.col === col) {
                    cell.classList.add('selected');
                }
            }
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —à–∞—Ö–º–∞—Ç
function updateSimpleChessStatus() {
    const statusEl = document.querySelector('.chess-status');
    if (statusEl) {
        const playerName = window.gameState.currentPlayer === 'white' ? '–í–∞—à —Ö–æ–¥ (–±–µ–ª—ã–µ)' : '–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (—á–µ—Ä–Ω—ã–µ)';
        statusEl.textContent = playerName;
    }
}

// –•–æ–¥ —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
function makeSimpleChessBotMove() {
    if (window.gameState.gameOver) return;

    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ö–æ–¥
    const possibleMoves = [];

    for (let fromRow = 0; fromRow < 8; fromRow++) {
        for (let fromCol = 0; fromCol < 8; fromCol++) {
            const piece = window.gameState.board[fromRow][fromCol];
            if (piece && isPlayerPiece(piece, 'black')) {
                for (let toRow = 0; toRow < 8; toRow++) {
                    for (let toCol = 0; toCol < 8; toCol++) {
                        if (isValidSimpleMove(piece, fromRow, fromCol, toRow, toCol)) {
                            possibleMoves.push({ fromRow, fromCol, toRow, toCol });
                        }
                    }
                }
            }
        }
    }

    if (possibleMoves.length > 0) {
        const move = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];
        window.gameState.board[move.toRow][move.toCol] = window.gameState.board[move.fromRow][move.fromCol];
        window.gameState.board[move.fromRow][move.fromCol] = '';
        window.gameState.currentPlayer = 'white';
        window.gameState.moveCount++;

        updateSimpleChessBoard();
        updateSimpleChessStatus();
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ –∫—Ä–µ—Å—Ç–∏–∫–∞–º-–Ω–æ–ª–∏–∫–∞–º
window.handleSimpleTicTacToeClick = function(row, col) {
    if (window.gameState.gameOver || window.gameState.board[row][col] !== '') {
        return;
    }

    // –î–µ–ª–∞–µ–º —Ö–æ–¥
    window.gameState.board[row][col] = window.gameState.currentPlayer;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if (checkSimpleWinner(window.gameState.currentPlayer)) {
        window.gameState.gameOver = true;
        window.gameState.winner = window.gameState.currentPlayer;
        updateSimpleTicTacToeDisplay(`–ò–≥—Ä–æ–∫ ${window.gameState.currentPlayer} –ø–æ–±–µ–¥–∏–ª!`);
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏—á—å—é
    if (window.gameState.board.flat().every(cell => cell !== '')) {
        window.gameState.gameOver = true;
        window.gameState.winner = 'draw';
        updateSimpleTicTacToeDisplay('–ù–∏—á—å—è!');
        return;
    }

    // –ú–µ–Ω—è–µ–º –∏–≥—Ä–æ–∫–∞
    window.gameState.currentPlayer = window.gameState.currentPlayer === 'X' ? 'O' : 'X';
    updateSimpleTicTacToeDisplay(window.gameState.currentPlayer === 'X' ? '–í–∞—à —Ö–æ–¥' : '–•–æ–¥ –±–æ—Ç–∞');

    // –•–æ–¥ –±–æ—Ç–∞
    if (window.currentOpponent?.type === 'bot' && window.gameState.currentPlayer === 'O' && !window.gameState.gameOver) {
        setTimeout(() => {
            makeSimpleBotMove();
        }, 500);
    }
};

function updateSimpleTicTacToeDisplay(message) {
    const statusEl = document.querySelector('.tic-tac-toe-status');
    if (statusEl) {
        statusEl.textContent = message;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å–∫–∏
    for (let row = 0; row < 3; row++) {
        for (let col = 0; col < 3; col++) {
            const cell = document.querySelector(`.cell[data-row="${row}"][data-col="${col}"]`);
            if (cell) {
                cell.textContent = window.gameState.board[row][col];
                cell.className = `cell ${window.gameState.board[row][col].toLowerCase()}`;
            }
        }
    }
}

function checkSimpleWinner(player) {
    const board = window.gameState.board;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã
    for (let i = 0; i < 3; i++) {
        if ((board[i][0] === player && board[i][1] === player && board[i][2] === player) ||
            (board[0][i] === player && board[1][i] === player && board[2][i] === player)) {
            return true;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    if ((board[0][0] === player && board[1][1] === player && board[2][2] === player) ||
        (board[0][2] === player && board[1][1] === player && board[2][0] === player)) {
        return true;
    }

    return false;
}

function makeSimpleBotMove() {
    if (window.gameState.gameOver) return;

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ –¥–ª—è –∫—Ä–µ—Å—Ç–∏–∫–æ–≤-–Ω–æ–ª–∏–∫–æ–≤
    const botSymbol = 'O';
    const playerSymbol = 'X';
    const board = window.gameState.board;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
    function evaluatePosition() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –±–æ—Ç
        if (checkWinnerForSymbol(botSymbol)) return 10;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫
        if (checkWinnerForSymbol(playerSymbol)) return -10;
        // –ù–∏—á—å—è
        return 0;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ —Å–∏–º–≤–æ–ª
    function checkWinnerForSymbol(symbol) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏, —Å—Ç–æ–ª–±—Ü—ã –∏ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
        for (let i = 0; i < 3; i++) {
            if ((board[i][0] === symbol && board[i][1] === symbol && board[i][2] === symbol) ||
                (board[0][i] === symbol && board[1][i] === symbol && board[2][i] === symbol)) {
                return true;
            }
        }
        // –î–∏–∞–≥–æ–Ω–∞–ª–∏
        if ((board[0][0] === symbol && board[1][1] === symbol && board[2][2] === symbol) ||
            (board[0][2] === symbol && board[1][1] === symbol && board[2][0] === symbol)) {
            return true;
        }
        return false;
    }

    // –ú–∏–Ω–∏–º–∞–∫—Å –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ–≥–æ —Ö–æ–¥–∞
    function minimax(depth, isMaximizing, alpha = -Infinity, beta = Infinity) {
        const score = evaluatePosition();

        // –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (score === 10 || score === -10) return score;
        if (board.flat().every(cell => cell !== '')) return 0; // –ù–∏—á—å—è

        if (isMaximizing) {
            // –•–æ–¥ –±–æ—Ç–∞ (–º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è)
            let maxEval = -Infinity;
            for (let row = 0; row < 3; row++) {
                for (let col = 0; col < 3; col++) {
                    if (board[row][col] === '') {
                        board[row][col] = botSymbol;
                        const eval = minimax(depth + 1, false, alpha, beta);
                        board[row][col] = '';
                        maxEval = Math.max(maxEval, eval);
                        alpha = Math.max(alpha, eval);
                        if (beta <= alpha) break;
                    }
                }
            }
            return maxEval;
        } else {
            // –•–æ–¥ –∏–≥—Ä–æ–∫–∞ (–º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è)
            let minEval = Infinity;
            for (let row = 0; row < 3; row++) {
                for (let col = 0; col < 3; col++) {
                    if (board[row][col] === '') {
                        board[row][col] = playerSymbol;
                        const eval = minimax(depth + 1, true, alpha, beta);
                        board[row][col] = '';
                        minEval = Math.min(minEval, eval);
                        beta = Math.min(beta, eval);
                        if (beta <= alpha) break;
                    }
                }
            }
            return minEval;
        }
    }

    // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Ö–æ–¥
    let bestMove = null;
    let bestValue = -Infinity;

    for (let row = 0; row < 3; row++) {
        for (let col = 0; col < 3; col++) {
            if (board[row][col] === '') {
                board[row][col] = botSymbol;
                const moveValue = minimax(0, false);
                board[row][col] = '';

                if (moveValue > bestValue) {
                    bestValue = moveValue;
                    bestMove = { row, col };
                }
            }
        }
    }

    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ª—É—á—à–∏–π —Ö–æ–¥, –¥–µ–ª–∞–µ–º –µ–≥–æ
    if (bestMove) {
        window.handleSimpleTicTacToeClick(bestMove.row, bestMove.col);
    } else {
        // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥
        const emptyCells = [];
        for (let row = 0; row < 3; row++) {
            for (let col = 0; col < 3; col++) {
                if (board[row][col] === '') {
                    emptyCells.push({ row, col });
                }
            }
        }
        if (emptyCells.length > 0) {
            const randomMove = emptyCells[Math.floor(Math.random() * emptyCells.length)];
            window.handleSimpleTicTacToeClick(randomMove.row, randomMove.col);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
if (window.socket) {
    window.socket.on('game-closed', () => {
        console.log('Received game-closed event');
        closeGame();
    });
}

function backToMenu() {
    console.log('backToMenu called');

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    window.gameState = null;
    window.currentOpponent = null;

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –∏–≥—Ä
    initCards();
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–Ω—ã—Ö –∏–≥—Ä
function checkPokerHand() {
    console.log('checkPokerHand called');

    if (window.socket && window.roomId && window.currentOpponent?.type === 'player') {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä—ã
        window.socket.emit('game-move', {
            roomId: window.roomId,
            gameType: 'poker',
            move: {
                action: 'check',
                playerId: window.socket.id
            }
        });

        // –õ–æ–∫–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∞–∑–µ –æ–∂–∏–¥–∞–Ω–∏—è
        window.gameState.gamePhase = 'waiting';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const statusElement = document.querySelector('.poker-status');
        if (statusElement) {
            statusElement.innerHTML = '<div style="color: #ffc107;">–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...</div>';
        }

        renderPokerGame();
    } else {
        // –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é
        window.gameState.gamePhase = 'waiting';
        renderPokerGame();

        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        setTimeout(() => {
            comparePokerHands();
        }, 2000);
    }
}

function comparePokerHands() {
    console.log('comparePokerHands called');

    // –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ - —Å—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—Ä—Ç
    const playerScore = window.gameState.playerHand.reduce((sum, card) => sum + getCardPower(card.value), 0);
    const opponentScore = window.gameState.opponentHand.reduce((sum, card) => sum + getCardPower(card.value), 0);

    console.log('Player score:', playerScore, 'Opponent score:', opponentScore);

    let winner;
    if (playerScore > opponentScore) {
        winner = 'player';
        window.gameState.playerScore++;
    } else if (opponentScore > playerScore) {
        winner = 'opponent';
        window.gameState.opponentScore++;
    } else {
        winner = 'draw';
    }

    window.gameState.winner = winner;
    window.gameState.gamePhase = 'finished';

    renderPokerGame();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const statusElement = document.querySelector('.poker-status');
    if (statusElement) {
        if (winner === 'player') {
            statusElement.innerHTML = '<div style="color: #28a745; font-size: 18px; font-weight: bold;">üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Ä–∞—É–Ω–¥!</div>';
        } else if (winner === 'opponent') {
            statusElement.innerHTML = '<div style="color: #dc3545; font-size: 18px; font-weight: bold;">üòû –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä–∞–ª —Ä–∞—É–Ω–¥!</div>';
        } else {
            statusElement.innerHTML = '<div style="color: #ffc107; font-size: 18px; font-weight: bold;">ü§ù –ù–∏—á—å—è –≤ —Ä–∞—É–Ω–¥–µ!</div>';
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
    if (window.gameState.playerScore >= 10 || window.gameState.opponentScore >= 10) {
        // –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
        setTimeout(() => {
            showNotification('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! ' + (window.gameState.playerScore > window.gameState.opponentScore ? '–í—ã –ø–æ–±–µ–¥–∏–ª–∏!' : '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ–±–µ–¥–∏–ª!'), 'info');
        }, 2000);
    }
}

function newPokerRound() {
    console.log('newPokerRound called');

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    window.gameState.round++;
    window.gameState.gamePhase = 'exchange';
    window.gameState.winner = null;

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É –∏ —Ä–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
    createDeck();
    shuffleDeck();
    dealPokerCards();

    renderPokerGame();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const statusElement = document.querySelector('.poker-status');
    if (statusElement) {
        statusElement.innerHTML = '<div style="color: #28a745;">–†–∞—É–Ω–¥ ' + window.gameState.round + ' –Ω–∞—á–∞—Ç!</div>';
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥—É—Ä–∞–∫–∞
function playDurakCard(cardIndex) {
    console.log('playDurakCard called with index:', cardIndex);

    if (!window.gameState || !window.gameState.playerHand || cardIndex >= window.gameState.playerHand.length) {
        return;
    }

    const card = window.gameState.playerHand[cardIndex];
    if (!card) return;

    console.log('Playing card:', card);

    if (window.socket && window.roomId && window.currentOpponent?.type === 'player') {
        // –°–µ—Ç–µ–≤–∞—è –∏–≥—Ä–∞
        let action = 'play';
        if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
            action = 'defend';
        } else if (window.gameState.gamePhase === 'attack' && window.gameState.currentAttacker === 'player') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã –¥–ª—è –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—è
            const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);
            if (allDefended && window.gameState.attackingCards.length > 0) {
                action = 'throw';
            } else {
                action = 'play';
            }
        }

        window.socket.emit('game-move', {
            roomId: window.roomId,
            gameType: 'durak',
            move: {
                action: action,
                card: { suit: card.suit, value: card.value },
                cardIndex: cardIndex,
                playerId: window.socket.id
            }
        });
    } else {
        // –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ —Å –±–æ—Ç–æ–º
        makeDurakMove(card, cardIndex);
    }
}

function makeDurakMove(card, cardIndex) {
    console.log('makeDurakMove:', card, cardIndex);

    if (window.gameState.gamePhase === 'attack' && window.gameState.currentAttacker === 'player') {
        // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
        if (window.gameState.attackingCards.length === 0) {
            // –ü–µ—Ä–≤–∞—è –∞—Ç–∞–∫–∞
            window.gameState.playerHand.splice(cardIndex, 1);
            window.gameState.attackingCards.push(card);
            window.gameState.gamePhase = 'defend';
            console.log('Player attacked with:', card);
        } else {
            // –ü–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç
            window.gameState.playerHand.splice(cardIndex, 1);
            window.gameState.attackingCards.push(card);
            console.log('Player threw card:', card);
        }
    } else if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
        // –ò–≥—Ä–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è –æ—Ç –±–æ—Ç–∞
        const undefendedIndex = window.gameState.attackingCards.findIndex((_, index) => !window.gameState.defendingCards[index]);
        if (undefendedIndex !== -1) {
            window.gameState.playerHand.splice(cardIndex, 1);
            window.gameState.defendingCards[undefendedIndex] = card;
            console.log('Player defended with:', card);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã
            const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);
            if (allDefended) {
                // –í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã - –æ—á–∏—â–∞–µ–º —Å—Ç–æ–ª –∏ –º–µ–Ω—è–µ–º –∞—Ç–∞–∫—É—é—â–µ–≥–æ
                window.gameState.attackingCards = [];
                window.gameState.defendingCards = [];
                window.gameState.currentAttacker = 'bot'; // –¢–µ–ø–µ—Ä—å –±–æ—Ç –∞—Ç–∞–∫—É–µ—Ç
                window.gameState.gamePhase = 'attack';

                // –î–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã
                refillDurakHands();

                // –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç
                setTimeout(() => {
                    makeDurakBotAttack();
                }, 1000);
            }
        }
    }

    renderDurakGame();
}

function takeDurakCards() {
    console.log('takeDurakCards called');

    if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
        // –ò–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞
        window.gameState.playerHand.push(...window.gameState.attackingCards);
        window.gameState.playerHand.push(...window.gameState.defendingCards);
        window.gameState.attackingCards = [];
        window.gameState.defendingCards = [];

        // –ú–µ–Ω—è–µ–º –∞—Ç–∞–∫—É—é—â–µ–≥–æ
        window.gameState.currentAttacker = 'bot';
        window.gameState.gamePhase = 'attack';

        // –î–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã
        refillDurakHands();

        // –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç
        setTimeout(() => {
            makeDurakBotAttack();
        }, 1000);

        renderDurakGame();
    }
}

function passDurakTurn() {
    console.log('passDurakTurn called');

    if (window.gameState.gamePhase === 'attack' && window.gameState.currentAttacker === 'player') {
        // –ò–≥—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∞—Ç–∞–∫—É
        if (window.gameState.attackingCards.length > 0) {
            window.gameState.attackingCards = [];
            window.gameState.defendingCards = [];
            window.gameState.currentAttacker = 'bot';
            window.gameState.gamePhase = 'attack';
            refillDurakHands();

            // –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç
            setTimeout(() => {
                makeDurakBotAttack();
            }, 1000);
        }
    } else if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
        // –ò–≥—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–±–∏—Ç—å—Å—è –∏ –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã
        takeDurakCards();
    } else if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'player') {
        // –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫–æ–≤–∞–ª, –≤—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã - –æ—Ç–±–æ–π
        window.gameState.attackingCards = [];
        window.gameState.defendingCards = [];
        window.gameState.currentAttacker = 'bot';
        window.gameState.gamePhase = 'attack';
        refillDurakHands();

        // –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç
        setTimeout(() => {
            makeDurakBotAttack();
        }, 1000);
    }

    renderDurakGame();
}

function refillDurakHands() {
    console.log('refillDurakHands called');

    // –î–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã –¥–æ 6 —É –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    while (window.gameState.playerHand.length < 6 && window.gameState.deck.length > 0) {
        window.gameState.playerHand.push(window.gameState.deck.pop());
    }

    while (window.gameState.opponentHand.length < 6 && window.gameState.deck.length > 0) {
        window.gameState.opponentHand.push(window.gameState.deck.pop());
    }
}

function newDurakRound() {
    console.log('newDurakRound called');

    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –¥—É—Ä–∞–∫–∞
    startDurak();
}

function makeDurakBotAttack() {
    console.log('makeDurakBotAttack called');

    if (window.gameState.gamePhase !== 'attack' || window.gameState.currentAttacker !== 'bot' || window.gameState.opponentHand.length === 0) {
        return;
    }

    // –ë–æ—Ç –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è –∞—Ç–∞–∫–∏
    const attackCard = window.gameState.opponentHand[Math.floor(Math.random() * window.gameState.opponentHand.length)];

    // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ –±–æ—Ç–∞
    const cardIndex = window.gameState.opponentHand.findIndex(card =>
        card.suit === attackCard.suit && card.value === attackCard.value
    );
    if (cardIndex !== -1) {
        window.gameState.opponentHand.splice(cardIndex, 1);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª
    window.gameState.attackingCards.push(attackCard);
    window.gameState.gamePhase = 'defend';

    console.log('Bot attacked with:', attackCard);
    renderDurakGame();

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, –∑–∞—Ç–µ–º –±–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞—Ç–∞–∫—É
    setTimeout(() => {
        if (window.gameState.gamePhase === 'defend' && window.gameState.currentAttacker === 'bot') {
            // –ë–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞—Ç–∞–∫—É, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ—Ç–±–∏–ª—Å—è
            const allDefended = window.gameState.attackingCards.every((_, index) => window.gameState.defendingCards[index]);
            if (allDefended && window.gameState.opponentHand.length > 0) {
                // –ë–æ—Ç –º–æ–∂–µ—Ç –ø–æ–¥–∫–∏–Ω—É—Ç—å –∫–∞—Ä—Ç—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ç–∞–∫—É
                if (Math.random() < 0.3) { // 30% —à–∞–Ω—Å –ø–æ–¥–∫–∏–Ω—É—Ç—å
                    makeDurakBotAttack();
                }
            }
        }
    }, 1500);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
window.backToMenu = backToMenu;
window.checkPokerHand = checkPokerHand;
window.comparePokerHands = comparePokerHands;
window.newPokerRound = newPokerRound;
window.playDurakCard = playDurakCard;
window.takeDurakCards = takeDurakCards;
window.passDurakTurn = passDurakTurn;
window.newDurakRound = newDurakRound;
window.makeDurakBotAttack = makeDurakBotAttack;

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ onclick-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö HTML
try {
    // –§—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º legacy —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    window.initChess = function() {
        if (window.initNetworkChess) {
            window.initNetworkChess();
        } else {
            // –†–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –µ—Å–ª–∏ –º–æ–¥—É–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
            console.log('Using fallback chess initialization');
            initSimpleChess();
        }
    };

    window.initTicTacToe = function() {
        if (window.initNetworkTicTacToe) {
            window.initNetworkTicTacToe();
        } else {
            // –†–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –µ—Å–ª–∏ –º–æ–¥—É–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
            console.log('Using fallback tic-tac-toe initialization');
            initSimpleTicTacToe();
        }
    };

    window.startPoker = function() {
        if (window.selectPoker) {
            window.selectPoker();
        } else {
            // –†–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            startPoker();
        }
    };

    window.startDurak = function() {
        if (window.selectDurak) {
            window.selectDurak();
        } else {
            // –†–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            startDurak();
        }
    };

    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–∞–º–∏
    window.handleGameStateUpdate = handleGameStateUpdate;
    window.initializeGameInvitations = initializeGameInvitations;
    window.showOpponentSelector = showOpponentSelector;

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏
    window.updateParticipantsList = updateParticipantsList;

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç–µ–≤—ã–º–∏ —Ö–æ–¥–∞–º–∏
    window.handleNetworkPokerMove = handleNetworkPokerMove;
    window.handleNetworkCardsMove = handleNetworkCardsMove;
    window.handleCardClick = handleCardClick;

    // –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    window.initSimpleChess = initSimpleChess;
    window.initSimpleTicTacToe = initSimpleTicTacToe;
    window.handleSimpleTicTacToeClick = window.handleSimpleTicTacToeClick;
    window.handleSimpleChessClick = window.handleSimpleChessClick;
    window.updateSimpleChessBoard = updateSimpleChessBoard;

    console.log('‚úÖ games.js: Functions exported to global scope');
} catch (e) {
    console.warn('Error exporting functions to global scope:', e);
}