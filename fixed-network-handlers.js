// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä
// –ó–∞–º–µ–Ω–∏—Ç–µ –±–ª–æ–∫ "–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä" –≤ games.js –Ω–∞ —ç—Ç–æ—Ç –∫–æ–¥

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä
if (window.socket) {
    window.socket.on('game-started', ({ gameType, players, roomId }) => {
        console.log('üéÆ Network game started:', gameType, 'in room:', roomId);
        window.currentGame = gameType;
        window.gameState = {
            gameType: gameType,
            players: players,
            currentPlayer: 0,
            gameStarted: true
        };

        console.log('üë• Game started with players:', players);

        // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º initNetworkTicTacToe –∑–¥–µ—Å—å - –ø–æ–¥–æ–∂–¥–µ–º game-state
    });

    window.socket.on('game-state', (state) => {
        console.log('üìä Received game-state:', state);
        window.gameState = state;

        // –¢–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
        if (state.gameType === 'tictactoe' && !window.gameStateInitialized) {
            window.gameStateInitialized = true;
            console.log('üéØ Initializing TicTacToe with players:', state.players);
            initNetworkTicTacToe();
        } else if (state.gameType === 'chess' && !window.gameStateInitialized) {
            window.gameStateInitialized = true;
            initNetworkChess();
        } else if (state.gameType === 'poker' && !window.gameStateInitialized) {
            window.gameStateInitialized = true;
            initNetworkPoker();
        } else if (state.gameType === 'cards' && !window.gameStateInitialized) {
            window.gameStateInitialized = true;
            initNetworkCards();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä
        if (state.gameType === 'tictactoe') {
            renderTicTacToeBoard();
        } else if (state.gameType === 'chess') {
            renderChessBoard();
        }
    });

    window.socket.on('game-move', ({ gameType, move, playerId }) => {
        console.log('üèÉ Received game move:', move, 'from player:', playerId);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
        if (gameType === 'tictactoe') {
            handleNetworkTicTacToeMove(move);
        } else if (gameType === 'chess') {
            handleNetworkChessMove(move);
        } else if (gameType === 'poker') {
            handleNetworkPokerMove(move);
        } else if (gameType === 'cards') {
            handleNetworkCardsMove(move);
        }
    });

    window.socket.on('game-ended', ({ winner, gameType }) => {
        console.log('üèÅ Game ended, winner:', winner);
        window.gameState.gameOver = true;
        window.gameState.winner = winner;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if (gameType === 'tictactoe') {
            updateTicTacToeStatus();
        } else if (gameType === 'chess') {
            updateChessStatus();
        } else if (gameType === 'poker') {
            window.gameState.gamePhase = 'finished';
            window.gameState.winner = winner;
            renderPokerGame();
        }
    });
}
