#!/usr/bin/env node

// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
const http = require('http');

const serverUrl = process.argv[2] || 'http://localhost:3000';

console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${serverUrl}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π endpoint
http.get(`${serverUrl}/`, (res) => {
    console.log(`‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç: ${res.statusCode}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
    http.get(`${serverUrl}/health`, (res) => {
        console.log(`‚úÖ Health check: ${res.statusCode}`);
        let data = '';

        res.on('data', (chunk) => {
            data += chunk;
        });

        res.on('end', () => {
            try {
                const health = JSON.parse(data);
                console.log(`üìä –ö–æ–º–Ω–∞—Ç: ${health.rooms}`);
                console.log(`üéÆ –ò–≥—Ä: ${health.games}`);
                console.log(`‚è±Ô∏è Uptime: ${Math.round(health.uptime / 60)} –º–∏–Ω`);
            } catch (e) {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç health check');
            }
        });
    }).on('error', () => {
        console.log('‚ùå Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    });

}).on('error', () => {
    console.log('‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π: npm start');
});
